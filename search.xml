<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack热加载]]></title>
    <url>%2F2018%2F03%2F16%2Fwebpack%E7%83%AD%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[页面不热加载热刷新问题 一般vue正常安装wepack之后不会遇到什么奇怪的问题，可能是webstorm 遇到了保存的问题解决 webstorm中 File &gt; Setting &gt; System Setting &gt; 勾掉“Safe Write”（2016.3.2版本）]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>配置</tag>
        <tag>vue+webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 2.0 之 Vue-Router 路由挂载实例]]></title>
    <url>%2F2018%2F03%2F16%2Fvue-router%E6%8C%82%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[原因 在新出的vue 2.0中文档，挂载实例 问题 在构建路由时，vue1.0 中应用map方法，而在2.0中取消了map方法，而快速的启用new router便可以建立。在vue1.0到vue2.0的迁移时，也带来了很多麻烦。 问题点 render: h =&gt; h(App) 路由挂载的正确姿势问题描述 vue1.0中的实例很方便实现，而2.0中的实例模板并不是很好使用。 vue1.0中vue-router写法、vue2.0中vue-router写法问题解决 vue2.0官网中： 1234567891011121314151617181920212223242526272829// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)// 1. 定义（路由）组件。// 可以从其他文件 import 进来const Foo = &#123; template: '&lt;div&gt;foo&lt;/div&gt;' &#125;const Bar = &#123; template: '&lt;div&gt;bar&lt;/div&gt;' &#125;// 2. 定义路由// 每个路由应该映射一个组件。 其中"component" 可以是// 通过 Vue.extend() 创建的组件构造器，// 或者，只是一个组件配置对象。// 我们晚点再讨论嵌套路由。const routes = [ &#123; path: '/foo', component: Foo &#125;, &#123; path: '/bar', component: Bar &#125;]// 3. 创建 router 实例，然后传 `routes` 配置// 你还可以传别的配置参数, 不过先这么简单着吧。const router = new VueRouter(&#123; routes // （缩写）相当于 routes: routes&#125;)// 4. 创建和挂载根实例。// 记得要通过 router 配置参数注入路由，// 从而让整个应用都有路由功能const app = new Vue(&#123; router&#125;).$mount('#app') 实际案例写法 123456789101112131415161718192021import Vue from 'vue';import VueRouter from 'vue-router';import App from './App';import goods from './components/goods/goods';Vue.use(VueRouter);//路由嵌套const router = new VueRouter(&#123; routes: [&#123; path: '/goods', component: goods &#125;]&#125;);new Vue(&#123; router, render: h =&gt; h(App) //关键点，官网中没加，这个相当于ES6的写法&#125;).$mount('#app');//默认去goodsrouter.push('goods');]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vowel Counts]]></title>
    <url>%2F2018%2F03%2F16%2Fvowel%20count%2F</url>
    <content type="text"><![CDATA[统计字符串中的特定字符的数量。主要是方法的优化: 1. 题目 Description: Return the number (count) of vowels in the given string. We will consider a, e, i, o, and u as vowels for this Kata. 2. 例子 测试数据 123456//Example test:describe(&quot;Case 1&quot;, function()&#123; it (&quot;should be defined&quot;, function()&#123; Test.assertEquals(getCount(&quot;abracadabra&quot;), 5) &#125;);&#125;); 3. 分析 第一眼就想到是可以从头依次查找的。能想到用c，java等都是利用for循环来处理。 其次，JS中想到的是字符串匹配，利用正则表达式对特定字符串遍历。然后输出匹配字符的length。 利用字符串的原型方法String.prototype.match(),语法str.match(regxp) 后面再总结一下，string类方法match(regex) 和 RegExp类方法exec(string) 4. 解题4.1 最优化：123function getCount(str) &#123; return (str.match(/[aeiou]/ig)||[]).length;&#125; 4.2 “多语言”解非常的直白啊，感觉都没有一点艺术。。123456789101112function getCount(str) &#123; var vowelsCount = 0; var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;]; for(var i=0; i&lt;str.length; i++)&#123; for(var j=0;j&lt;a.length; j++)&#123; if(a[j]===str[i])&#123; vowelsCount ++; &#125; &#125; &#125; return vowelsCount;&#125; 4.3 优化用indexof来减少for循环。12345678910function getCount(str) &#123; var vowelCount = 0; var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;]; for(var i=0;i&lt;str.length; i++)&#123; if((a.indexOf(str[i]))!==-1)&#123; vowelCount ++; &#125; &#125; return vowelCount;&#125; 总结match（regexp）和exec() 关于这两个的讨论，感觉说破天也没有MDN上说得好啊。:&gt;]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[undefined behavior in c]]></title>
    <url>%2F2018%2F03%2F16%2Fundefined%20behavior%20in%20c%2F</url>
    <content type="text"><![CDATA[undefined behavior（未定义行为） 思考一下下面这段代码的输出会是什么（答案在后面）？ 这段代码运行过程是怎样？ 1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define SQ(y) (y*y) //define 1 //#define SQ(y) ((y)*(y)) //define 2 int main() &#123; int i = 1; while(i &lt;= 5)&#123; printf("%-2d",SQ(i++)); &#125; return 0; &#125;----------/*-只试了两种编译器 *所用编译器：gcc * 用define 1 : 结果1 9 15 * 用define 2 ：结果1 9 15 *其他编辑器： * 用define 1 : 结果2 12 30 * 用define 2: 结果1 9 15 * 。。。。。 问题：为什么得到的结果不一样？ 看上面的对比，是因为编辑器的原因导致的?? 一开始某本书上的答案是2 12 30 ，我很纳闷，开头第一个数居然是2，于是一番折腾查阅了一下别人的看法。 我认为的原因是：undefined behavior 什么是：undefined behavior（未定义行为）呢？如下。 在计算机程序设计中，未定义行为（英语：undefined behavior) 是指行为不可预测的计算机代码。这是一些编程语言的一个特点，最有名的是在C语言中。在这些语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。……. 因此，这种未定义行为一般应被视为bug。—来源：中文维基百科 还有哪些undefined behavior（未定义行为） 偷懒：)。此处省略一些例子，因为wiki上都有一些典型例子。中文访问不了的话，英文在这，点我。 如何解释这段代码 输出1 9 15 ++ 其计算过程可能为：第一次循环时，i=1，i++=2，1 2 = 2， 再i++=3第二次循环时，i=3，i++=4，3 4 = 12，再i++=5第三次循环时，i=5，i++=5, 5 * 6 = 30，再i++=6//进入i&lt;=5判断,值为假，退出循环 输出2 12 30 ++ 其计算过程可能为：第一次循环时，首先i=1, 1 1 = 1，i++=2，再i++=3第二次循环时，首先i=3, 3 3 = 9，i++=4，再i++=5第三次循环时，首先i=5, 5 * 5 = 25, i++=6，再i++=7// i=7，所以退出循环。 首先i++是先运算，后加。对于SQ(i++)来说，其实质是((i++)*(i++))。在后加运算符是在整个运算完成之后，才进行加1操作的。 多问和讨论总是有好处的，继续保持：）参考：[1]C语言的代参宏定义，#define SQ(y) ((y)*(y))….输出应该是2 12 30才对啊？？[2]int i=5 ；printf(“%d”,i++,++i)；为什么输出6? [3]C语言中define的用法进阶（可不看）：关于宏定义的ppt]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell的正则表达式]]></title>
    <url>%2F2018%2F03%2F16%2Fshell%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[简介 正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据 正则表达式与通配符的区别1.正则表达式–匹配“文件”符合条件的字符串–&gt;&gt;包含匹配2.通配符—–匹配符合条件的“文件”名——–&gt;&gt;完全匹配3.为什么存在，通配符、正则表达式？ ls、find、cp（操作文件的一些命令）不支持正则表达式，只能用通配符。 grep、awk、sed（操作字符串的一些命令）支持正则表达式。 为什么所有的不都支持正则表达式？ 正则表达式 基础正则 元字符 作用 * 前一个字符匹配0次或任意多次 . 前一个字符匹配0次或任意多次 ^ 匹配行首，例：^he匹配以he开头的行 $ 匹配行尾，例：he$匹配以he为结尾的字符串 [ ] 匹配括号中指定的任意一个字符，只匹配一个 例：[a-z]匹配a-z中的任意一个字符，[0-9][a-z]表示“连续匹配” [^] 匹配除中括号字符外任意一个字符，例：^[0-9]匹配任意一位非数字的字符 \ 转义符，取消特殊字符的含义 \ { n\ } 表示前面字符恰好出现n次 \ { n,\ } 表示前面字符出现不小于n次 \ {n,m\ } 表示其前面字符至少出现n次 扩展正则 正则表达式（基础正则）“ * “ “*“星号——–不同于通配符中的匹配所有内容。 前一个字符匹配0次，或者任意多次。 a* - - 匹配所有内容，包括空白行。 aa* - - 匹配至少包含有一个a的行。 aaa* - -匹配至少包含两个连续的a的字符串。 “ . “ “.“——–和通配符中”?”类似。 匹配除了换行符外任意字符 s..d - - 匹配之间两个字符的单词。 s.*d - - 匹配之间的任意字符。 .* - - 匹配所有内容。“ ^ “、” $ “、” [] “、” [ ^ ] “ “^“、”$“、”[]“、”[^]“ ^ - - 匹配行首。 $ - - 匹配行尾。 [] - - 匹配括号中指定字符串中的任意字符，只匹配一个。 [^] - - 匹配除中括号的字符以外的任意一个字符。{n\ }、{n,\ }、{n,m\ } “\{n\}”、”\{n,\}“、”\{n,m\}“ \{n\} - - 例：a\{3\} 匹配a字母连续出现三次的字符串（连续四次以上也会被匹配到，所以在该匹配首尾加定界符能精确匹配到） \{n,\} - - 例：\{n,\} 前面字符出现不少于n次 \{n,m\} - - 例：sa\{1,3}i 匹配在字母s和字母i之间最少一个a，最多三个a]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>shell</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sass，惊叹]]></title>
    <url>%2F2018%2F03%2F16%2Fsass%E4%B8%8Ecss%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[css和sass的比较一个程序来说明sass和css3 这里配置sass不做介绍，请参考sass详细介绍和安装 对比 在这两个效果一样编译结果不一样的文件中你可以看到区别，sass对于程序化css起很大作用。 sass12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// n is number of stars required@function multiple-box-shadow ($n) $value: &apos;#&#123;random(2000)&#125;px #&#123;random(2000)&#125;px #FFF&apos; @for $i from 2 through $n $value: &apos;#&#123;$value&#125; , #&#123;random(2000)&#125;px #&#123;random(2000)&#125;px #FFF&apos; @return unquote($value)$shadows-small: multiple-box-shadow(700)$shadows-medium: multiple-box-shadow(200)$shadows-big: multiple-box-shadow(100)html height: 100% background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%) overflow: hidden #stars width: 1px height: 1px background: transparent box-shadow: $shadows-small animation : animStar 50s linear infinite &amp;:after content: &quot; &quot; position: absolute top: 2000px width: 1px height: 1px background: transparent box-shadow: $shadows-small #stars2 width: 2px height: 2px background: transparent box-shadow: $shadows-medium animation : animStar 100s linear infinite &amp;:after content: &quot; &quot; position: absolute top: 2000px width: 2px height: 2px background: transparent box-shadow: $shadows-medium #stars3 width: 3px height: 3px background: transparent box-shadow: $shadows-big animation : animStar 150s linear infinite &amp;:after content: &quot; &quot; position: absolute top: 2000px width: 3px height: 3px background: transparent box-shadow: $shadows-big#title position: absolute top: 50% left: 0 right: 0 color: #FFF text-align: center font-family: &apos;lato&apos;,sans-serif font-weight: 300 font-size: 50px letter-spacing: 10px margin-top: -60px padding-left: 10px span background: -webkit-linear-gradient(white, #38495a) -webkit-background-clip: text -webkit-text-fill-color: transparent @keyframes animStar from transform: translateY(0px) to transform: translateY(-2000px) css12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485html &#123; height: 100%; background: radial-gradient(ellipse at bottom, #1b2735 0%, #090a0f 100%); overflow: hidden;&#125;#stars &#123; width: 1px; height: 1px; background: transparent; box-shadow: 1747px 1720px #FFF , 1693px 439px #FFF , 699px 1744px #FFF , 180px 479px #FFF , 379px 729px #FFF , 1294px 910px #FFF , 479px 1860px #FFF , 270px 1211px #FFF , 252px 1651px #FFF , 472px 1251px #FFF , 1650px 235px #FFF , 311px 1770px #FFF , 1469px 984px #FFF , 1349px 1839px #FFF , 525px 958px #FFF , 753px 1748px #FFF , 753px 1299px #FFF , 530px 489px #FFF , 1574px 311px #FFF , 760px 76px #FFF , 774px 837px #FFF , 1505px 1499px #FFF , 18px 512px #FFF , 1587px 1312px #FFF , 1072px 753px #FFF , 911px 866px #FFF , 1217px 1280px #FFF , 226px 958px #FFF , 1021px 149px #FFF , 1129px 1781px #FFF , 976px 1354px #FFF , 12px 1248px #FFF , 1816px 1631px #FFF , 178px 1185px #FFF , 628px 962px #FFF , 1806px 315px #FFF , 667px 1436px #FFF , 1133px 1304px #FFF , 1539px 661px #FFF , 342px 148px #FFF , 138px 332px #FFF , 1928px 612px #FFF , 434px 970px #FFF , 577px 456px #FFF , 1132px 892px #FFF , 1880px 1680px #FFF , 1524px 268px #FFF , 1406px 1375px #FFF , 747px 726px #FFF , 1016px 523px #FFF , 1996px 1063px #FFF , 1128px 595px #FFF , 177px 1792px #FFF , 1430px 477px #FFF , 949px 334px #FFF , 486px 1949px #FFF , 1958px 170px #FFF , 1899px 1870px #FFF , 1105px 208px #FFF , 271px 719px #FFF , 822px 598px #FFF , 409px 1398px #FFF , 345px 607px #FFF , 160px 156px #FFF , 946px 522px #FFF , 1796px 1680px #FFF , 1896px 1125px #FFF , 1731px 1802px #FFF , 1147px 503px #FFF , 525px 1562px #FFF , 1791px 1266px #FFF , 1650px 312px #FFF , 102px 1586px #FFF , 1885px 1314px #FFF , 781px 1403px #FFF , 901px 1566px #FFF , 1934px 1761px #FFF , 767px 646px #FFF , 797px 1990px #FFF , 486px 889px #FFF , 1165px 1607px #FFF , 940px 1092px #FFF , 821px 957px #FFF , 1563px 1793px #FFF , 83px 498px #FFF , 1246px 492px #FFF , 80px 956px #FFF , 1137px 1795px #FFF , 1365px 1816px #FFF , 549px 1650px #FFF , 1645px 1758px #FFF , 244px 1543px #FFF , 1941px 325px #FFF , 1347px 1608px #FFF , 409px 433px #FFF , 1364px 552px #FFF , 264px 1839px #FFF , 1610px 581px #FFF , 1225px 1386px #FFF , 763px 1077px #FFF , 1442px 1362px #FFF , 1152px 794px #FFF , 191px 1980px #FFF , 1537px 281px #FFF , 819px 749px #FFF , 1906px 1489px #FFF , 529px 1711px #FFF , 272px 910px #FFF , 26px 768px #FFF , 1702px 1887px #FFF , 531px 1236px #FFF , 1911px 11px #FFF , 875px 544px #FFF , 1340px 443px #FFF , 350px 343px #FFF , 368px 1663px #FFF , 1761px 671px #FFF , 1246px 1936px #FFF , 1927px 1611px #FFF , 1630px 1003px #FFF , 1602px 722px #FFF , 544px 178px #FFF , 1680px 994px #FFF , 1466px 296px #FFF , 1192px 1239px #FFF , 1864px 1361px #FFF , 503px 153px #FFF , 1778px 1652px #FFF , 1830px 513px #FFF , 360px 236px #FFF , 357px 1252px #FFF , 127px 847px #FFF , 1729px 1178px #FFF , 237px 1815px #FFF , 608px 108px #FFF , 1869px 1657px #FFF , 1864px 664px #FFF , 108px 175px #FFF , 807px 851px #FFF , 1031px 645px #FFF , 1322px 16px #FFF , 285px 154px #FFF , 414px 404px #FFF , 1750px 385px #FFF , 450px 579px #FFF , 1515px 546px #FFF , 915px 1198px #FFF , 921px 1940px #FFF , 234px 80px #FFF , 1790px 1079px #FFF , 1270px 1768px #FFF , 1680px 587px #FFF , 612px 400px #FFF , 1150px 1336px #FFF , 568px 776px #FFF , 839px 1939px #FFF , 1565px 267px #FFF , 294px 1855px #FFF , 524px 364px #FFF , 734px 789px #FFF , 1979px 1049px #FFF , 1353px 410px #FFF , 1016px 438px #FFF , 255px 1707px #FFF , 1699px 580px #FFF , 1812px 1261px #FFF , 84px 481px #FFF , 921px 863px #FFF , 113px 228px #FFF , 980px 806px #FFF , 920px 845px #FFF , 1933px 623px #FFF , 1744px 1304px #FFF , 148px 40px #FFF , 1732px 1292px #FFF , 1487px 1736px #FFF , 1123px 189px #FFF , 555px 1290px #FFF , 1293px 1629px #FFF , 1034px 521px #FFF , 1573px 1332px #FFF , 1679px 1906px #FFF , 1834px 1062px #FFF , 802px 1374px #FFF , 863px 66px #FFF , 660px 1260px #FFF , 1714px 1012px #FFF , 1698px 964px #FFF , 260px 626px #FFF , 402px 1064px #FFF , 621px 1517px #FFF , 989px 822px #FFF , 751px 29px #FFF , 1342px 1655px #FFF , 1314px 389px #FFF , 807px 1137px #FFF , 1820px 831px #FFF , 394px 658px #FFF , 1234px 562px #FFF , 612px 1674px #FFF , 180px 836px #FFF , 1291px 506px #FFF , 1936px 480px #FFF , 970px 1767px #FFF , 1066px 1142px #FFF , 351px 1465px #FFF , 1446px 1909px #FFF , 254px 306px #FFF , 1969px 1642px #FFF , 269px 404px #FFF , 838px 98px #FFF , 1794px 1243px #FFF , 1030px 1033px #FFF , 962px 1694px #FFF , 284px 497px #FFF , 109px 1796px #FFF , 1897px 592px #FFF , 1108px 1186px #FFF , 1464px 990px #FFF , 329px 1595px #FFF , 1524px 1046px #FFF , 454px 280px #FFF , 248px 493px #FFF , 1778px 1145px #FFF , 865px 1223px #FFF , 1045px 57px #FFF , 777px 128px #FFF , 1929px 565px #FFF , 880px 1923px #FFF , 1555px 20px #FFF , 140px 400px #FFF , 214px 26px #FFF , 1986px 182px #FFF , 588px 659px #FFF , 531px 1025px #FFF , 1503px 448px #FFF , 1437px 816px #FFF , 171px 1652px #FFF , 416px 1692px #FFF , 21px 1457px #FFF , 135px 1158px #FFF , 828px 499px #FFF , 1748px 666px #FFF , 749px 549px #FFF , 320px 1241px #FFF , 1718px 624px #FFF , 287px 935px #FFF , 739px 397px #FFF , 1319px 1371px #FFF , 1257px 1186px #FFF , 46px 1278px #FFF , 1826px 1073px #FFF , 1530px 1720px #FFF , 1302px 548px #FFF , 1411px 550px #FFF , 700px 615px #FFF , 404px 1006px #FFF , 1119px 1467px #FFF , 1154px 1330px #FFF , 1585px 248px #FFF , 1080px 671px #FFF , 219px 1195px #FFF , 903px 584px #FFF , 711px 1244px #FFF , 730px 1427px #FFF , 1891px 1491px #FFF , 1936px 1196px #FFF , 1605px 140px #FFF , 384px 194px #FFF , 148px 394px #FFF , 837px 1028px #FFF , 1949px 1981px #FFF , 159px 1530px #FFF , 1763px 1244px #FFF , 713px 1187px #FFF , 1356px 766px #FFF , 387px 280px #FFF , 18px 240px #FFF , 42px 840px #FFF , 1178px 253px #FFF , 1075px 1392px #FFF , 1944px 1639px #FFF , 748px 178px #FFF , 1952px 1310px #FFF , 1918px 1612px #FFF , 557px 755px #FFF , 993px 1080px #FFF , 192px 1863px #FFF , 489px 1175px #FFF , 647px 105px #FFF , 498px 1477px #FFF , 1398px 1548px #FFF , 821px 980px #FFF , 1412px 347px #FFF , 291px 755px #FFF , 953px 232px #FFF , 681px 20px #FFF , 261px 391px #FFF , 256px 1048px #FFF , 876px 1530px #FFF , 1003px 1213px #FFF , 1626px 940px #FFF , 1778px 1974px #FFF , 767px 1944px #FFF , 721px 673px #FFF , 714px 394px #FFF , 1284px 629px #FFF , 1813px 1464px #FFF , 222px 465px #FFF , 544px 1980px #FFF , 935px 542px #FFF , 331px 1468px #FFF , 1173px 1095px #FFF , 29px 1107px #FFF , 1810px 715px #FFF , 479px 1476px #FFF , 1801px 1739px #FFF , 1989px 599px #FFF , 1656px 1744px #FFF , 1117px 1377px #FFF , 1757px 800px #FFF , 373px 1151px #FFF , 1001px 64px #FFF , 1828px 1355px #FFF , 1493px 1243px #FFF , 176px 497px #FFF , 683px 1634px #FFF , 1120px 659px #FFF , 648px 1643px #FFF , 1281px 347px #FFF , 105px 1309px #FFF , 77px 1335px #FFF , 667px 1892px #FFF , 868px 1783px #FFF , 319px 1180px #FFF , 860px 1263px #FFF , 447px 916px #FFF , 723px 402px #FFF , 875px 283px #FFF , 1330px 1083px #FFF , 1175px 819px #FFF , 667px 1469px #FFF , 680px 371px #FFF , 1357px 1235px #FFF , 1223px 1701px #FFF , 1452px 1322px #FFF , 32px 882px #FFF , 1545px 407px #FFF , 1924px 1404px #FFF , 1846px 1390px #FFF , 216px 1421px #FFF , 1421px 1584px #FFF , 1167px 1901px #FFF , 276px 1756px #FFF , 714px 1856px #FFF , 359px 1199px #FFF , 1143px 1080px #FFF , 891px 635px #FFF , 579px 230px #FFF , 570px 676px #FFF , 1156px 1764px #FFF , 944px 1652px #FFF , 301px 666px #FFF , 209px 1005px #FFF , 460px 677px #FFF , 186px 1260px #FFF , 849px 284px #FFF , 240px 1059px #FFF , 953px 1959px #FFF , 783px 328px #FFF , 1794px 128px #FFF , 1884px 1051px #FFF , 842px 758px #FFF , 1848px 318px #FFF , 852px 348px #FFF , 1242px 1496px #FFF , 441px 712px #FFF , 1039px 113px #FFF , 1994px 749px #FFF , 1777px 1596px #FFF , 1471px 1817px #FFF , 1482px 1668px #FFF , 1837px 522px #FFF , 1272px 1285px #FFF , 751px 1669px #FFF , 104px 1968px #FFF , 1570px 400px #FFF , 1225px 1879px #FFF , 885px 1156px #FFF , 1392px 121px #FFF , 1754px 1477px #FFF , 251px 1060px #FFF , 1701px 547px #FFF , 1847px 114px #FFF , 1733px 1932px #FFF , 1178px 873px #FFF , 553px 191px #FFF , 1974px 1659px #FFF , 1155px 612px #FFF , 1509px 1533px #FFF , 1936px 1148px #FFF , 1708px 224px #FFF , 1358px 1235px #FFF , 293px 608px #FFF , 424px 639px #FFF , 347px 1944px #FFF , 1813px 243px #FFF , 150px 1042px #FFF , 36px 1533px #FFF , 1215px 64px #FFF , 1393px 730px #FFF , 567px 1509px #FFF , 1209px 1055px #FFF , 1969px 718px #FFF , 1458px 42px #FFF , 1494px 817px #FFF , 1863px 1290px #FFF , 1508px 1194px #FFF , 1607px 906px #FFF , 1371px 997px #FFF , 573px 871px #FFF , 1625px 1930px #FFF , 1422px 1835px #FFF , 1400px 1990px #FFF , 467px 1695px #FFF , 911px 1526px #FFF , 1745px 766px #FFF , 1016px 1602px #FFF , 1940px 1154px #FFF , 1468px 1035px #FFF , 1298px 992px #FFF , 874px 1589px #FFF , 1288px 721px #FFF , 1611px 905px #FFF , 569px 1548px #FFF , 1536px 1526px #FFF , 1668px 1903px #FFF , 267px 1053px #FFF , 1403px 4px #FFF , 1722px 91px #FFF , 863px 1904px #FFF , 120px 1878px #FFF , 21px 47px #FFF , 1384px 718px #FFF , 1000px 1523px #FFF , 1019px 1768px #FFF , 811px 209px #FFF , 950px 1763px #FFF , 504px 1011px #FFF , 420px 1424px #FFF , 1606px 747px #FFF , 1073px 9px #FFF , 860px 1731px #FFF , 473px 990px #FFF , 922px 1704px #FFF , 371px 15px #FFF , 821px 1243px #FFF , 423px 1259px #FFF , 1974px 1100px #FFF , 183px 615px #FFF , 1430px 6px #FFF , 909px 296px #FFF , 449px 251px #FFF , 953px 155px #FFF , 824px 706px #FFF , 1097px 429px #FFF , 1104px 260px #FFF , 271px 1851px #FFF , 1224px 1554px #FFF , 521px 1040px #FFF , 160px 1852px #FFF , 1564px 1782px #FFF , 320px 1490px #FFF , 1536px 741px #FFF , 236px 214px #FFF , 878px 1068px #FFF , 1698px 1752px #FFF , 1844px 799px #FFF , 55px 673px #FFF , 690px 1503px #FFF , 869px 1066px #FFF , 840px 204px #FFF , 214px 863px #FFF , 1315px 960px #FFF , 370px 1418px #FFF , 990px 1869px #FFF , 1560px 1981px #FFF , 66px 1315px #FFF , 834px 1874px #FFF , 1946px 1621px #FFF , 1062px 379px #FFF , 1688px 1972px #FFF , 526px 876px #FFF , 1121px 1353px #FFF , 1963px 1242px #FFF , 1456px 1033px #FFF , 486px 1617px #FFF , 582px 1325px #FFF , 312px 182px #FFF , 1815px 1006px #FFF , 513px 1826px #FFF , 173px 398px #FFF , 1892px 432px #FFF , 374px 432px #FFF , 645px 735px #FFF , 156px 1706px #FFF , 1596px 729px #FFF , 1661px 845px #FFF , 831px 561px #FFF , 966px 1432px #FFF , 227px 387px #FFF , 1088px 1804px #FFF , 972px 594px #FFF , 367px 1189px #FFF , 1527px 1909px #FFF , 1240px 290px #FFF , 676px 1729px #FFF , 1182px 1631px #FFF , 200px 423px #FFF , 1511px 1083px #FFF , 378px 1487px #FFF , 1876px 613px #FFF , 432px 696px #FFF , 1472px 32px #FFF , 691px 1422px #FFF , 666px 67px #FFF , 1280px 333px #FFF , 35px 843px #FFF , 803px 384px #FFF , 1272px 359px #FFF , 1074px 397px #FFF , 1757px 100px #FFF , 1391px 360px #FFF , 1601px 1885px #FFF , 1277px 1009px #FFF , 1025px 626px #FFF , 1262px 1473px #FFF , 1179px 941px #FFF , 1630px 722px #FFF , 1318px 234px #FFF , 235px 1211px #FFF , 637px 1605px #FFF , 648px 138px #FFF , 718px 391px #FFF , 893px 1863px #FFF , 993px 359px #FFF , 656px 1583px #FFF , 1285px 12px #FFF , 762px 1806px #FFF , 1164px 1280px #FFF , 1528px 170px #FFF , 67px 82px #FFF , 214px 1047px #FFF , 1926px 1683px #FFF , 1701px 609px #FFF , 862px 1939px #FFF , 175px 364px #FFF , 976px 1183px #FFF , 1011px 100px #FFF , 1967px 1252px #FFF , 327px 77px #FFF , 1044px 681px #FFF , 801px 1912px #FFF , 1633px 1110px #FFF , 1691px 925px #FFF , 342px 148px #FFF , 619px 119px #FFF , 1717px 1051px #FFF , 923px 1804px #FFF , 1504px 1465px #FFF , 1027px 1205px #FFF , 1086px 1662px #FFF , 605px 763px #FFF , 978px 624px #FFF , 551px 1242px #FFF , 1248px 297px #FFF , 676px 1534px #FFF , 1713px 1868px #FFF , 1684px 915px #FFF , 1657px 952px #FFF , 168px 556px #FFF , 1573px 481px #FFF , 213px 1525px #FFF , 203px 780px #FFF , 1718px 265px #FFF , 23px 676px #FFF , 1367px 394px #FFF , 651px 1047px #FFF , 445px 1194px #FFF , 1483px 1439px #FFF , 1669px 1499px #FFF , 1499px 1596px #FFF , 222px 1154px #FFF , 1044px 918px #FFF , 642px 1615px #FFF , 1158px 847px #FFF , 1553px 1546px #FFF , 1527px 486px #FFF , 355px 1464px #FFF , 1991px 494px #FFF , 271px 1958px #FFF , 601px 543px #FFF , 1217px 1684px #FFF , 1150px 1526px #FFF , 1875px 1843px #FFF , 1857px 1106px #FFF , 1957px 1456px #FFF , 698px 558px #FFF , 1700px 1333px #FFF , 808px 965px #FFF , 1654px 407px #FFF , 1649px 547px #FFF , 1862px 946px #FFF , 38px 808px #FFF , 1254px 578px #FFF , 1991px 243px #FFF , 363px 76px #FFF , 111px 1093px #FFF , 1096px 1390px #FFF , 1449px 1545px #FFF , 210px 576px #FFF , 321px 718px #FFF , 1434px 662px #FFF , 140px 895px #FFF , 510px 330px #FFF , 589px 1522px #FFF , 720px 1862px #FFF , 138px 1195px #FFF , 819px 319px #FFF , 814px 1434px #FFF , 1440px 274px #FFF , 795px 607px #FFF , 1860px 1988px #FFF , 1085px 204px #FFF , 394px 1151px #FFF , 1247px 870px #FFF , 189px 1638px #FFF , 384px 1430px #FFF , 1914px 895px #FFF , 48px 1777px #FFF , 242px 1378px #FFF , 343px 470px #FFF , 893px 1464px #FFF , 1818px 354px #FFF , 1260px 166px #FFF , 960px 1561px #FFF , 1072px 1416px #FFF , 835px 213px #FFF , 643px 1197px #FFF , 1257px 1319px #FFF , 508px 835px #FFF , 1568px 901px #FFF , 619px 233px #FFF , 495px 716px #FFF , 551px 1869px #FFF , 1275px 1694px #FFF , 1676px 302px #FFF , 524px 300px #FFF , 802px 1436px #FFF , 520px 1347px #FFF , 511px 1722px #FFF , 1640px 1315px #FFF , 825px 886px #FFF , 795px 1081px #FFF , 1297px 672px #FFF , 413px 1087px #FFF , 330px 168px #FFF , 745px 1783px #FFF , 275px 1856px #FFF , 1312px 1284px #FFF , 582px 1939px #FFF , 1647px 1252px #FFF , 1856px 794px #FFF , 663px 1882px #FFF , 949px 956px #FFF , 1422px 1791px #FFF , 233px 52px #FFF , 139px 1133px #FFF , 1057px 1972px #FFF , 1602px 861px #FFF , 1402px 713px #FFF , 974px 862px #FFF , 1341px 1705px #FFF , 1987px 1598px #FFF , 221px 482px #FFF , 1080px 1117px #FFF , 1589px 34px #FFF , 852px 960px #FFF , 1939px 253px #FFF , 1349px 566px #FFF , 1363px 1296px #FFF , 136px 1080px #FFF , 606px 1376px #FFF , 609px 522px #FFF , 939px 633px #FFF , 852px 1967px #FFF , 1340px 1519px #FFF , 141px 1061px #FFF , 123px 1427px #FFF , 1075px 573px #FFF; animation: animStar 50s linear infinite;&#125;#stars:after &#123; content: " "; position: absolute; top: 2000px; width: 1px; height: 1px; background: transparent; box-shadow: 1747px 1720px #FFF , 1693px 439px #FFF , 699px 1744px #FFF , 180px 479px #FFF , 379px 729px #FFF , 1294px 910px #FFF , 479px 1860px #FFF , 270px 1211px #FFF , 252px 1651px #FFF , 472px 1251px #FFF , 1650px 235px #FFF , 311px 1770px #FFF , 1469px 984px #FFF , 1349px 1839px #FFF , 525px 958px #FFF , 753px 1748px #FFF , 753px 1299px #FFF , 530px 489px #FFF , 1574px 311px #FFF , 760px 76px #FFF , 774px 837px #FFF , 1505px 1499px #FFF , 18px 512px #FFF , 1587px 1312px #FFF , 1072px 753px #FFF , 911px 866px #FFF , 1217px 1280px #FFF , 226px 958px #FFF , 1021px 149px #FFF , 1129px 1781px #FFF , 976px 1354px #FFF , 12px 1248px #FFF , 1816px 1631px #FFF , 178px 1185px #FFF , 628px 962px #FFF , 1806px 315px #FFF , 667px 1436px #FFF , 1133px 1304px #FFF , 1539px 661px #FFF , 342px 148px #FFF , 138px 332px #FFF , 1928px 612px #FFF , 434px 970px #FFF , 577px 456px #FFF , 1132px 892px #FFF , 1880px 1680px #FFF , 1524px 268px #FFF , 1406px 1375px #FFF , 747px 726px #FFF , 1016px 523px #FFF , 1996px 1063px #FFF , 1128px 595px #FFF , 177px 1792px #FFF , 1430px 477px #FFF , 949px 334px #FFF , 486px 1949px #FFF , 1958px 170px #FFF , 1899px 1870px #FFF , 1105px 208px #FFF , 271px 719px #FFF , 822px 598px #FFF , 409px 1398px #FFF , 345px 607px #FFF , 160px 156px #FFF , 946px 522px #FFF , 1796px 1680px #FFF , 1896px 1125px #FFF , 1731px 1802px #FFF , 1147px 503px #FFF , 525px 1562px #FFF , 1791px 1266px #FFF , 1650px 312px #FFF , 102px 1586px #FFF , 1885px 1314px #FFF , 781px 1403px #FFF , 901px 1566px #FFF , 1934px 1761px #FFF , 767px 646px #FFF , 797px 1990px #FFF , 486px 889px #FFF , 1165px 1607px #FFF , 940px 1092px #FFF , 821px 957px #FFF , 1563px 1793px #FFF , 83px 498px #FFF , 1246px 492px #FFF , 80px 956px #FFF , 1137px 1795px #FFF , 1365px 1816px #FFF , 549px 1650px #FFF , 1645px 1758px #FFF , 244px 1543px #FFF , 1941px 325px #FFF , 1347px 1608px #FFF , 409px 433px #FFF , 1364px 552px #FFF , 264px 1839px #FFF , 1610px 581px #FFF , 1225px 1386px #FFF , 763px 1077px #FFF , 1442px 1362px #FFF , 1152px 794px #FFF , 191px 1980px #FFF , 1537px 281px #FFF , 819px 749px #FFF , 1906px 1489px #FFF , 529px 1711px #FFF , 272px 910px #FFF , 26px 768px #FFF , 1702px 1887px #FFF , 531px 1236px #FFF , 1911px 11px #FFF , 875px 544px #FFF , 1340px 443px #FFF , 350px 343px #FFF , 368px 1663px #FFF , 1761px 671px #FFF , 1246px 1936px #FFF , 1927px 1611px #FFF , 1630px 1003px #FFF , 1602px 722px #FFF , 544px 178px #FFF , 1680px 994px #FFF , 1466px 296px #FFF , 1192px 1239px #FFF , 1864px 1361px #FFF , 503px 153px #FFF , 1778px 1652px #FFF , 1830px 513px #FFF , 360px 236px #FFF , 357px 1252px #FFF , 127px 847px #FFF , 1729px 1178px #FFF , 237px 1815px #FFF , 608px 108px #FFF , 1869px 1657px #FFF , 1864px 664px #FFF , 108px 175px #FFF , 807px 851px #FFF , 1031px 645px #FFF , 1322px 16px #FFF , 285px 154px #FFF , 414px 404px #FFF , 1750px 385px #FFF , 450px 579px #FFF , 1515px 546px #FFF , 915px 1198px #FFF , 921px 1940px #FFF , 234px 80px #FFF , 1790px 1079px #FFF , 1270px 1768px #FFF , 1680px 587px #FFF , 612px 400px #FFF , 1150px 1336px #FFF , 568px 776px #FFF , 839px 1939px #FFF , 1565px 267px #FFF , 294px 1855px #FFF , 524px 364px #FFF , 734px 789px #FFF , 1979px 1049px #FFF , 1353px 410px #FFF , 1016px 438px #FFF , 255px 1707px #FFF , 1699px 580px #FFF , 1812px 1261px #FFF , 84px 481px #FFF , 921px 863px #FFF , 113px 228px #FFF , 980px 806px #FFF , 920px 845px #FFF , 1933px 623px #FFF , 1744px 1304px #FFF , 148px 40px #FFF , 1732px 1292px #FFF , 1487px 1736px #FFF , 1123px 189px #FFF , 555px 1290px #FFF , 1293px 1629px #FFF , 1034px 521px #FFF , 1573px 1332px #FFF , 1679px 1906px #FFF , 1834px 1062px #FFF , 802px 1374px #FFF , 863px 66px #FFF , 660px 1260px #FFF , 1714px 1012px #FFF , 1698px 964px #FFF , 260px 626px #FFF , 402px 1064px #FFF , 621px 1517px #FFF , 989px 822px #FFF , 751px 29px #FFF , 1342px 1655px #FFF , 1314px 389px #FFF , 807px 1137px #FFF , 1820px 831px #FFF , 394px 658px #FFF , 1234px 562px #FFF , 612px 1674px #FFF , 180px 836px #FFF , 1291px 506px #FFF , 1936px 480px #FFF , 970px 1767px #FFF , 1066px 1142px #FFF , 351px 1465px #FFF , 1446px 1909px #FFF , 254px 306px #FFF , 1969px 1642px #FFF , 269px 404px #FFF , 838px 98px #FFF , 1794px 1243px #FFF , 1030px 1033px #FFF , 962px 1694px #FFF , 284px 497px #FFF , 109px 1796px #FFF , 1897px 592px #FFF , 1108px 1186px #FFF , 1464px 990px #FFF , 329px 1595px #FFF , 1524px 1046px #FFF , 454px 280px #FFF , 248px 493px #FFF , 1778px 1145px #FFF , 865px 1223px #FFF , 1045px 57px #FFF , 777px 128px #FFF , 1929px 565px #FFF , 880px 1923px #FFF , 1555px 20px #FFF , 140px 400px #FFF , 214px 26px #FFF , 1986px 182px #FFF , 588px 659px #FFF , 531px 1025px #FFF , 1503px 448px #FFF , 1437px 816px #FFF , 171px 1652px #FFF , 416px 1692px #FFF , 21px 1457px #FFF , 135px 1158px #FFF , 828px 499px #FFF , 1748px 666px #FFF , 749px 549px #FFF , 320px 1241px #FFF , 1718px 624px #FFF , 287px 935px #FFF , 739px 397px #FFF , 1319px 1371px #FFF , 1257px 1186px #FFF , 46px 1278px #FFF , 1826px 1073px #FFF , 1530px 1720px #FFF , 1302px 548px #FFF , 1411px 550px #FFF , 700px 615px #FFF , 404px 1006px #FFF , 1119px 1467px #FFF , 1154px 1330px #FFF , 1585px 248px #FFF , 1080px 671px #FFF , 219px 1195px #FFF , 903px 584px #FFF , 711px 1244px #FFF , 730px 1427px #FFF , 1891px 1491px #FFF , 1936px 1196px #FFF , 1605px 140px #FFF , 384px 194px #FFF , 148px 394px #FFF , 837px 1028px #FFF , 1949px 1981px #FFF , 159px 1530px #FFF , 1763px 1244px #FFF , 713px 1187px #FFF , 1356px 766px #FFF , 387px 280px #FFF , 18px 240px #FFF , 42px 840px #FFF , 1178px 253px #FFF , 1075px 1392px #FFF , 1944px 1639px #FFF , 748px 178px #FFF , 1952px 1310px #FFF , 1918px 1612px #FFF , 557px 755px #FFF , 993px 1080px #FFF , 192px 1863px #FFF , 489px 1175px #FFF , 647px 105px #FFF , 498px 1477px #FFF , 1398px 1548px #FFF , 821px 980px #FFF , 1412px 347px #FFF , 291px 755px #FFF , 953px 232px #FFF , 681px 20px #FFF , 261px 391px #FFF , 256px 1048px #FFF , 876px 1530px #FFF , 1003px 1213px #FFF , 1626px 940px #FFF , 1778px 1974px #FFF , 767px 1944px #FFF , 721px 673px #FFF , 714px 394px #FFF , 1284px 629px #FFF , 1813px 1464px #FFF , 222px 465px #FFF , 544px 1980px #FFF , 935px 542px #FFF , 331px 1468px #FFF , 1173px 1095px #FFF , 29px 1107px #FFF , 1810px 715px #FFF , 479px 1476px #FFF , 1801px 1739px #FFF , 1989px 599px #FFF , 1656px 1744px #FFF , 1117px 1377px #FFF , 1757px 800px #FFF , 373px 1151px #FFF , 1001px 64px #FFF , 1828px 1355px #FFF , 1493px 1243px #FFF , 176px 497px #FFF , 683px 1634px #FFF , 1120px 659px #FFF , 648px 1643px #FFF , 1281px 347px #FFF , 105px 1309px #FFF , 77px 1335px #FFF , 667px 1892px #FFF , 868px 1783px #FFF , 319px 1180px #FFF , 860px 1263px #FFF , 447px 916px #FFF , 723px 402px #FFF , 875px 283px #FFF , 1330px 1083px #FFF , 1175px 819px #FFF , 667px 1469px #FFF , 680px 371px #FFF , 1357px 1235px #FFF , 1223px 1701px #FFF , 1452px 1322px #FFF , 32px 882px #FFF , 1545px 407px #FFF , 1924px 1404px #FFF , 1846px 1390px #FFF , 216px 1421px #FFF , 1421px 1584px #FFF , 1167px 1901px #FFF , 276px 1756px #FFF , 714px 1856px #FFF , 359px 1199px #FFF , 1143px 1080px #FFF , 891px 635px #FFF , 579px 230px #FFF , 570px 676px #FFF , 1156px 1764px #FFF , 944px 1652px #FFF , 301px 666px #FFF , 209px 1005px #FFF , 460px 677px #FFF , 186px 1260px #FFF , 849px 284px #FFF , 240px 1059px #FFF , 953px 1959px #FFF , 783px 328px #FFF , 1794px 128px #FFF , 1884px 1051px #FFF , 842px 758px #FFF , 1848px 318px #FFF , 852px 348px #FFF , 1242px 1496px #FFF , 441px 712px #FFF , 1039px 113px #FFF , 1994px 749px #FFF , 1777px 1596px #FFF , 1471px 1817px #FFF , 1482px 1668px #FFF , 1837px 522px #FFF , 1272px 1285px #FFF , 751px 1669px #FFF , 104px 1968px #FFF , 1570px 400px #FFF , 1225px 1879px #FFF , 885px 1156px #FFF , 1392px 121px #FFF , 1754px 1477px #FFF , 251px 1060px #FFF , 1701px 547px #FFF , 1847px 114px #FFF , 1733px 1932px #FFF , 1178px 873px #FFF , 553px 191px #FFF , 1974px 1659px #FFF , 1155px 612px #FFF , 1509px 1533px #FFF , 1936px 1148px #FFF , 1708px 224px #FFF , 1358px 1235px #FFF , 293px 608px #FFF , 424px 639px #FFF , 347px 1944px #FFF , 1813px 243px #FFF , 150px 1042px #FFF , 36px 1533px #FFF , 1215px 64px #FFF , 1393px 730px #FFF , 567px 1509px #FFF , 1209px 1055px #FFF , 1969px 718px #FFF , 1458px 42px #FFF , 1494px 817px #FFF , 1863px 1290px #FFF , 1508px 1194px #FFF , 1607px 906px #FFF , 1371px 997px #FFF , 573px 871px #FFF , 1625px 1930px #FFF , 1422px 1835px #FFF , 1400px 1990px #FFF , 467px 1695px #FFF , 911px 1526px #FFF , 1745px 766px #FFF , 1016px 1602px #FFF , 1940px 1154px #FFF , 1468px 1035px #FFF , 1298px 992px #FFF , 874px 1589px #FFF , 1288px 721px #FFF , 1611px 905px #FFF , 569px 1548px #FFF , 1536px 1526px #FFF , 1668px 1903px #FFF , 267px 1053px #FFF , 1403px 4px #FFF , 1722px 91px #FFF , 863px 1904px #FFF , 120px 1878px #FFF , 21px 47px #FFF , 1384px 718px #FFF , 1000px 1523px #FFF , 1019px 1768px #FFF , 811px 209px #FFF , 950px 1763px #FFF , 504px 1011px #FFF , 420px 1424px #FFF , 1606px 747px #FFF , 1073px 9px #FFF , 860px 1731px #FFF , 473px 990px #FFF , 922px 1704px #FFF , 371px 15px #FFF , 821px 1243px #FFF , 423px 1259px #FFF , 1974px 1100px #FFF , 183px 615px #FFF , 1430px 6px #FFF , 909px 296px #FFF , 449px 251px #FFF , 953px 155px #FFF , 824px 706px #FFF , 1097px 429px #FFF , 1104px 260px #FFF , 271px 1851px #FFF , 1224px 1554px #FFF , 521px 1040px #FFF , 160px 1852px #FFF , 1564px 1782px #FFF , 320px 1490px #FFF , 1536px 741px #FFF , 236px 214px #FFF , 878px 1068px #FFF , 1698px 1752px #FFF , 1844px 799px #FFF , 55px 673px #FFF , 690px 1503px #FFF , 869px 1066px #FFF , 840px 204px #FFF , 214px 863px #FFF , 1315px 960px #FFF , 370px 1418px #FFF , 990px 1869px #FFF , 1560px 1981px #FFF , 66px 1315px #FFF , 834px 1874px #FFF , 1946px 1621px #FFF , 1062px 379px #FFF , 1688px 1972px #FFF , 526px 876px #FFF , 1121px 1353px #FFF , 1963px 1242px #FFF , 1456px 1033px #FFF , 486px 1617px #FFF , 582px 1325px #FFF , 312px 182px #FFF , 1815px 1006px #FFF , 513px 1826px #FFF , 173px 398px #FFF , 1892px 432px #FFF , 374px 432px #FFF , 645px 735px #FFF , 156px 1706px #FFF , 1596px 729px #FFF , 1661px 845px #FFF , 831px 561px #FFF , 966px 1432px #FFF , 227px 387px #FFF , 1088px 1804px #FFF , 972px 594px #FFF , 367px 1189px #FFF , 1527px 1909px #FFF , 1240px 290px #FFF , 676px 1729px #FFF , 1182px 1631px #FFF , 200px 423px #FFF , 1511px 1083px #FFF , 378px 1487px #FFF , 1876px 613px #FFF , 432px 696px #FFF , 1472px 32px #FFF , 691px 1422px #FFF , 666px 67px #FFF , 1280px 333px #FFF , 35px 843px #FFF , 803px 384px #FFF , 1272px 359px #FFF , 1074px 397px #FFF , 1757px 100px #FFF , 1391px 360px #FFF , 1601px 1885px #FFF , 1277px 1009px #FFF , 1025px 626px #FFF , 1262px 1473px #FFF , 1179px 941px #FFF , 1630px 722px #FFF , 1318px 234px #FFF , 235px 1211px #FFF , 637px 1605px #FFF , 648px 138px #FFF , 718px 391px #FFF , 893px 1863px #FFF , 993px 359px #FFF , 656px 1583px #FFF , 1285px 12px #FFF , 762px 1806px #FFF , 1164px 1280px #FFF , 1528px 170px #FFF , 67px 82px #FFF , 214px 1047px #FFF , 1926px 1683px #FFF , 1701px 609px #FFF , 862px 1939px #FFF , 175px 364px #FFF , 976px 1183px #FFF , 1011px 100px #FFF , 1967px 1252px #FFF , 327px 77px #FFF , 1044px 681px #FFF , 801px 1912px #FFF , 1633px 1110px #FFF , 1691px 925px #FFF , 342px 148px #FFF , 619px 119px #FFF , 1717px 1051px #FFF , 923px 1804px #FFF , 1504px 1465px #FFF , 1027px 1205px #FFF , 1086px 1662px #FFF , 605px 763px #FFF , 978px 624px #FFF , 551px 1242px #FFF , 1248px 297px #FFF , 676px 1534px #FFF , 1713px 1868px #FFF , 1684px 915px #FFF , 1657px 952px #FFF , 168px 556px #FFF , 1573px 481px #FFF , 213px 1525px #FFF , 203px 780px #FFF , 1718px 265px #FFF , 23px 676px #FFF , 1367px 394px #FFF , 651px 1047px #FFF , 445px 1194px #FFF , 1483px 1439px #FFF , 1669px 1499px #FFF , 1499px 1596px #FFF , 222px 1154px #FFF , 1044px 918px #FFF , 642px 1615px #FFF , 1158px 847px #FFF , 1553px 1546px #FFF , 1527px 486px #FFF , 355px 1464px #FFF , 1991px 494px #FFF , 271px 1958px #FFF , 601px 543px #FFF , 1217px 1684px #FFF , 1150px 1526px #FFF , 1875px 1843px #FFF , 1857px 1106px #FFF , 1957px 1456px #FFF , 698px 558px #FFF , 1700px 1333px #FFF , 808px 965px #FFF , 1654px 407px #FFF , 1649px 547px #FFF , 1862px 946px #FFF , 38px 808px #FFF , 1254px 578px #FFF , 1991px 243px #FFF , 363px 76px #FFF , 111px 1093px #FFF , 1096px 1390px #FFF , 1449px 1545px #FFF , 210px 576px #FFF , 321px 718px #FFF , 1434px 662px #FFF , 140px 895px #FFF , 510px 330px #FFF , 589px 1522px #FFF , 720px 1862px #FFF , 138px 1195px #FFF , 819px 319px #FFF , 814px 1434px #FFF , 1440px 274px #FFF , 795px 607px #FFF , 1860px 1988px #FFF , 1085px 204px #FFF , 394px 1151px #FFF , 1247px 870px #FFF , 189px 1638px #FFF , 384px 1430px #FFF , 1914px 895px #FFF , 48px 1777px #FFF , 242px 1378px #FFF , 343px 470px #FFF , 893px 1464px #FFF , 1818px 354px #FFF , 1260px 166px #FFF , 960px 1561px #FFF , 1072px 1416px #FFF , 835px 213px #FFF , 643px 1197px #FFF , 1257px 1319px #FFF , 508px 835px #FFF , 1568px 901px #FFF , 619px 233px #FFF , 495px 716px #FFF , 551px 1869px #FFF , 1275px 1694px #FFF , 1676px 302px #FFF , 524px 300px #FFF , 802px 1436px #FFF , 520px 1347px #FFF , 511px 1722px #FFF , 1640px 1315px #FFF , 825px 886px #FFF , 795px 1081px #FFF , 1297px 672px #FFF , 413px 1087px #FFF , 330px 168px #FFF , 745px 1783px #FFF , 275px 1856px #FFF , 1312px 1284px #FFF , 582px 1939px #FFF , 1647px 1252px #FFF , 1856px 794px #FFF , 663px 1882px #FFF , 949px 956px #FFF , 1422px 1791px #FFF , 233px 52px #FFF , 139px 1133px #FFF , 1057px 1972px #FFF , 1602px 861px #FFF , 1402px 713px #FFF , 974px 862px #FFF , 1341px 1705px #FFF , 1987px 1598px #FFF , 221px 482px #FFF , 1080px 1117px #FFF , 1589px 34px #FFF , 852px 960px #FFF , 1939px 253px #FFF , 1349px 566px #FFF , 1363px 1296px #FFF , 136px 1080px #FFF , 606px 1376px #FFF , 609px 522px #FFF , 939px 633px #FFF , 852px 1967px #FFF , 1340px 1519px #FFF , 141px 1061px #FFF , 123px 1427px #FFF , 1075px 573px #FFF;&#125;#stars2 &#123; width: 2px; height: 2px; background: transparent; box-shadow: 1211px 1949px #FFF , 222px 1526px #FFF , 499px 819px #FFF , 237px 1431px #FFF , 1794px 1914px #FFF , 461px 702px #FFF , 116px 1817px #FFF , 194px 695px #FFF , 1666px 172px #FFF , 1224px 1424px #FFF , 1823px 1249px #FFF , 1193px 1555px #FFF , 1922px 1440px #FFF , 1932px 58px #FFF , 1624px 1396px #FFF , 1179px 73px #FFF , 761px 189px #FFF , 1596px 703px #FFF , 1624px 290px #FFF , 1184px 837px #FFF , 752px 1347px #FFF , 1939px 1147px #FFF , 970px 887px #FFF , 37px 516px #FFF , 976px 172px #FFF , 801px 1813px #FFF , 216px 1615px #FFF , 12px 1764px #FFF , 549px 1914px #FFF , 958px 1200px #FFF , 70px 888px #FFF , 1856px 1524px #FFF , 1061px 1809px #FFF , 1101px 1084px #FFF , 1322px 87px #FFF , 344px 367px #FFF , 1821px 22px #FFF , 1923px 817px #FFF , 1520px 848px #FFF , 751px 1032px #FFF , 1089px 169px #FFF , 376px 381px #FFF , 692px 991px #FFF , 1569px 120px #FFF , 467px 429px #FFF , 1582px 778px #FFF , 785px 977px #FFF , 1744px 1519px #FFF , 874px 777px #FFF , 88px 1174px #FFF , 613px 1715px #FFF , 939px 1942px #FFF , 547px 1002px #FFF , 1244px 1453px #FFF , 1359px 1344px #FFF , 372px 421px #FFF , 612px 1736px #FFF , 1978px 1952px #FFF , 1154px 1256px #FFF , 1714px 1518px #FFF , 685px 361px #FFF , 1098px 1371px #FFF , 1916px 152px #FFF , 917px 700px #FFF , 191px 1498px #FFF , 811px 657px #FFF , 108px 1616px #FFF , 764px 619px #FFF , 844px 1480px #FFF , 1819px 626px #FFF , 743px 7px #FFF , 1718px 743px #FFF , 1437px 428px #FFF , 1935px 1865px #FFF , 1312px 1781px #FFF , 19px 636px #FFF , 271px 1445px #FFF , 1610px 1600px #FFF , 1148px 1897px #FFF , 1656px 673px #FFF , 814px 1143px #FFF , 422px 61px #FFF , 1624px 414px #FFF , 561px 245px #FFF , 1569px 417px #FFF , 1141px 223px #FFF , 971px 285px #FFF , 1680px 1586px #FFF , 1077px 421px #FFF , 1949px 1009px #FFF , 552px 561px #FFF , 1378px 264px #FFF , 181px 1355px #FFF , 700px 1680px #FFF , 896px 1650px #FFF , 194px 1369px #FFF , 1123px 619px #FFF , 788px 797px #FFF , 768px 1942px #FFF , 1957px 1718px #FFF , 817px 1013px #FFF , 1278px 1152px #FFF , 578px 1312px #FFF , 1730px 528px #FFF , 71px 1821px #FFF , 262px 1969px #FFF , 309px 452px #FFF , 621px 957px #FFF , 479px 1902px #FFF , 714px 67px #FFF , 1157px 1374px #FFF , 692px 366px #FFF , 1835px 763px #FFF , 393px 1990px #FFF , 1650px 121px #FFF , 1653px 208px #FFF , 700px 102px #FFF , 411px 1511px #FFF , 782px 1390px #FFF , 1032px 810px #FFF , 171px 1714px #FFF , 1943px 466px #FFF , 463px 463px #FFF , 881px 1706px #FFF , 1486px 1841px #FFF , 993px 433px #FFF , 1676px 1211px #FFF , 419px 1767px #FFF , 1998px 517px #FFF , 1013px 406px #FFF , 1207px 1036px #FFF , 449px 1399px #FFF , 902px 1484px #FFF , 1105px 1930px #FFF , 1063px 1932px #FFF , 88px 934px #FFF , 909px 614px #FFF , 1725px 384px #FFF , 1768px 1711px #FFF , 737px 387px #FFF , 222px 437px #FFF , 734px 907px #FFF , 263px 1000px #FFF , 361px 1216px #FFF , 541px 387px #FFF , 1136px 1045px #FFF , 1420px 1341px #FFF , 639px 1267px #FFF , 1750px 1572px #FFF , 1646px 1822px #FFF , 1849px 1298px #FFF , 1276px 780px #FFF , 902px 1207px #FFF , 297px 587px #FFF , 31px 633px #FFF , 554px 1471px #FFF , 1909px 729px #FFF , 679px 200px #FFF , 1095px 788px #FFF , 657px 600px #FFF , 1265px 1387px #FFF , 982px 707px #FFF , 881px 1664px #FFF , 618px 832px #FFF , 140px 1975px #FFF , 94px 1734px #FFF , 566px 1536px #FFF , 1183px 1180px #FFF , 20px 260px #FFF , 305px 1605px #FFF , 1835px 884px #FFF , 1591px 1415px #FFF , 1785px 1975px #FFF , 905px 229px #FFF , 1115px 273px #FFF , 1800px 1292px #FFF , 1787px 1928px #FFF , 895px 1561px #FFF , 1584px 104px #FFF , 1480px 1291px #FFF , 1714px 1681px #FFF , 1300px 1111px #FFF , 258px 72px #FFF , 1523px 1830px #FFF , 1313px 920px #FFF , 819px 1540px #FFF , 656px 260px #FFF , 1732px 1529px #FFF , 792px 1084px #FFF , 84px 803px #FFF , 1128px 224px #FFF , 1669px 1888px #FFF , 626px 129px #FFF , 1244px 1781px #FFF , 1107px 427px #FFF , 73px 759px #FFF , 336px 330px #FFF , 664px 338px #FFF , 977px 170px #FFF , 492px 1615px #FFF; animation: animStar 100s linear infinite;&#125;#stars2:after &#123; content: " "; position: absolute; top: 2000px; width: 2px; height: 2px; background: transparent; box-shadow: 1211px 1949px #FFF , 222px 1526px #FFF , 499px 819px #FFF , 237px 1431px #FFF , 1794px 1914px #FFF , 461px 702px #FFF , 116px 1817px #FFF , 194px 695px #FFF , 1666px 172px #FFF , 1224px 1424px #FFF , 1823px 1249px #FFF , 1193px 1555px #FFF , 1922px 1440px #FFF , 1932px 58px #FFF , 1624px 1396px #FFF , 1179px 73px #FFF , 761px 189px #FFF , 1596px 703px #FFF , 1624px 290px #FFF , 1184px 837px #FFF , 752px 1347px #FFF , 1939px 1147px #FFF , 970px 887px #FFF , 37px 516px #FFF , 976px 172px #FFF , 801px 1813px #FFF , 216px 1615px #FFF , 12px 1764px #FFF , 549px 1914px #FFF , 958px 1200px #FFF , 70px 888px #FFF , 1856px 1524px #FFF , 1061px 1809px #FFF , 1101px 1084px #FFF , 1322px 87px #FFF , 344px 367px #FFF , 1821px 22px #FFF , 1923px 817px #FFF , 1520px 848px #FFF , 751px 1032px #FFF , 1089px 169px #FFF , 376px 381px #FFF , 692px 991px #FFF , 1569px 120px #FFF , 467px 429px #FFF , 1582px 778px #FFF , 785px 977px #FFF , 1744px 1519px #FFF , 874px 777px #FFF , 88px 1174px #FFF , 613px 1715px #FFF , 939px 1942px #FFF , 547px 1002px #FFF , 1244px 1453px #FFF , 1359px 1344px #FFF , 372px 421px #FFF , 612px 1736px #FFF , 1978px 1952px #FFF , 1154px 1256px #FFF , 1714px 1518px #FFF , 685px 361px #FFF , 1098px 1371px #FFF , 1916px 152px #FFF , 917px 700px #FFF , 191px 1498px #FFF , 811px 657px #FFF , 108px 1616px #FFF , 764px 619px #FFF , 844px 1480px #FFF , 1819px 626px #FFF , 743px 7px #FFF , 1718px 743px #FFF , 1437px 428px #FFF , 1935px 1865px #FFF , 1312px 1781px #FFF , 19px 636px #FFF , 271px 1445px #FFF , 1610px 1600px #FFF , 1148px 1897px #FFF , 1656px 673px #FFF , 814px 1143px #FFF , 422px 61px #FFF , 1624px 414px #FFF , 561px 245px #FFF , 1569px 417px #FFF , 1141px 223px #FFF , 971px 285px #FFF , 1680px 1586px #FFF , 1077px 421px #FFF , 1949px 1009px #FFF , 552px 561px #FFF , 1378px 264px #FFF , 181px 1355px #FFF , 700px 1680px #FFF , 896px 1650px #FFF , 194px 1369px #FFF , 1123px 619px #FFF , 788px 797px #FFF , 768px 1942px #FFF , 1957px 1718px #FFF , 817px 1013px #FFF , 1278px 1152px #FFF , 578px 1312px #FFF , 1730px 528px #FFF , 71px 1821px #FFF , 262px 1969px #FFF , 309px 452px #FFF , 621px 957px #FFF , 479px 1902px #FFF , 714px 67px #FFF , 1157px 1374px #FFF , 692px 366px #FFF , 1835px 763px #FFF , 393px 1990px #FFF , 1650px 121px #FFF , 1653px 208px #FFF , 700px 102px #FFF , 411px 1511px #FFF , 782px 1390px #FFF , 1032px 810px #FFF , 171px 1714px #FFF , 1943px 466px #FFF , 463px 463px #FFF , 881px 1706px #FFF , 1486px 1841px #FFF , 993px 433px #FFF , 1676px 1211px #FFF , 419px 1767px #FFF , 1998px 517px #FFF , 1013px 406px #FFF , 1207px 1036px #FFF , 449px 1399px #FFF , 902px 1484px #FFF , 1105px 1930px #FFF , 1063px 1932px #FFF , 88px 934px #FFF , 909px 614px #FFF , 1725px 384px #FFF , 1768px 1711px #FFF , 737px 387px #FFF , 222px 437px #FFF , 734px 907px #FFF , 263px 1000px #FFF , 361px 1216px #FFF , 541px 387px #FFF , 1136px 1045px #FFF , 1420px 1341px #FFF , 639px 1267px #FFF , 1750px 1572px #FFF , 1646px 1822px #FFF , 1849px 1298px #FFF , 1276px 780px #FFF , 902px 1207px #FFF , 297px 587px #FFF , 31px 633px #FFF , 554px 1471px #FFF , 1909px 729px #FFF , 679px 200px #FFF , 1095px 788px #FFF , 657px 600px #FFF , 1265px 1387px #FFF , 982px 707px #FFF , 881px 1664px #FFF , 618px 832px #FFF , 140px 1975px #FFF , 94px 1734px #FFF , 566px 1536px #FFF , 1183px 1180px #FFF , 20px 260px #FFF , 305px 1605px #FFF , 1835px 884px #FFF , 1591px 1415px #FFF , 1785px 1975px #FFF , 905px 229px #FFF , 1115px 273px #FFF , 1800px 1292px #FFF , 1787px 1928px #FFF , 895px 1561px #FFF , 1584px 104px #FFF , 1480px 1291px #FFF , 1714px 1681px #FFF , 1300px 1111px #FFF , 258px 72px #FFF , 1523px 1830px #FFF , 1313px 920px #FFF , 819px 1540px #FFF , 656px 260px #FFF , 1732px 1529px #FFF , 792px 1084px #FFF , 84px 803px #FFF , 1128px 224px #FFF , 1669px 1888px #FFF , 626px 129px #FFF , 1244px 1781px #FFF , 1107px 427px #FFF , 73px 759px #FFF , 336px 330px #FFF , 664px 338px #FFF , 977px 170px #FFF , 492px 1615px #FFF;&#125;#stars3 &#123; width: 3px; height: 3px; background: transparent; box-shadow: 411px 162px #FFF , 1021px 667px #FFF , 904px 1844px #FFF , 581px 324px #FFF , 749px 1163px #FFF , 1091px 956px #FFF , 719px 1247px #FFF , 1030px 1103px #FFF , 290px 334px #FFF , 469px 1616px #FFF , 115px 875px #FFF , 758px 1198px #FFF , 535px 909px #FFF , 422px 334px #FFF , 820px 1579px #FFF , 1012px 867px #FFF , 1444px 1107px #FFF , 1447px 1351px #FFF , 636px 4px #FFF , 658px 1783px #FFF , 1655px 327px #FFF , 376px 1821px #FFF , 1618px 1076px #FFF , 40px 1501px #FFF , 313px 195px #FFF , 939px 1364px #FFF , 887px 1154px #FFF , 1422px 101px #FFF , 236px 1543px #FFF , 139px 864px #FFF , 756px 453px #FFF , 1525px 1430px #FFF , 1341px 1094px #FFF , 662px 251px #FFF , 544px 745px #FFF , 987px 251px #FFF , 382px 262px #FFF , 1055px 1641px #FFF , 1169px 1034px #FFF , 1095px 1022px #FFF , 1514px 526px #FFF , 1958px 1908px #FFF , 18px 1925px #FFF , 1912px 1250px #FFF , 1598px 513px #FFF , 335px 246px #FFF , 1358px 1347px #FFF , 1771px 1283px #FFF , 872px 692px #FFF , 71px 1426px #FFF , 1679px 1685px #FFF , 543px 141px #FFF , 923px 459px #FFF , 564px 1110px #FFF , 9px 622px #FFF , 423px 1583px #FFF , 1571px 555px #FFF , 1502px 879px #FFF , 1994px 944px #FFF , 608px 1837px #FFF , 1289px 1905px #FFF , 1885px 1332px #FFF , 1854px 1432px #FFF , 1453px 1115px #FFF , 461px 1883px #FFF , 619px 213px #FFF , 121px 1647px #FFF , 797px 1523px #FFF , 1885px 1534px #FFF , 183px 1660px #FFF , 1036px 227px #FFF , 1699px 1099px #FFF , 383px 1610px #FFF , 1109px 1542px #FFF , 1273px 582px #FFF , 1256px 1030px #FFF , 1897px 513px #FFF , 1737px 742px #FFF , 908px 1480px #FFF , 1119px 1237px #FFF , 1293px 1197px #FFF , 752px 1668px #FFF , 484px 1513px #FFF , 560px 378px #FFF , 1561px 373px #FFF , 952px 1450px #FFF , 273px 759px #FFF , 1655px 284px #FFF , 1536px 1987px #FFF , 833px 1900px #FFF , 1269px 660px #FFF , 858px 1708px #FFF , 1863px 1595px #FFF , 1984px 1053px #FFF , 1659px 771px #FFF , 1228px 1997px #FFF , 1707px 185px #FFF , 1634px 1153px #FFF , 1942px 664px #FFF , 841px 1967px #FFF; animation: animStar 150s linear infinite;&#125;#stars3:after &#123; content: " "; position: absolute; top: 2000px; width: 3px; height: 3px; background: transparent; box-shadow: 411px 162px #FFF , 1021px 667px #FFF , 904px 1844px #FFF , 581px 324px #FFF , 749px 1163px #FFF , 1091px 956px #FFF , 719px 1247px #FFF , 1030px 1103px #FFF , 290px 334px #FFF , 469px 1616px #FFF , 115px 875px #FFF , 758px 1198px #FFF , 535px 909px #FFF , 422px 334px #FFF , 820px 1579px #FFF , 1012px 867px #FFF , 1444px 1107px #FFF , 1447px 1351px #FFF , 636px 4px #FFF , 658px 1783px #FFF , 1655px 327px #FFF , 376px 1821px #FFF , 1618px 1076px #FFF , 40px 1501px #FFF , 313px 195px #FFF , 939px 1364px #FFF , 887px 1154px #FFF , 1422px 101px #FFF , 236px 1543px #FFF , 139px 864px #FFF , 756px 453px #FFF , 1525px 1430px #FFF , 1341px 1094px #FFF , 662px 251px #FFF , 544px 745px #FFF , 987px 251px #FFF , 382px 262px #FFF , 1055px 1641px #FFF , 1169px 1034px #FFF , 1095px 1022px #FFF , 1514px 526px #FFF , 1958px 1908px #FFF , 18px 1925px #FFF , 1912px 1250px #FFF , 1598px 513px #FFF , 335px 246px #FFF , 1358px 1347px #FFF , 1771px 1283px #FFF , 872px 692px #FFF , 71px 1426px #FFF , 1679px 1685px #FFF , 543px 141px #FFF , 923px 459px #FFF , 564px 1110px #FFF , 9px 622px #FFF , 423px 1583px #FFF , 1571px 555px #FFF , 1502px 879px #FFF , 1994px 944px #FFF , 608px 1837px #FFF , 1289px 1905px #FFF , 1885px 1332px #FFF , 1854px 1432px #FFF , 1453px 1115px #FFF , 461px 1883px #FFF , 619px 213px #FFF , 121px 1647px #FFF , 797px 1523px #FFF , 1885px 1534px #FFF , 183px 1660px #FFF , 1036px 227px #FFF , 1699px 1099px #FFF , 383px 1610px #FFF , 1109px 1542px #FFF , 1273px 582px #FFF , 1256px 1030px #FFF , 1897px 513px #FFF , 1737px 742px #FFF , 908px 1480px #FFF , 1119px 1237px #FFF , 1293px 1197px #FFF , 752px 1668px #FFF , 484px 1513px #FFF , 560px 378px #FFF , 1561px 373px #FFF , 952px 1450px #FFF , 273px 759px #FFF , 1655px 284px #FFF , 1536px 1987px #FFF , 833px 1900px #FFF , 1269px 660px #FFF , 858px 1708px #FFF , 1863px 1595px #FFF , 1984px 1053px #FFF , 1659px 771px #FFF , 1228px 1997px #FFF , 1707px 185px #FFF , 1634px 1153px #FFF , 1942px 664px #FFF , 841px 1967px #FFF;&#125;#title &#123; position: absolute; top: 50%; left: 0; right: 0; color: #FFF; text-align: center; font-family: "lato", sans-serif; font-weight: 300; font-size: 50px; letter-spacing: 10px; margin-top: -60px; padding-left: 10px;&#125;#title span &#123; background: -webkit-linear-gradient(white, #38495a); -webkit-background-clip: text; -webkit-text-fill-color: transparent;&#125;@keyframes animStar &#123; from &#123; transform: translateY(0px); &#125; to &#123; transform: translateY(-2000px); &#125;&#125;]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj No.3062 Celebrity jeopardy]]></title>
    <url>%2F2018%2F03%2F16%2Fpoj%20No.3062%2F</url>
    <content type="text"><![CDATA[Celebrity jeopardy直接输出的数字 c12345678910#include&lt;stdio.h&gt; char c;int main()&#123; for(;~c;) &#123; c = getchar(); putchar(c); &#125; &#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>日志</tag>
        <tag>acm</tag>
        <tag>poj</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Steps]]></title>
    <url>%2F2018%2F03%2F16%2Fpoj%20No.2590%2F</url>
    <content type="text"><![CDATA[POj No.2590 Steps题目在数轴上的两点之间，按照下面规则移动。 每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差1。 每一步和最后一步的步幅必须是1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。 输入和输出测试数据个数n、开始地点x以及终点y（0&lt;=x&lt;=y&lt;2^31^),格式如下： nx~1~ y~1~x~2~ y~2~…x~n~ y~n~ 输入 345 4845 4945 50 输出 334 代码c12345678910111213141516171819#include&lt;stdio.h&gt;int main()&#123; int step, i,len; for(step=0;step&lt;20;++step)&#123; len=0; //求得一半为止的步数 // 步数是奇数就加1 int mid=step/2+step%2; //求出1+2+3+...到中间地点为止的合计 for(i=1;i&lt;=mid;++i) len+=i; //从中间地点开始计算...+3+2+1 for(i=step/2;i&gt;0;--i) len+=i; printf("%2d step(s)...%3d\n",step,len); &#125; &#125; 解决思路 画图找规律]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法小记]]></title>
    <url>%2F2018%2F03%2F16%2Fmarkdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[插入表格：1.1. 表格的上下需要空行。空行的多少至关重要 表格中文字居中 在划线部分的划线两端加上”:“ 比如”:—–: | :—-: 代码块:2.1. 合理利用代码块有意想不到的效果。]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[holygrail（圣杯布局）]]></title>
    <url>%2F2018%2F03%2F16%2Fholygrail%2F</url>
    <content type="text"><![CDATA[圣杯布局(holygrail)起源 三列。两列固定在两边，中间是一个 流体 圣杯布局的原理是? 简述实现圣杯布局的步骤。双飞翼布局和圣杯布局有什么异同负margin的用法 例子 一个简单的仿照例子实现圣杯布局 步骤 1. 建立框架12345678910&lt;body&gt;&lt;!--第一步 建立框架--&gt;&lt;div id=&quot;header&quot;&gt;&lt;h1&gt;#header&lt;/h1&gt;&lt;/div&gt;&lt;div id=&quot;container&quot;&gt; &lt;h1&gt;#container&lt;/h1&gt;&lt;/div&gt;&lt;div id=&quot;footer&quot;&gt;&lt;h1&gt;#footer&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt; 2. 加column float 让其在line。再清除footer 让它在最下面。添加背景颜色和边界便于观察。中间栏要放在前面以优先渲染。 123456789101112131415161718192021 &lt;style&gt;#container &#123; padding-left: 200px; padding-right:150px; &#125; #container .column &#123; float: left; &#125; #center &#123; width:100%; &#125; #left &#123; width:200px; &#125; #right &#123; width: 150px; &#125; #footer &#123; clear: both; &#125; &lt;/style&gt; 123456&lt;div id=&quot;container&quot;&gt; &lt;h1&gt;#container&lt;/h1&gt; &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is center&lt;/h1&gt;&lt;/div&gt; &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is left&lt;/h1&gt;&lt;/div&gt; &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is right&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt; 效果图2.1 3. 将左栏拉到相应位置 要让左栏和中间在一条直线上，先对左栏进行操作,分两步。margin-left:-100%跑到左上角（覆盖主栏目），再设置position:relative,right:200px或者left:-200px（不覆盖主栏目） 第一步 12345#left &#123; width:200px; margin-left: -100%; background-color: #555555;&#125; 效果图3.1 第二步用相对定位将左栏推开，加上相对定位标志之后，记得给左栏一个right:200px将左栏相对右边200px,往左推200px。 123456#left &#123; width:200px; margin-left: -100%; right:200px; background-color: #555555; &#125; 效果图3.2 . 4.将右栏加入line注意： 原作者这里用的是margin-right:-150px，在演示时并不能起效果。 12345#right &#123; width: 150px margin-right: -100%; background-color: #8cacea;&#125; 效果图4.1再处理一些小细节,固定的右边栏多出的字，撑开了 效果图4.25.结果 总结实现步骤1. div 框架搭建出来， div- &gt;container，header，footer 2. 加column， 设置float:left， 设置center宽度100% 清除footer浮动 3. 将左栏添到center左边， margin-left:-100%到左上（覆盖主栏目）， 再设置position:relative,right:200px或者left:-200px（不覆盖主栏目）4. 将右栏添右 margin-right: -100%; 圣杯布局和双飞翼布局异同 两种布局方式都是把主列放在文档流最前面，使主列优先加载 两者在实现上的相同点在于都让三列浮动，然后通过负外边距形成三列布局； 两种布局方式的不同在于如何处理中间主列的位置：圣杯布局是利用父容器的左右内边距定位；双飞翼布局是把主列嵌套在div后利用主列的左右外边距定位。 浮动元素上的负margin 给一个浮动元素加上相反方向的负margin，则会使行间距为0且内容重叠。 bug 修复 当浮动元素使用负margin时，在一些旧的浏览器中可能会出现问题。用position:float,能解决很多问题。 具体可以参考 负margin用法权威指南 flex实现的“标准”圣杯布局MDN 效果图其他 圣杯布局基本就是（适：自适应，左：左栏，右：右栏） 左适右 左右适 左适、右适 等等 圣杯布局还有很多的实现方法 纯浮动实现 flex实现可以参考，圣杯布局小结，觉得这位作者对圣杯布局总结的挺好，各种小例子。其他的也可以搜一下。我这里主要是介绍下圣杯布局。 圣杯布局类似 双飞翼布局 left和right覆盖了center的左右两边的内容。 center的外部再加一个div标签来包裹中间区块， 宽度为100%。然后再设置main的左右外边距，使它回到对应的位置。 参考In Search of the Holy Grail by Matthew Levine关于「圣杯布局」 by DotHide圣杯布局小结 by 流云诸葛圣杯布局和双飞翼布局 by betterwlfCSS之圣杯布局和双飞翼布局 by 宋菲负margin用法权威指南 by Airen的博客]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置hexo标签]]></title>
    <url>%2F2018%2F03%2F16%2Fhexo%E4%B8%AD%E7%9A%84tags%2F</url>
    <content type="text"><![CDATA[体会 hexo写作要求的格式非常的严格，连空格都不能省略。 英语不好是硬伤，tags标签在我配置的时候写成了tages！害 得我找了很久。总算是搭建完了很多的功能。]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git 仓库合并（实例）]]></title>
    <url>%2F2018%2F03%2F16%2Fgit-progress%2F</url>
    <content type="text"><![CDATA[最近想着整理一下github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地A仓库中clone B再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。 目的 合并两个库/提交记录 准备 本地环境Windows os ,所有均在命令git bash中操作 远程仓库 A,如图左，远程仓库B,如图右。 实践 clone 到本地git clone https://github.com/lmislm/Code_Repository.git 添加远程仓库 cd Code_Repository/ git remote add -f CSS_Ex git://github.com/lmislm/CSS_Ex.git 添加一个新的远程仓库，指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]： git merge --strategy ours --no-commit CSS_Ex/master 可能报错fatal: refusing to merge unrelated histories忽略就行。 ours 选项强制冲突由‘our’版本自动解决，即：来自其他分支树不会影响到我们这边映射到合并的结果。 即忽略冲突只保留Code_Repository文件树并且把 CSS_Ex的历史记录合并进来。 git remote -v 此命令将全部列出远程仓库。检查一下是否存在 git read-tree --prefix=css/ -u CSS_Ex/master --prefix=css/：这里Code_Repository/目录下有css/子目录 –prefix 用于指定文件树读取后保存的路径，相对于当前路径并且一定要追加 /–no-commit 的原因，该选项会在合并解析完成后中断，停留在最后的提交步骤之前。 git read-tree --prefix=css/ -u CSS_Ex/master -u 是说在读取后更新 index，使得 working tree 与 index 保持同步 git commit -m &quot;finish,迁移CSS_Ex到了Code_Repository/css/下&quot; git add . git commit -m &quot;迁移完成&quot; git push -u origin master 结果 后记 在操作完成之后确实实现了合并到同一个仓库，但是并没有预期的结果，没有完美的合并提交记录。多次操作之后，将一些零散的东西合并到了同一个仓库。但是原来的仓库还是存在的。如果将原来零散的仓库删除。可以看到结果中，a year ago，历史提交记录确实存在，但是其他flex_Ex显示的却是在进行这个合并操作时提交的时间。 参考 如何用 Git 合并两个库（合并历史记录，解决冲突／改写路径） Merging Git Repositories and Preserving History Git 基础 - 远程仓库的使用 MERGE STRATEGIES​ - ours git read-tree]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codewars_Replace With Alphabet Position]]></title>
    <url>%2F2018%2F03%2F16%2Fcodewars_Replace%20With%20Alphabet%20Position%2F</url>
    <content type="text"><![CDATA[题目这是一道字符串操作的题。题目如下： Welcome. In this kata you are required to, given a string, replace every letter with its position in the alphabet. If anything in the text isn’t a letter, ignore it and don’t return it. a being 1, b being 2, etc. As an example: 例子123alphabet_position(&quot;The sunset sets at twelve o&apos; clock.&quot;)Should return &quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11&quot; (As a string.) 分析首先肯定利用方法charCodeAt来处理字符，其次得转化下大小写，因为每个字符都是空格隔开，那么肯定用到split等来“切割”。思路大概就是我代码里头描述的，但是看最佳答案的时候，有相对另外的思路，大概意思差不多但是把处理的顺序调一下，会有意想不到的作用，也是佩服那些大牛们啊，具体怎么调整才可以→_→最优，聪明的你，可以想一想啊 :) 留个悬念。 解题1234567function alphabetPosition(text) &#123; return text.replace(/[^a-zA-Z]+/g,&apos;&apos;).toUpperCase().split(&apos;&apos;).map( function (eachStr) &#123; return eachStr.charCodeAt()-64; &#125;).join(&apos; &apos;);&#125;console.log(alphabetPosition(&apos;The testT&apos;)) 那么我看到目前为止最机智中票数最高的代码下面这个，可惜这些对我来说还是很晦涩啊。但是我想大概思路是差不多的。另外看到很多用for循环的，感觉太麻烦，虽然代码容易读，但是我想对于一个想学习JS的人来说，尽量用方法应该是好的。 12345let alphabetPosition = (text) =&gt; text .toUpperCase() .replace(/[^A-Z]/g, &apos;&apos;) .split(&apos;&apos;) .map(ch =&gt; ch.charCodeAt(0) - 64).join(&apos; &apos;); 实际运用看到js字符串转换为数字基本就用转换函数的比较多， js 字符串转换成数字常用的几种方法转换函数、强制类型转换、利用js变量弱类型转换。 转换函数parseInt(&quot;1234blue&quot;); // returns 1234 强制类型转换Boolean(&quot;hi&quot;); //true – non-empty string js变量弱类型转换var str = &#39;012.345 &#39;;var x = str - 0;x = x * 1; 查资料发现，关于类型转换的还是比较多，但是我并没有感觉其中的区别和用的地方，可能是实际运用接触不多。但是关于字符和数字之间的转换在Nodejs中也是有体现。因此，觉得codewars的题目质量还真的挺不错，至少对于我这种初学者来说。每一道题目后面可能都是作者精心挑选出来的。所以，加油吧。 参考 JavaScript权威指南(第6版)(中文版) JavaScript语言精粹(修订版) 中文版 MDN(Mozilla Developer Network) js字符串转换成数字]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>js</tag>
        <tag>codewars</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codewars-count_digits]]></title>
    <url>%2F2018%2F03%2F16%2Fcodewars%2F</url>
    <content type="text"><![CDATA[题目 Take an integer n (n &gt;= 0) and a digit d (0 &lt;= d &lt;= 9) as an integer. Square all numbers k (0 &lt;= k &lt;= n) between 0 and n.Count the numbers of digits d used in the writing of all the k 2. Call nb_dig (or nbDig or …) the function taking n and d as parameters and returning this count. 例子 n = 10, d = 1, the k * k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 We are using the digit 1 in 1, 16, 81, 100. The total count is then 4. nb_dig(25, 1): the numbers of interest are 1, 4, 9, 10, 11, 12, 13, 14, 19, 21 which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441 so there are 11 digits 1 for the squares of numbers between 0 and 25. 分析 给出n和d，求0到n中间的平方，再求这些平方的平方，问所得的这些数中包含多少个数字d。大概就是先算出这些数字的平方，然后挨个分解求出其中的值。解题1234567function nbDig(n,d) &#123; var s = &apos;&apos;; for(var i=0;i&lt;=n;i++)&#123; s += Math.pow(i,2); &#125; return s.split(d).length-1&#125; 牢骚篇今天，进了个群，挺多厉害的人，还私聊了一个有很多offer的同学。顿时觉得，自己就是渣渣啊，一点信心都没有。还是得加油吧，要学的东西还很多啊。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codewars ooxx =>true]]></title>
    <url>%2F2018%2F03%2F16%2Fcodewars-ooxx%2F</url>
    <content type="text"><![CDATA[前言第二关 Yeah！目标6kyu，坚持升级~ ：） 这一关，考察几个基本方法的使用，虽然单独拿出来可能难度不大，但是真正运用在工作中的时候，这些方法可能如大海捞针，不熟练是一时半会儿想不出来的。 话不多说，呀呀呀，提枪上阵， 题目描述Check to see if a string has the same amount of ‘x’s and ‘o’s. The method must return a boolean and be case insensitive. The string can contains any char.（0.0看不懂？往下戳） 例子12345XO(&quot;ooxx&quot;) =&gt; trueXO(&quot;xooxx&quot;) =&gt; falseXO(&quot;ooxXm&quot;) =&gt; trueXO(&quot;zpzpzpp&quot;) =&gt; true // when no &apos;x&apos; and &apos;o&apos; is present should return trueXO(&quot;zzoo&quot;) =&gt; false 分析题目大概意思就是： 在有限任意字符串中字符 x 和 o 存在且数量相等时 值为 true,否则当x和o不存在时，值为flase。匹配的话，首先想到正则表达式来处理。 方法一利用RegExp来匹配正则，然后再判断数量为空和数量是否相等。 12345678910111213141516function xo(str) &#123; var numX = new RegExp(/x/gi); //g 全局搜索，i 忽略大小写 var numO = new RegExp(/o/gi); if(numX.test(str)&amp;&amp;numO.test(str))&#123; if(str.match(/x/gi).length == str.match(/o/gi).length)&#123; return true; &#125;else&#123; return false; &#125; &#125;else&#123; return false; &#125;&#125;console.log(xo(&apos;xxoo&apos;))console.log(xo(&apos;glld&apos;)) 仔细一看，这种写法太麻烦。如何轻松取敌呢？ 方法二直接返回一个return，并在return中判断。123456function xo(str) &#123; var numX = str.match(/x/gi) || []; var numO = str.match(/x/gi) || []; return numO.length == numX.length;&#125; 解析方法一方法二 什么鬼！这不同的方法有什么区别呢？？我来试着剖析下这两种方法究竟是何利器。来看看MDN是怎么说的？贴心的MDN还在match这一篇中对两者进行了比较。 1. RegExp 构造函数创建了一个正则表达式对象，用于将文本与模式匹配。2.当一个字符串与一个正则表达式匹配时， match()方法检索匹配项。 比较 如果正则表达式没有 g 标志，则 str.match() 会返回和 RegExp.exec() 相同的结果。而且返回的 Array 拥有一个额外的 input 属性，该属性包含被解析的原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在原字符串中的索引（以0开始）。 用法 如果你需要知道一个字符串是否匹配一个正则表达式 RegExp ，可使用 search() 。如果你只是需要第一个匹配结果，你可能想要使用 RegExp.exec() 。如果你想要获得捕获组，并且设置了全局标志，你需要用 RegExp.exec() 。 综上：大概就是这么吧~不用鸟我了，直接看文档吧~ 方法三方法三是在解答完之后查看他人的方法，大神们就是大神。对于各种用法如数家珍，信手拈来。 1234let x = str.match(/x/gi); let o = str.match(/o/gi);return (x &amp;&amp; x.length) === (o &amp;&amp; o.length);&#125; 实际运用 这个keyword变量该如何转义呢？ 123function addHightLight(txt,keyword) &#123; return txt.replace(/+keyword+/g,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);&#125; 答案是： 1234567function addHightLight(txt,keyword) &#123; txt = &quot;咖啡&quot; ;keyword = &quot;机器&quot;; var va = new RegExp(keyword,&quot;g&quot;); va = /\/咖啡\/g/&#123;lastIndex:0&#125; return txt.replace(va,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);&#125; 就到这里了~]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codewars - - accm]]></title>
    <url>%2F2018%2F03%2F16%2Fcodewars-accm%2F</url>
    <content type="text"><![CDATA[前言 最近在找实习啊，希望暑假有份合适的工作来填充暑假。就刷codewars。我比较懒所以更新的可能比较慢。。 题目描述 This time no story, no theory. The examples below show you how to write function accum:示例 123accum(&quot;abcd&quot;); // &quot;A-Bb-Ccc-Dddd&quot; accum(&quot;RqaEzty&quot;); // &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot; accum(&quot;cwAt&quot;); // &quot;C-Ww-Aaa-Tttt&quot; 分析 大概意思就是递增的方式来重复每个字符再用依次拼接在一块儿，确定用join()来拼接，用map方法来迭代，再把首字母转为大写，其余为小写具体方法如下 解一 参考方法而之后发现这个并没有完全利用js中语法的特性，感觉在js学习中不可取12345678910111213function accm(s)&#123; s = s.toUpperCase().split(""); for(var i=0,l=s.length; i&lt;l; i++) &#123; var tmp = s[i].toLowerCase(); for(var j=0; j&lt;i; j++)&#123; s[i] += tmp; &#125; &#125; return s.join("-");&#125; 解决二1234function accm(s)&#123;//分割。再map方法查询，再转换大小写 return s.split(&apos;&apos;).map( (x,index) =&gt; x.toUpperCase() + Array(index+1).join(x.toLowerCase())).join(&apos;-&apos;);&#125; 解决三 在方法一上，进行简化，但是没有方法二更简单 1234567891011function accum(s)&#123; var letter = s.split(&apos;&apos;); var result = []; for(var i=0;i&lt;letter.length;i++)&#123; result.push(letter[i].toUpperCase()+Array(i+1).join(letter[i].toLowerCase())); &#125; return result.join(&apos;_&apos;);&#125;//输出accum(&apos;fds&apos;)F_Dd_Sss 总结在平时的学习中能多用到所学知识是最好的，如果混合方法写，不利于学习。]]></content>
      <categories>
        <category>工作</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[question-check]]></title>
    <url>%2F2018%2F03%2F16%2Fcheck-question%2F</url>
    <content type="text"><![CDATA[质量反馈调查展示界面 编辑 管理 答题 统计数据 题库]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>展示</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[acm基础--POJ No.1003 Hangover]]></title>
    <url>%2F2018%2F03%2F16%2Facm00%2F</url>
    <content type="text"><![CDATA[关于运算符号的思考（acm热身）POJ No.1003 Hangover input：1.003.71output：3 card(s)61 card(s) c12345678910111213#include&lt;stdio.h&gt;main()&#123; int n; float a,b; while(scanf("%f",&amp;b)==1) &#123; if(b==0.0)break; a=0.0; for(n=1;a&lt;b;++n) a+=1.0/(float)(n+1); printf("%d" card(s) \n",n-1); &#125;&#125; 逗号运算符号 while(scanf(“%f”,&amp;b)==1)compare towhile(scanf(“%f”,&amp;b),b)结束条件等价于b!=0即使b的值为0.000001f,0.00001f!=0为真，也不会结束循环。所以写法(*，b）非常重要 强制类型转换 直接用(float)转换为int类型，简单点就写成for(n=1;al；) 减少变量 省略int类型将n写入main（），但是有的编译器并不能通过。所以为了简单清晰，还是不要用的好。 尽量多用for循环直接缩成一行1234567其中包含n省略在mainmain(n)&#123;float b;for(;scanf(&quot;%f&quot;,&amp;b),b;printf(&quot;%d card(s)\n&quot;,n-1)) for(n=1;b&gt;0;)b-=1./++n;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>日志</tag>
        <tag>acm poj</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Don't rely on luck.]]></title>
    <url>%2F2018%2F03%2F16%2FMath.random%2F</url>
    <content type="text"><![CDATA[题目在codewars上碰到一道奇怪的题目。猜随机数。难度6kyu，题干比以往简单。这就让人捉急了。什么都看不出来。接下来看题 The test fixture I use for this kata is pre-populated.It will compare your guess to a random number generated in Ruby by: (Kernel::rand() * 100 + 1).floorIn Javascript/CoffeeScript by: Math.floor(Math.random() * 100 + 1)In Python by:randint(1,100)You can pass by relying on luck or skill but try not to rely on luck. “The power to define the situation is the ultimate power.” - Jerry Rubin Good luck! 例子这里，题目给出的测试是： Example Test:var lucky_number = Math.floor(Math.random() * 100 + 1);Test.assertEquals(guess, lucky_number, &quot;Sorry. Unlucky this time.&quot;); 分析看到题目的时候，- - 就这么点? 然后 0.0 ，睁大眼睛看，然后 = =，这什么鬼，+.+，直接Math.random()?, @.@ 那怎么相等呢。？.?搜了下 9.9 ，发现只有Ruby的答案。 再查了下随机数。 随机数分为 伪随机数 和 真随机数 正常电脑各种语言中使用的都是 伪随机数 ，是由可确定的函数，通过种子（常用时钟），产生伪随机数，这种数字理论上存在可预测性。 函数 :计算机产生随机数的方法有：线性同余方法(大部分采用,，即 Rand_Number = (Rand_Seed * X + Y) mod Z 那个RandSeed就是「种子」一般取时钟周期，也就是GetTickCount()。），平方取中法，M-sequence，梅森旋转算法，还有MT随机数算法。 ps:这里不对 随机数的产生和随机数的计算理论做深究。具体可以看这里，各答案较完整讲了计算机产生的是伪随机数，还有产生 真随机数 的可行性。 那么JavaScript中的随机数是个什么样的存在？答案当然是伪随机数。= = JavaScript中并没有类似上面底层语言提供的函数,根据panxiwu博客中的说法，c和Ruby都有底层重置seed方法依据不同的方法来生成种子。而，JavaScript应该是依靠引擎使用随机函数方法，所以在安全方面，不用Math.random最好，替代的可以使用window.crypto.getRandomValues(array); MDN：Math.random() does not provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the window.crypto.getRandomValues() method. V8引擎中实现 随机数：通过Mathlmmul来创造，并没有所谓的seed参数，所以只能重写。 1234567891011// ECMA 262 - 15.8.2.14 var rngstate; // Initialized to a Uint32Array during genesis.function MathRandom() &#123; var r0 = (MathImul(18030, rngstate[0] &amp; 0xFFFF) + (rngstate[0] &gt;&gt;&gt; 16)) | 0; rngstate[0] = r0; var r1 = (MathImul(36969, rngstate[1] &amp; 0xFFFF) + (rngstate[1] &gt;&gt;&gt; 16)) | 0; rngstate[1] = r1; var x = ((r0 &lt;&lt; 16) + (r1 &amp; 0xFFFF)) | 0;// Division by 0x100000000 through multiplication by reciprocal. return (x &lt; 0 ? (x + 0x100000000) : x) * 2.3283064365386962890625e-10; &#125;// Non-standard extension.function MathImul(x, y) &#123; return %NumberImul(TO_NUMBER_INLINE(x), TO_NUMBER_INLINE(y)); &#125; from v8 解题 12var guess = 10Math.floor = function(num) &#123;return guess;&#125; Accept!然后看到一堆不可描述的东西。lol 这个…….. 12var guess = 10;lucky_number = 10; 还有这个 123Math.random=()=&gt;&quot;:D&quot;Math.floor=x=&gt;(x+&apos;&apos;).replace(/N/g,&apos;L&apos;).replace(/a/g,&quot;0&quot;)var guess = &quot;L0L&quot; 不少都是写死了random的值然后钻牛角尖的。。还有令人搞笑的，可以拿来当笑话集了，这题： 12345var guess = &quot;What a stupid kata.&quot;;Math.floor = function() &#123; return &quot;What a stupid kata.&quot;;&#125; 还有这个，，厉害了。。。 实际运用 比如我们在开发京东的H5活动页面的小游戏时，可能需要随机产生一些背景、随机掉落道具、小怪物；当用户中途退出(微信不小心右滑，一定有不少人被这个恶心到[当然现在已经优化])，当用户重新打开小游戏时，用户整体进度、积分我们可以很容易记录到本地或者存储到微信ID建立的存储机制中从而得以恢复，但是随机产生的场景、随机掉落道具、小怪物等并不是那么容易存储恢复，重新获取场景、小怪物那未免用户体验太差！！！把画布上的所有物件、怪物属性全部存储下来更是没有必要。此时我们就可以利用我们重写的Math.random()(此时可不重写内置方法，可另起别名)。只要我们保存下来一个随机数seed值，利用seed值来恢复所有的场景就好了。from 潘信伍 ,谢谢大神啊 参考悟道集JavaScript中Math.random的种子设定方法]]></content>
      <categories>
        <category>工作</category>
        <category>codewars</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深度优先算法-部分和问题]]></title>
    <url>%2F2018%2F03%2F16%2FDFS-%E9%83%A8%E5%88%86%E5%92%8C%2F</url>
    <content type="text"><![CDATA[题目给定整数a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为k。 限制条件 1≤ n ≤20 -10^8^ ≤ a~i~ ≤ 10^8^ -10^8^ ≤ k ≤ 10^8^输入 n=4 a={1,2,4,7} k=13输出yes （13 = 2 + 4 + 7） 分析利用最简单的递归，可以先画出深度优先的树代码c++123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;using namespace std;const int MAXNUM = 20;// 输入 int arr[MAXNUM];int n, k;void input_data(int *n, int *k, int *arr)&#123; cout &lt;&lt; "n = "; cin &gt;&gt; *n; cout &lt;&lt; "a = &#123;"; for (int i = 0; i &lt; *n; i++)&#123; cin &gt;&gt; arr[i]; cin.get(); cin.get(); &#125; cout &lt;&lt; "k = "; cin &gt;&gt; *k;&#125; //已经从前n项得到了和sum，然后对于i项之后的分支 bool dfs(int i, int sum)&#123; // 如果前n项都计算过了，则返回sum是否与k相等 if (i == n) return sum == k;// 不加上a[i]的情况 if (dfs(i+1, sum)) return true;// 加上a[i]的情况 if (dfs(i+1, sum+arr[i])) return true;// 无论是否加上a[i],都不能凑成k就返回false return false;&#125; void solve()&#123; if (dfs(0, 0)) cout &lt;&lt; "Yes" &lt;&lt; endl; else cout &lt;&lt; "No" &lt;&lt; endl; &#125; int main()&#123; input_data(&amp;n, &amp;k, arr); solve(); return 0;&#125;]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>oj</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[try build]]></title>
    <url>%2F2016%2F10%2F31%2Ftry-build%2F</url>
    <content type="text"><![CDATA[感冒 感冒了，好难受啊，一直咳嗽。 生病的时候总能让我思考一些身边的事情。]]></content>
      <categories>
        <category>日记</category>
      </categories>
  </entry>
</search>
