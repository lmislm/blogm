<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>day161-统计数组中所有对象相同属性值的总和，（假设值为整数）</title>
      <link href="/2019/06/23/2019-06-23/"/>
      <url>/2019/06/23/2019-06-23/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="string">'1.pdf'</span>, <span class="attr">z</span>: <span class="number">2</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="string">'2.pdf'</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="string">'3.pdf'</span>, <span class="attr">z</span>: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">x</span>: <span class="number">6</span>, <span class="attr">y</span>: <span class="string">'01.pdf2.pdf3.pdf'</span>, <span class="attr">z</span>: <span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumObjectsSameKey</span>(<span class="params">...objs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objs.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">        acc[k] = (acc[k] || <span class="number">0</span>) + obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumObjectsSameKey(...arr))</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties" target="_blank" rel="noopener">https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day160-vuejs-CreateElement-children 的规范化</title>
      <link href="/2019/06/22/2019-06-22/"/>
      <url>/2019/06/22/2019-06-22/</url>
      
        <content type="html"><![CDATA[<h3 id="children-的规范化"><a href="#children-的规范化" class="headerlink" title="children 的规范化"></a>children 的规范化</h3><p><code>_createElement</code> 接收的第 4 个参数 children 是任意类型的,所以要规范化。<br>代码目录：&lt;src/core/vdom/helpers/normalzie-children.js&gt;<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The template compiler attempts to minimize the need for normalization by</span></span><br><span class="line"><span class="comment">// statically analyzing the template at compile time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For plain HTML markup, normalization can be completely skipped because the</span></span><br><span class="line"><span class="comment">// generated render function is guaranteed to return Array&lt;VNode&gt;. There are</span></span><br><span class="line"><span class="comment">// two cases where extra normalization is needed:</span></span><br><span class="line"><span class="comment">/* 注：functional component 函数式组件返回的是一个数组而不是一个根节点 */</span></span><br><span class="line"><span class="comment">/* 场景1 */</span></span><br><span class="line"><span class="comment">// 1. When the children contains components - because a functional component</span></span><br><span class="line"><span class="comment">// may return an Array instead of a single root. In this case, just a simple</span></span><br><span class="line"><span class="comment">// normalization is needed - if any child is an Array, we flatten the whole</span></span><br><span class="line"><span class="comment">// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep</span></span><br><span class="line"><span class="comment">// because functional components already normalize their own children.</span></span><br><span class="line"><span class="comment">/*该方法调用场景是 render 函数是编译生成的*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleNormalizeChildren</span> (<span class="params">children: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children[i])) &#123;</span><br><span class="line">      <span class="comment">/* 注：flatten 整个 Array&lt;VNode&gt; */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 场景2 */</span></span><br><span class="line"><span class="comment">// 2. When the children contains constructs that always generated nested Arrays（注：嵌套数组）,</span></span><br><span class="line"><span class="comment">// e.g. &lt;template&gt;, &lt;slot&gt;, v-for, or when the children is provided by user</span></span><br><span class="line"><span class="comment">// with hand-written render functions / JSX. In such cases a full normalization</span></span><br><span class="line"><span class="comment">// is needed to cater to all possible types of children values.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeChildren</span> (<span class="params">children: any</span>): ?<span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPrimitive(children)</span><br><span class="line">    ? [createTextVNode(children)]</span><br><span class="line">    : <span class="built_in">Array</span>.isArray(children)</span><br><span class="line">      ? normalizeArrayChildren(children)</span><br><span class="line">      : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day159-__.range</title>
      <link href="/2019/06/21/2019-06-21/"/>
      <url>/2019/06/21/2019-06-21/</url>
      
        <content type="html"><![CDATA[<h3 id="求区间内所有连续数"><a href="#求区间内所有连续数" class="headerlink" title="求区间内所有连续数"></a>求区间内所有连续数</h3><p>给出整数区间和步长，求区间内连续的数字，要求正序或倒序。</p><p>例如：</p><p>输入：[1, 5]，步长为1</p><p>输出：1，2，3，4，5<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://github.com/lodash/lodash/blob/master/.internal/baseRange.js</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; start 开始值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; end 结束值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; step 步长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseRange</span>(<span class="params">start, end, step, fromRight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.ceil((end - start) / (step || <span class="number">1</span>)), <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length)</span><br><span class="line">  <span class="keyword">while</span> (length--) &#123;</span><br><span class="line">    <span class="comment">// 从大到小，或者是从小到大</span></span><br><span class="line">    result[fromRight ? length : ++index] = start</span><br><span class="line">    start += step</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day158-Virtual DOM 小结</title>
      <link href="/2019/06/20/2019-06-20/"/>
      <url>/2019/06/20/2019-06-20/</url>
      
        <content type="html"><![CDATA[<h3 id="createElement的定义"><a href="#createElement的定义" class="headerlink" title="createElement的定义"></a>createElement的定义</h3><p>createElement 方法创建 VNode。&lt;src/core/vdom/create-elemenet.js&gt;<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapper function for providing a more flexible interface</span></span><br><span class="line"><span class="comment">// without getting yelled at by flow</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  alwaysNormalize: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data) || isPrimitive(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isTrue(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = ALWAYS_NORMALIZE</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对_createElement的封装，配置参数更加灵活</span></span><br><span class="line">  <span class="keyword">return</span> _createElement(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="createElement"><a href="#createElement" class="headerlink" title="_createElement"></a>_createElement</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component, <span class="regexp">//</span>  VNode 的上下文</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData, <span class="regexp">//</span> &lt;flow&gt;vnode.js&gt;目录中</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any, <span class="regexp">//</span> VNode 的子节点</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef((data: any).__ob__)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">`Avoid using observed data object as vnode data: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>\n`</span> +</span><br><span class="line">      <span class="string">'Always create fresh vnode data objects in each render!'</span>,</span><br><span class="line">      context</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// object syntax in v-bind</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(data.is)) &#123;</span><br><span class="line">    tag = data.is</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="comment">// in case of component :is set to falsy value</span></span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// warn against non-primitive key</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    isDef(data) &amp;&amp; isDef(data.key) &amp;&amp; !isPrimitive(data.key)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!__WEEX__ || !(<span class="string">'@binding'</span> <span class="keyword">in</span> data.key)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Avoid using non-primitive value as key, '</span> +</span><br><span class="line">        <span class="string">'use string/number value instead.'</span>,</span><br><span class="line">        context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// support single function children as default scoped slot</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> children[<span class="number">0</span>] === <span class="string">'function'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    data = data || &#123;&#125;</span><br><span class="line">    data.scopedSlots = &#123; <span class="attr">default</span>: children[<span class="number">0</span>] &#125;</span><br><span class="line">    children.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class="line">    children = normalizeChildren(children)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class="line">    children = simpleNormalizeChildren(children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> vnode, ns</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">      <span class="comment">// platform built-in elements</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        config.parsePlatformTagName(tag), data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">      <span class="comment">// component</span></span><br><span class="line">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// unknown or unlisted namespaced elements</span></span><br><span class="line">      <span class="comment">// check at runtime because it may get assigned a namespace when its</span></span><br><span class="line">      <span class="comment">// parent normalizes children</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        tag, data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day157-Virtual DOM 小结</title>
      <link href="/2019/06/19/2019-06-19/"/>
      <url>/2019/06/19/2019-06-19/</url>
      
        <content type="html"><![CDATA[<h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><p><code>Virtual DOM</code> 就是用原生的 JS 对象去描述 DOM 节点。<br><a id="more"></a></p><p>vuejs借助了<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a>这个库。</p><p><code>Virtual DOM</code>用 <code>VNode</code> 这么一个 Class 去描述。</p><p><code>VNode</code> 也是对真实 DOM 的一种抽象描述，</p><p><code>VNode</code>的核心定义是几个关键属性，<strong>标签名</strong>、<strong>数据</strong>、<strong>子节点</strong>、<strong>键值</strong>等。</p><p>其它属性都是都是用来扩展 VNode 的灵活性以及实现一些特殊 feature。</p><p>VNode是映射到真实 DOM 的<strong>渲染</strong>，不需要操作DOM的方法。</p><blockquote><p>Vue.js 利用 createElement 方法创建 VNode，它定义在 src/core/vdom/create-elemenet.js</p></blockquote><h3 id="映射DOM"><a href="#映射DOM" class="headerlink" title="映射DOM"></a>映射DOM</h3><p>映射到真实的 DOM 实际上要经历 VNode 的 <strong>create</strong>、<strong>diff</strong>、<strong>patch</strong>等过程</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day156-LeetCode 278. First Bad Version</title>
      <link href="/2019/06/18/2019-06-18/"/>
      <url>/2019/06/18/2019-06-18/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.<br>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.<br>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>直接用二分法搜索<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example：</span><br><span class="line">[1,2,3,4,5] --&gt; [1,1,1,0,0]</span><br><span class="line">max = 5, min = 1   -&gt; mid = 3   isBadVersion(3) = true</span><br><span class="line">min = mid+1 = 4    -&gt; mid = 4   isBadVersion(4) = false</span><br><span class="line">max = mid   = 4    -&gt; max &gt; min == false, end loop</span><br></pre></td></tr></table></figure></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;integer&#125; version number</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;integer&#125; n Total versions</span></span><br><span class="line"><span class="comment">   * @return &#123;integer&#125; The first bad version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max = n</span><br><span class="line">    <span class="keyword">let</span> mid</span><br><span class="line">    <span class="comment">// 二分法搜索 </span></span><br><span class="line">    <span class="keyword">while</span> (max &gt; min)&#123;</span><br><span class="line">      mid = min + <span class="built_in">parseInt</span>((max+min) / <span class="number">2</span>) </span><br><span class="line">      <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">        max = mid</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        min = mid + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day155-LeetCode 191. Number of 1 Bits</title>
      <link href="/2019/06/17/2019-06-17/"/>
      <url>/2019/06/17/2019-06-17/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>二分法，但要注意给出的<code>nums</code> 不是完全的升序或降序。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> search(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; nums[high]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[high])</span><br><span class="line">        <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[low] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">          <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day154-LeetCode 191. Number of 1 Bits</title>
      <link href="/2019/06/16/2019-06-16/"/>
      <url>/2019/06/16/2019-06-16/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p><p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>先把数字转二进制，然后再遍历1的个数</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hammingWeight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> secondS = n.toString(<span class="number">2</span>).split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondS.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (secondS % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day153-LeetCode 198. House Robber</title>
      <link href="/2019/06/15/2019-06-15/"/>
      <url>/2019/06/15/2019-06-15/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.<br>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.<br>（大意是：求最大不连续的值）<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>假设为[m0,m1,m2,m3,….]，求最大的数</p></blockquote><p>如果房子只有[m0], max = mo</p><p>[m0,m1], max = Max(m0,m1)</p><p>[m0,m1,m2], max = Max(m0+m2,m1)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">robber</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxSum = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">1</span>],nums[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  maxSum.push(nums[<span class="number">0</span>])</span><br><span class="line">  maxSum.push(<span class="built_in">Math</span>.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// Max(m0+m2,m1),计算公式</span></span><br><span class="line">    maxSum[i] =  <span class="built_in">Math</span>.max(nums[i] + maxSum[i<span class="number">-2</span>], maxSum[i<span class="number">-1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSum.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day152-找出有序数组中连续的数</title>
      <link href="/2019/06/14/2019-06-14/"/>
      <url>/2019/06/14/2019-06-14/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>找出有序数组中连续的数，并按一定规则排列。<br>（这个题来自今天的需求，要求选中一些指定的图片。且可以利用范围来选择。）<br>input：[1, 3, 4, 10, 25, 26, 30, 31, 32, 33]<br>output：1,3-4,10,25-26,30-33<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>每一个数，找出每个数和该数的下一个数加一是不是相等。<br>利用“游标”的方法，挨个查找。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressArr</span> (<span class="params">sortedArr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须是有序数组</span></span><br><span class="line">  <span class="keyword">let</span> start = sortedArr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> stop = start</span><br><span class="line">  <span class="keyword">let</span> arrLength = sortedArr.length <span class="comment">// 注意这里sortedArr，如果是定义变量arr，则会变量提升</span></span><br><span class="line">  <span class="keyword">let</span> resultStr = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line">    <span class="comment">// 等于前一个连续的值+1，即：连续值</span></span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] === stop + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 指向下一个元素</span></span><br><span class="line">      stop = sortedArr[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (start === stop) &#123;</span><br><span class="line">        resultStr += start + <span class="string">','</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resultStr += start + <span class="string">'-'</span> + stop + <span class="string">','</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重新初始化start和stop指向</span></span><br><span class="line">      start = sortedArr[i]</span><br><span class="line">      stop = start</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理最后的数</span></span><br><span class="line">  <span class="keyword">if</span> (start === stop) &#123;</span><br><span class="line">    resultStr += start</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resultStr += start + <span class="string">'-'</span> + stop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day151-LeetCode 141. Linked List Cycle</title>
      <link href="/2019/06/13/2019-06-13/"/>
      <url>/2019/06/13/2019-06-13/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, determine if it has a cycle in it.<br>Follow up: Can you solve it without using extra space?<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>求链表中是否有个循环</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasCycle</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> node = head</span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.flag) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 标记节点每一个跑过的节点</span></span><br><span class="line">    node.flag = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 跑到下一个节点</span></span><br><span class="line">    node = node.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快慢链表"><a href="#快慢链表" class="headerlink" title="快慢链表"></a>快慢链表</h3><blockquote><p>两者步长不一样</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">  ListNode slow = head, fast = head;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (slow == fast) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown-trick</title>
      <link href="/2019/06/07/markdown-trick/"/>
      <url>/2019/06/07/markdown-trick/</url>
      
        <content type="html"><![CDATA[<h2 id="vscode-snippets"><a href="#vscode-snippets" class="headerlink" title="vscode snippets"></a>vscode snippets</h2><blockquote><p>以设置 markdown 代码片段为例</p></blockquote><a id="more"></a><h4 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">开启设置</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 设置</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"[markdown]":  &#123;</span><br><span class="line">    "editor.quickSuggestions": true</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">设置模板</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 用户代码片段 &gt; markdown.json</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"markdown write template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"mdrt"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">      <span class="string">"--- $1"</span>,</span><br><span class="line">      <span class="string">"title: $TM_FILENAME_BASE"</span>,</span><br><span class="line">      <span class="string">"tags:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"categories:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE-$CURRENT_HOUR"</span>,</span><br><span class="line">      <span class="string">"--- "</span>,</span><br><span class="line">      <span class="string">" \n "</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">"&lt;!--more--&gt; $2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Create template for markdown write"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: md-kill</span><br><span class="line">tags:</span><br><span class="line">* xx</span><br><span class="line">categories:</span><br><span class="line">* xx</span><br><span class="line">date: 2018-03-31-20</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">Markdown Snippet Prefix Does Not Trigger Snippet #28048</a><br><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Creating your own snippets</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fib</title>
      <link href="/2019/06/07/fib/"/>
      <url>/2019/06/07/fib/</url>
      
        <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><blockquote><p>打印斐波那契数列，递归法，迭代法，提升递归效率</p></blockquote><a id="more"></a><p>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]<br>后一位数是前两位数之和<br>(例如 fib(2) === 0 + 1) === 1;</p><p>提升递归效率，创建一个数据存储，或者一个小的缓存对象，缓存对象是数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function memoize(fn) &#123;</span><br><span class="line">  const cache = &#123;&#125;;</span><br><span class="line">  return function(...args) &#123;</span><br><span class="line">    // ...args ： 数组集</span><br><span class="line">    if (cache[args]) &#123;</span><br><span class="line">      return cache[args];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const result = fn.apply(this, args);</span><br><span class="line">    cache[args] = result;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function slowFib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return slowFib(n - 1) + slowFib(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const fib = memoize(slowFib);</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = result[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> b = result[i - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    result.push(a + b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 编程 </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019--启程</title>
      <link href="/2019/06/07/2019-%E5%90%AF%E7%A8%8B/"/>
      <url>/2019/06/07/2019-%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyonjtz2hlj20c80qdwen.jpg" alt><br>即将告别2018年，这个对于我来说，<strong>多灾多难</strong>的一年。<br>这一年发生了太多的事，每一年也都会发生很多事，但从来没有哪一年能够像2018年这样让人印象深刻。<br><strong>考研结束。</strong><br><strong>毕业。</strong><br><strong>工作。</strong><br><strong>最悲痛的莫过于最亲的人去世。</strong><br>事业也刚刚起步，爱情失去了方向。<br>真是让人印象深刻的一年。<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day36-杂谈</title>
      <link href="/2019/02/15/2019-02-15/"/>
      <url>/2019/02/15/2019-02-15/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天是考研成绩出来的一天。恍恍惚惚，一年前的这个时候我还在过年，恍惚间一年已经过了。早上七点就醒了，不知道这有没有什么关系，但重要的是一年前的这个时候，我一晚上没睡着，结果第二天这个时候，消息并没有那么好。这都是一年前的事情了。谈一谈吧。这两天在做移动端的支付宝支付。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aijcid1j20u01hcwhm.jpg" alt><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day35-杂谈</title>
      <link href="/2019/02/14/2019-02-14/"/>
      <url>/2019/02/14/2019-02-14/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>发现要是女生和代码一样容易理解就好了，出错的几率也太大了。因为你费劲输入一大堆代码，最后错都不会报，根本不知道会不会运行。<br>衰(′д｀ )…彡…彡<br>有时候有些人你付出，更本就不会有任何反应。世事难料啊。情人节快乐！<br>祝你们原地爆炸！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg" alt><br>-end<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day34-deepClone</title>
      <link href="/2019/02/13/2019-02-13/"/>
      <url>/2019/02/13/2019-02-13/</url>
      
        <content type="html"><![CDATA[<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>探究一下深拷贝，本文主要是浅拷贝、深拷贝的简单实现，并对循环引用就行一些了解。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0555oglhej20u01hcdkz.jpg" alt><br><a id="more"></a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  id: <span class="string">'1'</span>,</span><br><span class="line">  segment: &#123;</span><br><span class="line">    hitinfos: &#123;</span><br><span class="line">      <span class="comment">// 浅拷贝时rule为rule: [Object]</span></span><br><span class="line">      rule: &#123;</span><br><span class="line">        a: <span class="string">'no-placeholder'</span>,</span><br><span class="line">        b: <span class="string">'no-tag'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      level: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    atoms: [</span><br><span class="line">      &#123; <span class="attr">tgt</span>: <span class="string">'you dont know'</span>, <span class="attr">src</span>: <span class="string">'你不知道'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">tgt</span>: <span class="string">'what'</span>, <span class="attr">src</span>: <span class="string">'什么'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  arr: [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    arr: <span class="string">'arr1'</span></span><br><span class="line">  &#125;],</span><br><span class="line">  value_1: <span class="literal">undefined</span>,</span><br><span class="line">  value_2: <span class="literal">null</span>,</span><br><span class="line">  value_3: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li>简单的对象浅拷贝（只遍历一层）-拷贝引用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneShadow</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tgt = &#123;&#125;</span><br><span class="line">  <span class="comment">//  为什么不直接用“=”赋值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="comment">// 或者用if (Object.hasOwnProperty(prop)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      tgt[prop] = src[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = cloneShadow(data)</span><br><span class="line">data.id = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>递归对象深拷贝（遍历多层）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 非对象</span></span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; <span class="keyword">typeof</span> src !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line">    <span class="comment">// throw new TypeError('Except Object, got' + (typeof src))</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      <span class="comment">// value为null或者undefined则返回原值(typeof null === 'object')</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">          tgt[prop] = deepClone(src[prop])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test_1 = deepClone(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br></pre></td></tr></table></figure></li></ul><h3 id="拷贝循环引用"><a href="#拷贝循环引用" class="headerlink" title="拷贝循环引用"></a>拷贝循环引用</h3><ul><li>拷贝循环引用（JSON方法抛异常）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCloneCircle</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; src !== <span class="string">'object'</span>) <span class="keyword">return</span> src</span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, tgt)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (src[prop] &amp;&amp; src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        tgt[prop] = deepCloneCircle(src[prop])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = deepCloneCircle(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>[1]. <a href="https://segmentfault.com/a/1190000008637489" target="_blank" rel="noopener">JavaScript中的浅拷贝和深拷贝</a><br>[2]. <a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe" target="_blank" rel="noopener">【进阶4-3期】面试题之如何实现一个深拷贝</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day33-css居中</title>
      <link href="/2019/02/12/2019-02-12/"/>
      <url>/2019/02/12/2019-02-12/</url>
      
        <content type="html"><![CDATA[<h2 id="居中总结"><a href="#居中总结" class="headerlink" title="居中总结"></a>居中总结</h2><p>经常会碰到一些居中的问题，这里尝试进行一些总结。分为垂直居中和水平居中。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg" alt><br><a id="more"></a></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>行内或类行内元素(inline/inline-block/inline-table/flex)：text-align: center;</li><li>块级元素： margin: 0 auto;</li><li><p>多个块级元素：display: inline-block;</p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3></li><li>行内或类行内元素:<ul><li>单行：padding-top与padding-bottom 等值、或line-height与height 等值</li><li>多行：单行padding等值，或display: table-cell 用vertical-align：middle;</li></ul></li><li>块级元素：</li></ol><p>– 待续</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十二天2019-02-01</title>
      <link href="/2019/02/01/2019-02-01/"/>
      <url>/2019/02/01/2019-02-01/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近又开始关注到Nodejs了，因为在探究js的一些原理的时候，不可避免的会注意到js的一些应用场景的不同，这两天看到了一篇很好的介绍Nodejs入门的文章，<a href="https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7" target="_blank" rel="noopener">【全文】狼叔：如何正确的学习Node.js</a>。看这篇文章还是比较有感触的，文章本身结合自身的体验从Nodejs诞生以来讲到近些年的趋势，当然我觉得最准的还是属于对于React.js和Vue.js的趋势的描述。这篇文章偏向于说教，也是说给初学Nodejs的人所听的，详细的地方在于介绍了一些该看的书本，和一些练习代码的方法，比如学会Nodejs要多看一些NPM包的源码，按作者来说就是一天5个NPM包阅读。这个对我来说感触是非常深的，本人觉得是，只有真正的上手，你才能说是真的开始去掌握这门东西。我觉得文章是真的比较详细，还提供一些资料，也提出了一些问题，比如，“在变化多端的大前端背景之下，该如何精进？”。文章本身可能探讨的比较多，也探讨了，Nodejs在各类编程语言中的比较，比如和java比较的优劣。总得来说，是一篇不可多得的好文。有幸看到这种文章。看来以后还是要多看专门的社区，去浏览一些文章，增长一些见识，拓宽一些视野。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzr55r2l7vj20u0140q8k.jpg" alt></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十一天2019-01-31</title>
      <link href="/2019/01/31/2019-01-31/"/>
      <url>/2019/01/31/2019-01-31/</url>
      
        <content type="html"><![CDATA[<h3 id="leetCode"><a href="#leetCode" class="headerlink" title="leetCode"></a>leetCode</h3><p>今天想到了Leetcode的题目，又捡起来做了一道题目。可能比较简单，就当是回忆的题目吧，以后捡起来题目都比较方便。慢慢来吧。坚持下去也好。也不是宁缺毋滥这种借口，是不存在的，还是得每天坚持写点日记，这样以后就能够进行阶段性总结，也可以看以前的东西，希望养成习惯。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b98bxyj20jg0jggml.jpg" alt><br><a id="more"></a></p><h3 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* [<span class="number">2</span>] Add Two Numbers</span><br><span class="line">*</span><br><span class="line">* https:<span class="comment">//leetcode.com/problems/add-two-numbers/description/</span></span><br><span class="line">*</span><br><span class="line">* algorithms</span><br><span class="line">* Medium (<span class="number">30.32</span>%)</span><br><span class="line">* Total Accepted:    <span class="number">733.3</span>K</span><br><span class="line">* Total Submissions: <span class="number">2.4</span>M</span><br><span class="line">* Testcase Example:  <span class="string">'[2,4,3]\n[5,6,4]'</span></span><br><span class="line">*</span><br><span class="line">* You are given two non-empty linked lists representing two non-negative</span><br><span class="line">* integers. The digits are stored <span class="keyword">in</span> reverse order and each <span class="keyword">of</span> their nodes</span><br><span class="line">* contain a single digit. Add the two numbers and <span class="keyword">return</span> it <span class="keyword">as</span> a linked list.</span><br><span class="line">* </span><br><span class="line">* You may assume the two numbers <span class="keyword">do</span> not contain any leading zero, except the</span><br><span class="line">* number <span class="number">0</span> itself.</span><br><span class="line">* </span><br><span class="line">* Example:</span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">* Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">* Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">* Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h3 id="题目框架"><a href="#题目框架" class="headerlink" title="题目框架"></a>题目框架</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"> *     <span class="keyword">this</span>.val = val;</span><br><span class="line"> *     <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @<span class="keyword">return</span> &#123;ListNode&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">var addTwoNumbers = function(l1, l2) &#123;</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法一</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> List = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> head = List</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> carray = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span> || sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l1.val</span><br><span class="line">      l1 = l1.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l2.val</span><br><span class="line">      l2 = l2.next</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      carray = <span class="number">1</span></span><br><span class="line">      sum = sum - <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    head.next = <span class="keyword">new</span> ListNode(sum)</span><br><span class="line">    head = head.next</span><br><span class="line">    sum = carray</span><br><span class="line">    carray = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> List.next</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法二</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// let node = null</span></span><br><span class="line">  <span class="comment">// const carray = arguments[2]</span></span><br><span class="line">  <span class="comment">// if (l1 || l2) &#123;</span></span><br><span class="line">  <span class="comment">//   // 加上进位</span></span><br><span class="line">  <span class="comment">//   const val1 = l1 ? l1.val1 : 0</span></span><br><span class="line">  <span class="comment">//   const val2 = l2 ? l2.val2 : 0</span></span><br><span class="line">  <span class="comment">//   const next1 = l1 ? l1.next : null</span></span><br><span class="line">  <span class="comment">//   const next2 = l2 ? l2.next : null</span></span><br><span class="line">  <span class="comment">//   const val = carry ? val1 + val2 + 1 : val1 + val2</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(val % 10)</span></span><br><span class="line">  <span class="comment">//   node.next = addTwoNumbers(next1, next2, val &gt;= 10)</span></span><br><span class="line">  <span class="comment">// &#125; else if (carray) &#123;</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(1)</span></span><br><span class="line">  <span class="comment">//   node.next = null</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return node</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>–end–</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三十天2019-01-30</title>
      <link href="/2019/01/30/2019-01-30/"/>
      <url>/2019/01/30/2019-01-30/</url>
      
        <content type="html"><![CDATA[<p>上线很晚啊，今天，有点困。还是早点睡吧，这些天。今天碰到个问题。vm.$attrs传入的不识别横线方式，爷组件传入的不会自动将驼峰转为横线模式。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b945ntj20zk0k0gnj.jpg" alt><br>–end–<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十九天2019-01-29</title>
      <link href="/2019/01/29/2019-01-29/"/>
      <url>/2019/01/29/2019-01-29/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>刚看了下，搁置了四天没写技术文章了，好几篇只有上文，没有下文。这个毛病从写日志体现出来了，说明得改，这还说明了，写日志的好处啊，能够从记录中发现问题。可能这就是今天鸽的理由吧。这几天快接近年末了，又期待，又不期待，真是很纠结。我发现，什么时候都有很多事，看你怎么去对待，永远不会说等到没事的时候。要调整好情绪再说。此处，鸽。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fznt8ja8lbj20u01407wh.jpg" alt><br>–end–</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十八天2019-01-28</title>
      <link href="/2019/01/28/2019-01-28/"/>
      <url>/2019/01/28/2019-01-28/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天回来的比较晚，可能事情比较多吧。又想起了以前的事。唉，洗洗早点睡吧。几天就这几句唠唠叨叨的话了。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzmpp0a9fgj20b40b4wi4.jpg" alt><br>–end–</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十七天2019-01-27</title>
      <link href="/2019/01/27/2019-01-27/"/>
      <url>/2019/01/27/2019-01-27/</url>
      
        <content type="html"><![CDATA[<p>今天上午看了一部动漫，B站Lex推荐的。看完之后感叹这两天动漫质量的提高，动漫三观简直不能再正，满满的正能量。这种动漫真是难怪不火。动漫名字叫《超能力少女》但是整个片并不是一部打斗片，而是一部以一位来自异世界超能力少女生活为主线另一位异世界超能力少女为辅，讲述了来到这个世界之后，两个少女面对不同的家庭之间各自的努力和奋斗故事，在女二号身上，看到了满满的正能量，与女一号富有的生活对比，个人感觉女二号的勤奋和人品更像是这部故事讲述的主题。同时，这个故事也对于日本的黑帮进行了一些美化。虽然故事剧情并没有像标题和开头一幕一样热血，但是剧情本身还是非常精彩！这里好像说了绕口令。但就是夸这部动漫吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzlc8bxnrgj20yi22ojyq.jpg" alt><br>–end–</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十六天2019-01-26</title>
      <link href="/2019/01/26/2019-01-26/"/>
      <url>/2019/01/26/2019-01-26/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天公司年会，这是个不写log的好理由，对吧？我也是这么觉得。回到家已经很晚了，晚上11点才到家，就真的不想再写日志了。就这样结束今天的日志环节吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzkehskm6qj205k05kdfw.jpg" alt><br>–end–</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十五天2019-01-25</title>
      <link href="/2019/01/25/2019-01-25/"/>
      <url>/2019/01/25/2019-01-25/</url>
      
        <content type="html"><![CDATA[<h3 id="js-常用数组方法小结-（2）"><a href="#js-常用数组方法小结-（2）" class="headerlink" title="js 常用数组方法小结 （2）"></a>js 常用数组方法小结 （2）</h3><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>有些数组方法会经常用，这里今天就介绍一下reduce()方法和find()方法。</p><h3 id="Array-protytype-reduce"><a href="#Array-protytype-reduce" class="headerlink" title="Array.protytype.reduce()"></a>Array.protytype.reduce()</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>看完一些方法，目前来说，reduce()方法，能实现的比较多，且我之前看到的文章中对其的推崇是比较多的。据说它能做很多事情。昨天看了下MDN上的介绍和几个例子，确实感觉其功能的强大。本文基于MDN上的代码以笔记的形式注释，先对功能做栗子，然后对方法进行一些描述。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzj9hyus3ij20sg0sgh3k.jpg" alt></p><a id="more"></a><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><h4 id="一些简单的例子"><a href="#一些简单的例子" class="headerlink" title="一些简单的例子"></a>一些简单的例子</h4><ol><li><p>累加数组中的值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">34</span>].reduce(<span class="function">(<span class="params">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 58</span></span><br></pre></td></tr></table></figure></li><li><p>累加对象数组中的值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;].reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 将键名为x的逐个累加到累加器中</span></span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue.x</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ol><p>initialValue 为初始值，且初始值是必须提供的</p><ol start="3"><li>二维数组转为一维数组？<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flattened =  [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, cval, cidx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始值为空数组，取出当前下标数组中的值，放入累加器中的空数组，逐个累加</span></span><br><span class="line">  <span class="keyword">return</span> acc.concat(cval)</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(flattened)</span><br></pre></td></tr></table></figure></li></ol><h4 id="一些稍微复杂点的"><a href="#一些稍微复杂点的" class="headerlink" title="一些稍微复杂点的"></a>一些稍微复杂点的</h4><ol><li><p>计算数组中每个元素出现的次数？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">21</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> count = arr.reduce(<span class="function">(<span class="params">acc, cval</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 这里要注意是在累加器中去寻找是否存在值</span></span><br><span class="line">  <span class="keyword">if</span> (cval <span class="keyword">in</span> acc) &#123;</span><br><span class="line">   <span class="comment">// 以对象形式赋值，真个reduce过程一次次去遍历</span></span><br><span class="line">    acc[cval]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    acc[cval] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// &#123; '1': 2, '3': 1, '21': 1, '54': 1 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>属性对object分类？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Max'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span> (<span class="params">objArr, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objArr.reduce(<span class="function">(<span class="params">acc, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 键名</span></span><br><span class="line">    <span class="keyword">let</span> key = obj[property]</span><br><span class="line">    <span class="comment">// 判断累加器中是否有重复的元素</span></span><br><span class="line">    <span class="keyword">if</span>(!acc[key]) &#123;</span><br><span class="line">      acc[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    acc[key].push(obj)</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> groupedByPeople = groupBy(people, <span class="string">'age'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(groupedByPeople)</span><br></pre></td></tr></table></figure></li><li><p>使用扩展运算符和initialValue绑定包含在对象数组中的数组<br>简单点说就是取出数组集合中对象中的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> friends = [&#123;</span><br><span class="line">  name: <span class="string">'Anna'</span>,</span><br><span class="line">  books: [<span class="string">'Bible'</span>, <span class="string">'Harry Potter'</span>],</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'Bob'</span>,</span><br><span class="line">  books: [<span class="string">'War and peace'</span>, <span class="string">'Romeo and Juliet'</span>],</span><br><span class="line">  age: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'Alice'</span>,</span><br><span class="line">  books: [<span class="string">'The Lord of the Rings'</span>, <span class="string">'The Shining'</span>],</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 列出所有包含的书籍</span></span><br><span class="line"><span class="comment">// 题目不容易理解，好好一想，就容易的多，还得对扩展符了解的比较多点就更容易上手</span></span><br><span class="line"><span class="keyword">let</span> containerBook = friends.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [...prev, ...curr.books]</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(containerBook)</span><br></pre></td></tr></table></figure></li></ol><p>然后，鸽了鸽了。先写到这里吧。时间又不够了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce()</a><br>–end–</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十四天2019-01-24</title>
      <link href="/2019/01/24/2019-01-24/"/>
      <url>/2019/01/24/2019-01-24/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天一天写代码有点不在状态，可能是最近有点不太对，不是疲累也可能是心事又多了起来。原本计划今天继续上文或者上上文的。现在看来真的只能是搁了。<br>最近图片可能会风格比较和以前不一样。这是问人要的哈。嘿嘿。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzi1pivvmhj20i40i53zr.jpg" alt><br>–end–<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十三天2019-01-23</title>
      <link href="/2019/01/23/2019-01-23/"/>
      <url>/2019/01/23/2019-01-23/</url>
      
        <content type="html"><![CDATA[<h3 id="js-常用数组方法小结"><a href="#js-常用数组方法小结" class="headerlink" title="js 常用数组方法小结"></a>js 常用数组方法小结</h3><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>今天这个数组对象操作写的有点多啊，特此来小结一下，一些常用的方法的基本操作。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzgxeniqluj20k00arjrt.jpg" alt><br><a id="more"></a></p><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><h4 id="表格过滤用的比较多"><a href="#表格过滤用的比较多" class="headerlink" title="表格过滤用的比较多"></a>表格过滤用的比较多</h4><p>大概用法就是过滤数组或者数组集合中一些不符合条件的数组元素和集合。也可以用来过滤数组中一些undefined和null。<br>例子：<sup>[1]</sup><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grapes&apos;, &apos;mango&apos;, &apos;orange&apos;];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Array filters items based on search criteria (query)</span><br><span class="line"> */</span><br><span class="line">const filterItems = (query) =&gt; &#123;</span><br><span class="line">  return fruits.filter((el) =&gt;</span><br><span class="line">  // 过滤的条件</span><br><span class="line">    el.toLowerCase().indexOf(query.toLowerCase()) &gt; -1</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 根据条件过滤之后的数组</span><br><span class="line">console.log(filterItems(&apos;ap&apos;)); // [&apos;apple&apos;, &apos;grapes&apos;]</span><br><span class="line">console.log(filterItems(&apos;an&apos;)); // [&apos;banana&apos;, &apos;mango&apos;, &apos;orange&apos;]</span><br></pre></td></tr></table></figure></p><h4 id="过滤数组中空值"><a href="#过滤数组中空值" class="headerlink" title="过滤数组中空值"></a>过滤数组中空值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let newArray = oldArray.filter(s =&gt; s.value != null)</span><br></pre></td></tr></table></figure><h4 id="filter-的实现"><a href="#filter-的实现" class="headerlink" title="filter() 的实现"></a>filter() 的实现</h4><ul><li>利用for循环以及push构造数组<sup>[1]</sup><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Polyfill Array.prototype.filter()</span><br><span class="line">function newFilter() &#123;</span><br><span class="line">  if (!Array.prototype.newFilter) &#123;</span><br><span class="line">    // 可以带thisArg</span><br><span class="line">    Array.prototype.newFilter = (fun /* , thisArg*/) =&gt; &#123;</span><br><span class="line">      // void(0)（等同于void 0） 差不多等于 undefined</span><br><span class="line">      if (this === void 0 || this === null) &#123;</span><br><span class="line">        throw new TypeError()</span><br><span class="line">      &#125;</span><br><span class="line">      // Object构造函数为给定值创建一个对象包装器</span><br><span class="line">      let t = Object(this)</span><br><span class="line">      // 所有非数值转换成0, 所有大于等于 0 等数取整数部分</span><br><span class="line">      // Shifts a in binary representation b (&lt; 32) bits to the right, discarding bits shifted off, and shifting in 0s from the left.</span><br><span class="line">      let len = t.length &gt;&gt;&gt; 0</span><br><span class="line">      if (typeof fun !== &apos;function&apos;) &#123;</span><br><span class="line">        throw new TypeError()</span><br><span class="line">      &#125;</span><br><span class="line">      let res = []</span><br><span class="line">      // arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性</span><br><span class="line">      // 没有 pop 方法。但是它可以被转换为一个真正的Array：args = Array.from(arguments)</span><br><span class="line">      // 所以这个地方用arguments可能有错？</span><br><span class="line">      let thisArg = arguments.length &gt;= 2 ? arguments[1] : void 0</span><br><span class="line">      // t = Object(this)</span><br><span class="line">      for (let i = 0; i&lt; len; i++) &#123;</span><br><span class="line">        // prop in object, 检查object（或其原型链）是否包含具有指定名称的属性的对象</span><br><span class="line">        if (i in t) &#123;</span><br><span class="line">          let val = t[i]</span><br><span class="line">          // NOTE: Technically this should Object.defineProperty at</span><br><span class="line">          //       the next index, as push can be affected by</span><br><span class="line">          //       properties on Object.prototype and Array.prototype.</span><br><span class="line">          //       But that method&apos;s new, and collisions should be</span><br><span class="line">          //       rare, so use the more-compatible alternative.</span><br><span class="line">          // 满足filter中的条件的话就push进数组res,filter回调函数的三个参数：元素值，元素索引，原数组</span><br><span class="line">          // thisArg: 当前在数组中处理的元素</span><br><span class="line">          // val: 正在处理元素在数组中的索引</span><br><span class="line">          if (fun.call(thisArg, val, i, t))</span><br><span class="line">            res.push(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><p>鸽到下期再讲吧，好像我已经鸽了很多东西了。额。<br>–end–</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十二天2019-01-22</title>
      <link href="/2019/01/22/2019-01-22/"/>
      <url>/2019/01/22/2019-01-22/</url>
      
        <content type="html"><![CDATA[<h3 id="组件通信-祖孙"><a href="#组件通信-祖孙" class="headerlink" title="组件通信-祖孙"></a>组件通信-祖孙</h3><p>本文将结合例子，简单讲解下vuejs文档中的实例属性：<strong>vm.$attrs</strong>和<strong>vm.$listeners</strong>。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzfr1n65maj20b40b4dfn.jpg" alt><a id="more"></a></p><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>因为项目中大多用Vuex来通信，但是用多了之后感觉简单的组件之间的通信再用构造vuex的mutation，写起来比较费，当然父子之间的通信肯定是用emit更实在。</p><h3 id="写个“栗子”"><a href="#写个“栗子”" class="headerlink" title="写个“栗子”"></a>写个“栗子”</h3><ul><li>三个组件：grandfather &gt; father &gt; son<h4 id="祖宗组件"><a href="#祖宗组件" class="headerlink" title="祖宗组件"></a>祖宗组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;grandfather&apos;, &#123;</span><br><span class="line">props: [],</span><br><span class="line">template:</span><br><span class="line">`&lt;div&gt;</span><br><span class="line">  &lt;father</span><br><span class="line">:getGrandsonData=&quot;grandfatherData&quot; // 传值</span><br><span class="line">@getGrandsonEvent=&quot;grandfatherEvent&quot; // 事件</span><br><span class="line">&gt;&lt;/father&gt; </span><br><span class="line">&lt;/div&gt; `</span><br><span class="line">data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      grandfatherData: &quot;hello, i&apos;m your grandfather&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">grandfatherEvent (val) &#123;</span><br><span class="line">// 这里接到了“hello, i&apos;m your grandson”</span><br><span class="line">console.log(val) // hello, i&apos;m your grandson</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="父亲组件"><a href="#父亲组件" class="headerlink" title="父亲组件"></a>父亲组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;father&apos;, &#123;</span><br><span class="line">props: [], // 注意这里props不需要再父组件声明</span><br><span class="line">template:\`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;grandson</span><br><span class="line">v-bind=&quot;$attrs&quot;</span><br><span class="line">v-on=&quot;$listeners&quot;</span><br><span class="line">&gt;&lt;/grandson&gt;  \`</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="孙子组件"><a href="#孙子组件" class="headerlink" title="孙子组件"></a>孙子组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;grandson&apos;, &#123;</span><br><span class="line">props: [],</span><br><span class="line">template:`</span><br><span class="line">  &lt;input</span><br><span class="line">  type=&quot;text&quot;</span><br><span class="line">  v-model=&quot;grandsonMsgToGrandfather&quot;</span><br><span class="line">@input=&quot;sendToGrandfatherEvent&quot;</span><br><span class="line">&gt;&#123;&#123;$attrs.grandfatherData&#125;&#125;&lt;/div&gt; `</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">  grandsonMsgToGrandfather: &quot;hello, i&apos;m your grandson&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">sendToGrandfatherEvent () &#123;</span><br><span class="line">this.$emit(&apos;getGrandsonEvent&apos;, sonMsgToGrandfather )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：这里的代码并没有验证过,只是大概写个简单的demo</p><h3 id="上文档"><a href="#上文档" class="headerlink" title="上文档"></a>上文档</h3><h4 id="vm-attrs"><a href="#vm-attrs" class="headerlink" title="vm.$attrs"></a>vm.$attrs</h4><blockquote><p><strong>vm.$attrs</strong><br><strong>类型：</strong><code>{ [key: string]: string }</code><br><strong>只读</strong><br><strong>详细：</strong><br>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p></blockquote><h4 id="vm-listeners"><a href="#vm-listeners" class="headerlink" title="vm.$listeners"></a>vm.$listeners</h4><blockquote><p><strong>vm.$listeners</strong><br><strong>类型：</strong><code>{ [key: string]: Function | Array&lt;Function&gt; }</code><br><strong>只读</strong><br><strong>详细：</strong><br>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://cn.vuejs.org/v2/api/#vm-attrs" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-attrs</a> 、<a href="https://cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-listeners</a><br>[2]. <a href="https://blog.csdn.net/qq_39009348/article/details/81977468" target="_blank" rel="noopener">vue的通信方式（二）—祖父孙三个级别的之间的隔代通信</a></p><p>  —end—</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十一天2019-01-21</title>
      <link href="/2019/01/21/2019-01-21/"/>
      <url>/2019/01/21/2019-01-21/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天又重温了一小下（事件循环）Event Loop，如何去区分MicroTask（微任务）,MacroTask（宏任务），说实话我还没有非常精确的去理解到位，做顺序题目，也会做错，理解的不充分不到位。去看了下MDN<sup><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">1</a></sup>,发现并没有解释的很详细，除了解释Nodejs中和浏览器中的EventLoop有点不同，其他简短的语言倒像是解释<code>setTimeout()</code>是“非等待一定时间之后执行”这一概念。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzelyzwwi1j20hk0b2n27.jpg" alt><br><a id="more"></a></p><h3 id="Event-Loop-上"><a href="#Event-Loop-上" class="headerlink" title="Event Loop - 上"></a>Event Loop - 上</h3><p>下面来稍微再温习下这个东西。承上启下，为<code>Promise()</code>的深入理解做更好的准备。</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>JavaScript这种并发模型基于“事件循环” ，是单线程的，不像是C语言任何位置被终止，它是异步而不阻塞主进程执行。Event Loop起到很重要的作用， JavaScript处理 I/O 通常通过事件和回调来执行。<br>本文简单的入门一下Event Loop这个东西，大概有个映像就行。</p><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>js引擎的两种任务</p><ul><li>MacroTask: <strong>setTimeout</strong>, <strong>setInterval</strong>, <strong>setImmediate</strong>,<strong>I/O</strong>, <strong>UI rendering</strong></li><li>MicroTask: <strong>Promise</strong>, <strong>process.nextTick</strong>, <strong>Object.observe</strong>, <strong>MutationObserver</strong>, <strong>MutaionObserver</strong><h4 id="调度机制"><a href="#调度机制" class="headerlink" title="调度机制"></a>调度机制</h4>不同的任务行为并不一样，执行的先后顺序不一样。具体怎么个不一样，这里拿个例子<sup><a href="https://imweb.io/topic/5b148768d4c96b9b1b4c4ea1" target="_blank" rel="noopener">2</a></sup>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(4);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">var promise = new Promise(function executor(resolve) &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  for (var i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    i == 9999 &amp;&amp; resolve();</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(5);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure></li></ul><p>Nodejs输出： 1 2 3 5 4<br>浏览器输出：1 2 3 5 undefined 4<br>注：这里不讨论Nodejs和浏览器的异同</p><h4 id="MicroTask-和-Macro-Task的执行顺序-描述"><a href="#MicroTask-和-Macro-Task的执行顺序-描述" class="headerlink" title="MicroTask 和 Macro Task的执行顺序 - 描述"></a>MicroTask 和 Macro Task的执行顺序 - 描述</h4><ol><li>Event Loop 开始</li><li>MicroTasks 队列开始执行至结束</li><li>检查MacroTask 队列是否有待执行，有则跳到4，无则跳到6</li><li>MacroTask队列“抽取”一个任务，执行至结束</li><li>检查MicroTasks 是否执行完毕，若有则跳到2，无则跳到3</li><li>结束Event Loop</li></ol><p><strong>以上整个过程就是Event Loop（事件循环）。</strong></p><p>这里有个疑问，就是5为什么还要检查是否执行完毕，因为2已经检查过了，是什么事件遗留到了5？</p><h4 id="MicroTask-和-Macro-Task的执行顺序-图文"><a href="#MicroTask-和-Macro-Task的执行顺序-图文" class="headerlink" title="MicroTask 和 Macro Task的执行顺序 - 图文"></a>MicroTask 和 Macro Task的执行顺序 - 图文</h4><p>一张图来解释下<sup><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">3</a></sup>（这张图是引用的，可能需要重画下，可能加上Event table会更好点）。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzellunmyaj20ux0q8472.jpg" alt></p><h4 id="图怎么理解呢"><a href="#图怎么理解呢" class="headerlink" title="图怎么理解呢?"></a>图怎么理解呢?</h4><p>宏任务作为入口的话，setTimeout不是第一个执行？是这么个解释的，拿调度机制中的代码说事。<br>先把两种任务再放一遍。</p><blockquote><p>MacroTask: <strong>setTimeout</strong>, <strong>setInterval</strong>, <strong>setImmediate</strong>,<strong>I/O</strong>, <strong>UI rendering</strong><br>MicroTask: <strong>Promise</strong>, <strong>process.nextTick</strong>, <strong>Object.observe</strong>, <strong>MutationObserver</strong>, <strong>MutaionObserver</strong></p><ol><li><strong>整段代码作为宏任务</strong>进入主线程。</li><li>遇到setTimeout(), 回调函数注册后分发到宏任务Event Queue。// 回调函数注册？</li><li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。// 立即执行？</li><li>遇到console.log()，立即执行。</li><li>整段代码作为一次宏任务执行结束，进入微任务判断。Event Queue里有then函数，执行。</li><li>第二轮循环，开始新的宏任务。从宏任务Event Queue中去检查。发现setTimeout回调函数，立即执行。</li></ol></blockquote><p>到这里如果还不懂的话，可以到参考资料的<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">3</a>去看看，写的比较详细，我这里只是笔记形式简单总结下。</p><h4 id="Promise-和-process-nextTick-的先后顺序？-后续"><a href="#Promise-和-process-nextTick-的先后顺序？-后续" class="headerlink" title="Promise 和 process.nextTick() 的先后顺序？- 后续"></a>Promise 和 process.nextTick() 的先后顺序？- 后续</h4><p>这里就放到下一篇Event Loop再说吧。<br>– end –</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环</a><br>[2]. <a href="https://imweb.io/topic/5b148768d4c96b9b1b4c4ea1" target="_blank" rel="noopener">理解event loop（浏览器环境与nodejs环境）</a><br>[3]. <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二十天2019-01-20</title>
      <link href="/2019/01/20/2019-01-20/"/>
      <url>/2019/01/20/2019-01-20/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天下午就光玩游戏了~感觉需要放空自己啊，这是个玩游戏的好借口。但确实，今天下午看了一会儿电影，上午下午中间节点看完了《楚门的世界》（《The Truman Show》)。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzdce2a0h5j20ko0e9q61.jpg" alt><br><a id="more"></a><br>这个电影，在高中的时候就很受它影响，我指的影响，大概是你看完一部电影之后，很长时间都会去回味这部电影的味道，这部电影的含义。九九八十一难，最后的一个“释然”的态度？</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzdc9wydm5j20t00jknfv.jpg" alt><br>再然后看了《天气预报员》？这是部慢热的剧情，感觉还是没有看下去的劲头，挖个坑吧，改天再看。然后尝试看了部石原里美日剧，嗯，看了一部分就看不下去了。然后接着就游戏了。本来想LOL的，结果愣是没有劲头，开了一局游戏都退了，看来游戏真的是没什么好玩的。然后，玩CSGO，感觉还是比较考验临场发挥的，碰到敌我实力不相上下的时候，整个人的荷尔蒙就都上来了，感觉还是对于放空自己比较有效果的。一直玩到了，晚上8点啊。你可是也有一堆事情要做的啊，怎么玩起游戏来了。说不玩游戏的，真香。</p><p>–end–</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十九天2019-01-19</title>
      <link href="/2019/01/19/2019-01-19/"/>
      <url>/2019/01/19/2019-01-19/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天碰到一个需求，就是在element-ui表格中，列表操作这一列有下载和删除按钮，需要点击某一行的下载按钮，该行下载按钮显示正在下载的loading状态。这个看了下，应该只能是通过在<code>scope.row</code>对象中加属性，比如：<code>isDownloading</code>。这个就要求新属性<code>isDownloading</code>，能够具有响应式特性。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzc6japr32j20u00u00wg.jpg" alt><br><a id="more"></a></p><h3 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h3><ul><li>追踪变化<br>下面这张图，是基于Object.defineProperty 实现响应式的关键。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzc67hrsguj20xc0kuq38.jpg" alt></li></ul><p>不巧的是，<strong>受现代 JavaScript 的限制 (而且 Object.observe 也已经被废弃)，Vue 不能检测到对象属性的添加或删除。</strong><sup>[1]</sup></p><blockquote><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：<sup>[1]</sup></p><ul><li>添加响应式属性<br>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象</li><li>一个已有对象添加多个属性<br>// 代替 <code>Object.assign(this.someObject, { a: 1, b: 2 })</code><br>this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })</li></ul></blockquote><h3 id="vuejs-提供的Api"><a href="#vuejs-提供的Api" class="headerlink" title="vuejs 提供的Api"></a>vuejs 提供的Api</h3><blockquote><p>Vue.set( target, key, value )<br><strong>参数：</strong></p><p>{Object | Array} target<br>{string | number} key<br>{any} value<br><strong>返回值：</strong> 设置的值。<br><strong>用法：</strong> 向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 this.myObject.newProperty = ‘hi’)<br>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p></blockquote><p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>实践了一下，响应式的对象。在拉取list的forEach里新增一个响应式属性，<code>this.$set(this.list, &#39;isDownloading&#39;, false)</code>。然后就可以在操作前置true,操作后false。在列表的地方就可以用响应式的<code>isDownloading</code>属性了！</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96</a><br>[2]. <a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#Vue-set</a><br>——————————————————-end———————————————————–</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十八天2019-01-18</title>
      <link href="/2019/01/18/2019-01-18/"/>
      <url>/2019/01/18/2019-01-18/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天写了一上午的技术，写后台管理，感觉时间过得好快啊。<br>因为最近可能有需要部署一些应用在服务器上，所以最近又开始捡起Docker这个东西。今晚上复习了一下。具体的一些基本操作如下。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzb346tj5aj20u00u041d.jpg" alt><br><a id="more"></a></p><h3 id="docker-ubuntu"><a href="#docker-ubuntu" class="headerlink" title="docker-ubuntu"></a>docker-ubuntu</h3><ol><li><p>准备<br>Docker 要求 Ubuntu 系统的内核版本高于 3.10</p><blockquote><p>uname -r 查看内核版本</p></blockquote></li><li><p>安装</p><blockquote><p>wget -qO- <a href="https://get.docker.com/" target="_blank" rel="noopener">https://get.docker.com/</a> | sh</p></blockquote></li><li><p>测试安装</p><blockquote><p>docker run hello-world<br>‘hello-world’ 是一个镜像，没有的话会默认pull</p></blockquote></li></ol><ul><li>容器操作<blockquote><p>docker ps -a  // 列出所有创建的container</p></blockquote></li></ul><blockquote><p>docker ps -aq     // 列出所有创建的container 的ID</p></blockquote><blockquote><p>docker ps     // 列出正在运行的容器container</p></blockquote><blockquote><p>docker system df // 查看镜像、容器、数据卷所占用的空间</p></blockquote><blockquote><p>docker top <container names> // 查看容器的进程</container></p></blockquote><blockquote><p>docker stop <container names> // 停止容器（名字要全）</container></p></blockquote><blockquote><p>docker rm <container names> // 删除指定名容器</container></p></blockquote><ul><li>镜像操作<blockquote><p>docker image ls // 列出已经下载下来的镜像</p></blockquote></li></ul><blockquote><p>docker images // 列出所有所有镜像</p></blockquote><blockquote><p>docker rmi &lt; image ID&gt; // (注：ID列出前几位就行了)</p></blockquote><ol start="4"><li>拉取ubuntu<blockquote><p>docker pull ubuntu:16.04</p></blockquote></li></ol><ul><li>镜像操作<blockquote><p>docker run -t -i ubuntu:16.04 /bin/bash   // 运行容器 </p></blockquote></li></ul><blockquote><p>docker tag <image id> <repository>:&lt;新标签&gt; // ID只需要前几位就行</repository></image></p></blockquote><blockquote><p>docker port // 查看端口的绑定</p></blockquote><ol start="5"><li>构建镜像</li></ol><blockquote><p>cat Dockerfile </p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1].  <a href="http://www.runoob.com/docker/docker-container-usage.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-container-usage.html</a><br>[2].  <a href="https://yeasy.gitbooks.io/docker_practice/container/stop.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/container/stop.html</a><br>————————————————————————end———————————————————————-</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十七天2019-01-17</title>
      <link href="/2019/01/17/2019-01-17/"/>
      <url>/2019/01/17/2019-01-17/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天眼睛好困啊好困啊！最近可能脑子里事情太多了！还是早点睡的好！乱七八糟的事情先放一边。<br>今天看了Readability，准备用这个来做一些翻译相关的东西。感觉很厉害啊，这个东西。总之先粗略的console.log(),至于以后的什么并发什么的，这个等流量上去了之后再说，先把东西一个个做出来吧。总觉得Nodejs做的应该不会太差。明天记得预约体检！！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz9xokfsjbj20fj0avdkw.jpg" alt><br>就这样，又水了一天。早点睡吧。晚安。<br>–end</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十六天2019-01-16</title>
      <link href="/2019/01/16/2019-01-16/"/>
      <url>/2019/01/16/2019-01-16/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>恍恍惚惚，已经坚持写博客16天了，这是个“不小的成就”啊。回想过的这些天的博客，发现深度不够，停留在表面。博客写到表层的东西，肤浅的东西就浅尝辄止。这是个很大的问题。也是这些天博客记录下来之后发现的问题点。接下来就是对过去的整个东西进行一些梳理。自从博客开始记录生活以来。总共写了下面这几个事情：</p><ol><li>Object.assign（）// 上下已经完</li><li>new 操作符          //  简单地对原型和继承关系进行了复习</li><li>Vue源码解析        // 对于整个Vue源码的入口有了清晰的认识，意思就是，读源码开始上路</li></ol><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz8slqduvej20u00k041p.jpg" alt></p><h3 id="接下去"><a href="#接下去" class="headerlink" title="接下去"></a>接下去</h3><a id="more"></a><p>接下去可能还想开坑<strong>Vuex</strong>，这个坑，可能是因为在一些写法上，总觉得不够优雅，可能需要读一些开源的项目是怎么做的。可以的话，从很早就有的饿了么APP这个开始读一下，看他是怎么设计软件的。<br>也可能继续开坑<strong>Loadshjs</strong>，研究如何实现<strong>deep clone</strong><br>或者是研究Promise,以及<strong>Even Loop</strong><br>其次，一直以来很重要的事，就是网络基础知识，比如HTTP里面的RTT这种知识，都必须熟练掌握。<br>另外就是一直放了很久的<strong>Nodejs项目</strong>，改学会怎么写出好接口了。所以，这个地方也得去读<strong>Nodejs</strong>怎么学。<br>再深入一点，可能需要读一些开源的项目了。这些在github上面关注的时候，有star，所以，这个不用太心急。偶尔逛逛github就出来了。<br>这些都是很久的坑，暂时还不打算开。但是对于<strong>阅读源码</strong>是很有帮助的。毕竟是基础嘛。但是先开哪个坑，这个是有必要先想想，因为当务之急手下也还有一些bug没有解决。长久看，这种基础东西都是必须要懂的，不懂不行啊。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十五天2019-01-15</title>
      <link href="/2019/01/15/2019-01-15/"/>
      <url>/2019/01/15/2019-01-15/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><ul><li>国际化<br>今天对国际化进行了总结，作为第二个发表的人，我发现讲话水平有提高哦，讲的也有层次感了，思路也还算清晰。话说到国际化，确实啊，这个国际化怎么去做，怎么提取需要翻译的全部文本转为变量呢，这个前期工作很繁琐，实际翻译效率并不高。</li><li>手机端适配<br>最近在做手机端适配，要写两套样式。发现还是蛮繁琐的，不过还好，如果原来的页面是自适应的话，那么样式就会简单很多。</li><li>关于最近一些技术上新的路子<br>今早发现其实看Node.js一些源码解析片段可能会很快的就深入到js当中，比如Promise涉及到的SetTimeout()引出来的Even Loop等一些概念。其实可能没有想象中那么深奥，可能是不小心复杂化了。<br>–end<a id="more"></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四天2019-01-14</title>
      <link href="/2019/01/14/2019-01-14/"/>
      <url>/2019/01/14/2019-01-14/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天写了一天的适配移动端样式，发现还好，并不是原来想象中的那么难。早上公交上，也看了Vue的源码分析，渐入佳境吧，慢慢的也看的越来越没有障碍了。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz6i3s76j6j20kc0dtgrh.jpg" alt><br><a id="more"></a></p><h3 id="Vue源码-笔记"><a href="#Vue源码-笔记" class="headerlink" title="Vue源码-笔记"></a>Vue源码-笔记</h3><h4 id="Vue-构造函数"><a href="#Vue-构造函数" class="headerlink" title="Vue 构造函数"></a>Vue 构造函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Vue (options) &#123;</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp;</span><br><span class="line">    !(this instanceof Vue)) &#123;</span><br><span class="line">    warn(&apos;Vue is a constructor and should be called with the `new` keyword&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  this._init(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="_init 方法"></a>_init 方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Vue.prototype._init = function (options?: Object) &#123;</span><br><span class="line">   const vm: Component = this</span><br><span class="line">   // a uid</span><br><span class="line">   vm._uid = uid++</span><br><span class="line">   // a flag to avoid this being observed</span><br><span class="line">   vm._isVue = true</span><br><span class="line">   // merge options</span><br><span class="line">   if (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">     // optimize internal component instantiation</span><br><span class="line">     // since dynamic options merging is pretty slow, and none of the</span><br><span class="line">     // internal component options needs special treatment.</span><br><span class="line">     initInternalComponent(vm, options)</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">// 走这一步分析</span><br><span class="line">     vm.$options = mergeOptions(</span><br><span class="line">       resolveConstructorOptions(vm.constructor),</span><br><span class="line">       options || &#123;&#125;,</span><br><span class="line">       vm</span><br><span class="line">     )</span><br><span class="line">   &#125;</span><br><span class="line">   /* istanbul ignore else */</span><br><span class="line">   if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class="line">     initProxy(vm)</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">     vm._renderProxy = vm</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // expose real self</span><br><span class="line">   vm._self = vm</span><br><span class="line">   initLifecycle(vm)</span><br><span class="line">   initEvents(vm)</span><br><span class="line">   callHook(vm, &apos;beforeCreate&apos;)</span><br><span class="line">   initState(vm)</span><br><span class="line">   callHook(vm, &apos;created&apos;)</span><br><span class="line">   initRender(vm)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="Vue第一步"><a href="#Vue第一步" class="headerlink" title="Vue第一步"></a>Vue第一步</h4><ul><li>使用策略对象合并参数选项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export function resolveConstructorOptions (Ctor: Class&lt;Component&gt;) &#123;</span><br><span class="line">  let options = Ctor.options</span><br><span class="line">  if (Ctor.super) &#123;</span><br><span class="line">    const superOptions = Ctor.super.options</span><br><span class="line">    const cachedSuperOptions = Ctor.superOptions</span><br><span class="line">    const extendOptions = Ctor.extendOptions</span><br><span class="line">    if (superOptions !== cachedSuperOptions) &#123;</span><br><span class="line">      // super option changed</span><br><span class="line">      Ctor.superOptions = superOptions</span><br><span class="line">      extendOptions.render = options.render</span><br><span class="line">      extendOptions.staticRenderFns = options.staticRenderFns</span><br><span class="line">      extendOptions._scopeId = options._scopeId</span><br><span class="line">      options = Ctor.options = mergeOptions(superOptions, extendOptions)</span><br><span class="line">      if (options.name) &#123;</span><br><span class="line">        options.components[options.name] = Ctor</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return options</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p> Vue.super 用来处理继承</p></blockquote><h4 id="mergeOptions"><a href="#mergeOptions" class="headerlink" title="mergeOptions"></a>mergeOptions</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 1、引用依赖</span><br><span class="line">import Vue from &apos;../instance/index&apos;</span><br><span class="line">其他引用...</span><br><span class="line"></span><br><span class="line">// 2、合并父子选项值为最终值的策略对象，此时 strats 是一个空对象，因为 config.optionMergeStrategies = Object.create(null)</span><br><span class="line">const strats = config.optionMergeStrategies</span><br><span class="line">// 3、在 strats 对象上定义与参数选项名称相同的方法</span><br><span class="line">strats.el = </span><br><span class="line">strats.propsData = function (parent, child, vm, key)&#123;&#125;</span><br><span class="line">strats.data = function (parentVal, childVal, vm)</span><br><span class="line"></span><br><span class="line">config._lifecycleHooks.forEach(hook =&gt; &#123;</span><br><span class="line">  strats[hook] = mergeHook</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">config._assetTypes.forEach(function (type) &#123;</span><br><span class="line">  strats[type + &apos;s&apos;] = mergeAssets</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">strats.watch = function (parentVal, childVal)</span><br><span class="line"></span><br><span class="line">strats.props =</span><br><span class="line">strats.methods =</span><br><span class="line">strats.computed = function (parentVal: ?Object, childVal: ?Object)</span><br><span class="line">// 默认的合并策略，如果有 `childVal` 则返回 `childVal` 没有则返回 `parentVal`</span><br><span class="line">const defaultStrat = function (parentVal: any, childVal: any): any &#123;</span><br><span class="line">  return childVal === undefined</span><br><span class="line">    ? parentVal</span><br><span class="line">    : childVal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4、mergeOptions 中根据参数选项调用同名的策略方法进行合并处理</span><br><span class="line">export function mergeOptions (</span><br><span class="line">  parent: Object,</span><br><span class="line">  child: Object,</span><br><span class="line">  vm?: Component</span><br><span class="line">): Object &#123;</span><br><span class="line"></span><br><span class="line">  // 其他代码</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  const options = &#123;&#125;</span><br><span class="line">  let key</span><br><span class="line">  for (key in parent) &#123;</span><br><span class="line">    mergeField(key)</span><br><span class="line">  &#125;</span><br><span class="line">  for (key in child) &#123;</span><br><span class="line">    if (!hasOwn(parent, key)) &#123;</span><br><span class="line">      mergeField(key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function mergeField (key) &#123;</span><br><span class="line">    const strat = strats[key] || defaultStrat</span><br><span class="line">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class="line">  &#125;</span><br><span class="line">  return options</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容比较丰富，信息量有点大，慢慢来吧，暂时先到这，下次得加快进度看。<br>–end</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三天2019-01-13</title>
      <link href="/2019/01/13/2019-01-13/"/>
      <url>/2019/01/13/2019-01-13/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天一天上午做饭，下午看电影，一天吧~做了个肉炒腐竹，看电影《雨果》、《美丽心灵》。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz55fdzo0ej213u0mcnpe.jpg" alt><br><a id="more"></a></p><ol><li>不得不说，电影《雨果》中的场景构建的是非常的漂亮，不知道是色彩的原因还是其他，其中包含了很多的机械，一些机械钟类转轴，非常的精美，整个故事的价值观，取向，也非常的完美！不可多得的好电影啊。看完这部电影，才知道什么叫做法国式的浪漫，看来法国式的浪漫不只是与常见的爱情，还在于法国的电影中所体现出的人物的绅士。</li></ol><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz55ey1b66j213v0mhu0y.jpg" alt></p><ol start="2"><li>接下来的一部电影就是《美丽心灵》，这部电影183分钟，真的是看的人惊心动魄，不是各种悬疑故事，也不是各种打斗场面，而是来自内心的那种波澜起伏，主人公战胜精神病的坚强的意志，更赞的是电影标题所突出的人的心灵美。也是被片中的主人公的爱情喂饱了狗粮，甚至完全可以当做爱情片来看，“You are reason, you are all my reason”。但我更认为这部电影带给人的力量不仅限于此。不多说了，这电影一定推荐大家看。</li></ol><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz55fey6dtj217x0oqu0y.jpg" alt><br>–end</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十二天2019-01-12</title>
      <link href="/2019/01/12/2019-01-12/"/>
      <url>/2019/01/12/2019-01-12/</url>
      
        <content type="html"><![CDATA[<p>今天一天还算是过的比较快，看了两三部电影，感觉还好，虽然都是些老电影。早上起来也做饭了，时间刚到中午就做好了，时间点掐的很完美嘛。就是今天没有看书这点，不是很好。睡觉之前还是看看书吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz3zq6tzrlj20m80gotbq.jpg" alt><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十一天2019-01-11</title>
      <link href="/2019/01/11/2019-01-11/"/>
      <url>/2019/01/11/2019-01-11/</url>
      
        <content type="html"><![CDATA[<p>呦呦呦，上线了一个功能！所以今天回来的可能有点晚啊！今天临上线前又更新了一点需求，这个更新需求这个事情，对于有些场景来说，真的是不可避免啊，但是这个问题本身可能是在敲定最终需求的时候，需求不明确所导致的，但是整个过程怎么去优化，还是个很大的问题。所以，我觉得最后优化的空间还会很大的。好吧，好像说了很多的空话，但实际上是有点想吐槽下自己代码效率的，对于更新速度快的需求不能够很好的对代码进行解耦和快速的组装，这个说明在设计代码的时候还是很有必要加强训练！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyx7u0mosmj20qo0qot9y.jpg" alt><br>– end<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十天2019-01-10</title>
      <link href="/2019/01/10/2019-01-10/"/>
      <url>/2019/01/10/2019-01-10/</url>
      
        <content type="html"><![CDATA[<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>最近都没有不同的图片可以贴了，还需要找点图片啊。今天早上看了下怎么实现<code>new</code>操作符，感觉又回到了，原型和原型链的理解，<strong>“new”一个函数的时候，到底发生了什么</strong>？兜兜转转看来还是这个理解的不到位。说起理解不到位，让我想起了，今天写业务代码的时候，写到Vue渲染先后顺序这个地方，愣是卡了很久。看来这是对于整个的Vue运行机制还掌握的不够。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyygpxh56kj20hr0hr3yx.jpg" alt><br><a id="more"></a></p><h2 id="笔记-new操作符-上"><a href="#笔记-new操作符-上" class="headerlink" title="笔记-new操作符-上"></a>笔记-new操作符-上</h2><h3 id="“new”-发生了什么"><a href="#“new”-发生了什么" class="headerlink" title="“new” 发生了什么"></a>“new” 发生了什么</h3><h4 id="先来看看MDN上是怎么解释的？2"><a href="#先来看看MDN上是怎么解释的？2" class="headerlink" title="先来看看MDN上是怎么解释的？2"></a>先来看看MDN上是怎么解释的？<sup><a href="https://juejin.im/post/5bde7c926fb9a049f66b8b52" target="_blank" rel="noopener">2</a></sup></h4><ul><li>语法<br><code>new constructor[([arguments])]</code> // constructor：指定对象实例的类型的类或函数</li><li>描述<blockquote><p>当代码 new Foo(…) 执行时，会发生以下事情：</p></blockquote></li></ul><ol><li>一个继承自 Foo.prototype 的新对象被创建。</li><li>使用指定的参数调用构造函数 Foo ，并将 this 绑定到新创建的对象。new Foo 等同于 new Foo()，也就是没有指定参数列表，Foo 不带任何参数调用的情况。</li><li>由构造函数返回的对象就是 new 表达式的结果。如果构造函数没有显式返回一个对象，则使用步骤1创建的对象。（一般情况下，构造函数不返回值，但是用户可以选择主动返回对象，来覆盖正常的对象创建步骤）</li></ol><h4 id="网友总结的-1"><a href="#网友总结的-1" class="headerlink" title="网友总结的[1]"></a>网友总结的<sup>[1]</sup></h4><ol><li>创建了一个全新的对象。</li><li>这个对象会被执行[[Prototype]]（也就是<strong>proto</strong>）链接。</li><li>生成的新对象会绑定到函数调用的this。</li><li>通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上。</li><li>如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用会自动返回这个新的对象。</li></ol><p>这个是总结出来的，总觉得有点不科学啊。但目前好像是最好的办法，通过new的功能反推new的实现。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>使用 Function.prototype 属性将共享属性添加到以前定义的对象类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Car() &#123;&#125;</span><br><span class="line">car1 = new Car()</span><br><span class="line"></span><br><span class="line">Car.prototype.color = null</span><br><span class="line">console.log(car1.color) // null</span><br></pre></td></tr></table></figure></p><h2 id="怎么实现new"><a href="#怎么实现new" class="headerlink" title="怎么实现new"></a>怎么实现new</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 模拟实现 new 操作符</span><br><span class="line"> * @param  &#123;Function&#125; ctor [构造函数]</span><br><span class="line"> * @return &#123;Object|Function|Regex|Date|Error&#125;      [返回结果]</span><br><span class="line"> */</span><br><span class="line">function newOperator(ctor)&#123;</span><br><span class="line">    if(typeof ctor !== &apos;function&apos;)&#123;</span><br><span class="line">      throw &apos;newOperator function the first param must be a function&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    // ES6 new.target 是指向构造函数</span><br><span class="line">// new.target 后面会补充下</span><br><span class="line">    newOperator.target = ctor;</span><br><span class="line">    // 1.创建一个全新的对象，</span><br><span class="line">    // 2.并且执行[[Prototype]]链接</span><br><span class="line">    // 4.通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。</span><br><span class="line">    var newObj = Object.create(ctor.prototype);</span><br><span class="line">    // ES5 arguments转成数组 当然也可以用ES6 [...arguments], Aarry.from(arguments);</span><br><span class="line">    // 除去ctor构造函数的其余参数</span><br><span class="line">    var argsArr = [].slice.call(arguments, 1);</span><br><span class="line">    // 3.生成的新对象会绑定到函数调用的`this`。</span><br><span class="line">    // 获取到ctor函数返回结果</span><br><span class="line">    var ctorReturnResult = ctor.apply(newObj, argsArr);</span><br><span class="line">    // 小结4 中这些类型中合并起来只有Object和Function两种类型 typeof null 也是&apos;object&apos;所以要不等于null，排除null</span><br><span class="line">    var isObject = typeof ctorReturnResult === &apos;object&apos; &amp;&amp; ctorReturnResult !== null;</span><br><span class="line">    var isFunction = typeof ctorReturnResult === &apos;function&apos;;</span><br><span class="line">    if(isObject || isFunction)&#123;</span><br><span class="line">        return ctorReturnResult;</span><br><span class="line">    &#125;</span><br><span class="line">    // 5.如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`, `Error`)，那么`new`表达式中的函数调用会自动返回这个新的对象。</span><br><span class="line">    return newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实现，除去一些排除异常的条件，我理解的就几步，把对象复制过去，然后参数绑定过去，排除边界条件，整个咋一看并不是很难，但是很考验对整个操作符的掌握和熟悉程度。</p><h3 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h3><p>在构造方法调用中，<code>new.target</code>指向被<code>new</code>调用的构造函数，所以”new.”成为了一个虚拟上下文<sup>[2]</sup></p><ul><li>普通函数中<br>  <code>new.target</code>的值是undefined,可以检测一个函数是否是作为构造函数通过<code>new</code>被调用的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Foo() &#123;</span><br><span class="line">  if (!new.target) throw &quot;Foo() must be called with new&quot;;</span><br><span class="line">  console.log(&quot;Foo instantiated with new&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo(); // throws &quot;Foo() must be called with new&quot;</span><br><span class="line">new Foo(); // logs &quot;Foo instantiated with new&quot;， 检测到由new调用</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>构造函数中<br>稍微复杂点，这里暂时不讨论可以到<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new.target" target="_blank" rel="noopener">MDN</a>去看。<br>今天暂时讨论到这啊！明天还得上线呢！有点晚，早点睡觉吧。<pre><code>--end </code></pre>参考：<br>[1]. <a href="https://juejin.im/post/5bde7c926fb9a049f66b8b52" target="_blank" rel="noopener">面试官问：能否模拟实现JS的new操作符</a><br>[2]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener">new运算符</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第九天2019-01-09</title>
      <link href="/2019/01/09/2019-01-09/"/>
      <url>/2019/01/09/2019-01-09/</url>
      
        <content type="html"><![CDATA[<p>这几天很忙啊！！早上都去的很晚！早点睡觉早点睡觉！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fz0osud97tj20go0godg5.jpg" alt><br>–end<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八天2019-01-08</title>
      <link href="/2019/01/08/2019-01-08/"/>
      <url>/2019/01/08/2019-01-08/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天入职以来第一次迟到，作啊，8点43分有车，然后悠哉一会儿，52有车，悠哉穿个衣服，然后就9.20的车了。可能还有可能到公司，但是，出了隧道之后，公交每个红绿灯都停了，没有例外的巧合啊！期间还火车过道，这运气没谁了！最后10点10分才到公司。辛亏一个月可以迟到两次。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyzkpuhasnj20g40c3tas.jpg" alt></p><a id="more"></a><h3 id="笔记-Object-assign-下"><a href="#笔记-Object-assign-下" class="headerlink" title="笔记-Object.assign()-下"></a>笔记-Object.assign()-下</h3><h4 id="继承属性和不可枚举属性是不能拷贝的"><a href="#继承属性和不可枚举属性是不能拷贝的" class="headerlink" title="继承属性和不可枚举属性是不能拷贝的"></a>继承属性和不可枚举属性是不能拷贝的</h4><blockquote><p>原生情况下挂载在 <strong>Object</strong> 上的属性是不可枚举的，但是直接在 <strong>Object</strong> 上挂载属性 a 之后是可枚举的，所以这里必须使用 <code>Object.defineProperty</code>，并设置 enumerable: false 以及 writable: true, configurable: true。<sup><a href="https://juejin.im/post/5c31e5c4e51d45524975d05a" target="_blank" rel="noopener">3</a></sup></p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj = Object.create(&#123;foo: 1&#125;, &#123; // foo 是个继承属性。</span><br><span class="line">    bar: &#123;</span><br><span class="line">        value: 2  // bar 是个不可枚举属性。</span><br><span class="line">    &#125;,</span><br><span class="line">    baz: &#123;</span><br><span class="line">        value: 3,</span><br><span class="line">        enumerable: true  // baz 是个自身可枚举属性。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var copy = Object.assign(&#123;&#125;, obj);</span><br><span class="line">console.log(copy); // &#123; baz: 3 &#125;</span><br></pre></td></tr></table></figure><h5 id="检查是否可以枚举"><a href="#检查是否可以枚举" class="headerlink" title="检查是否可以枚举"></a>检查是否可以枚举</h5><blockquote><p>查看Object.assign 是否可枚举，使用 <strong>Object.getOwnPropertyDescriptor</strong> 或者 <strong>Object.propertyIsEnumerable</strong>（会检查给定的属性名是否直接存在于对象中,而不是在原型链上,并且满足  enumerable: true）。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 方法一：查看Object.assign()是否可以枚举</span><br><span class="line">Object.getOwnPropertyDescriptor(Object, &quot;assign&quot;);</span><br><span class="line">// 方法二</span><br><span class="line">Object.propertyIsEnumerable(&quot;assign&quot;); // false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 实现 Object.assign时要用</span><br><span class="line">Object.defineProperty(Object,  &apos;assign&apos;,&#123;</span><br><span class="line">...</span><br><span class="line"> writable: true, </span><br><span class="line"> enumerable: false,</span><br><span class="line"> configurable: true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="原始类型会被包装为对象"><a href="#原始类型会被包装为对象" class="headerlink" title="原始类型会被包装为对象"></a>原始类型会被包装为对象</h4><p>有时候可以利用这一点包装为对象<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var v1 = &quot;abc&quot;;</span><br><span class="line">var v2 = true;</span><br><span class="line">var v3 = 10;</span><br><span class="line">var v4 = Symbol(&quot;foo&quot;)</span><br><span class="line"></span><br><span class="line">var obj = Object.assign(&#123;&#125;, v1, null, v2, undefined, v3, v4); </span><br><span class="line">// 原始类型会被包装，null 和 undefined 会被忽略。</span><br><span class="line">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span><br><span class="line">console.log(obj); // &#123; &quot;0&quot;: &quot;a&quot;, &quot;1&quot;: &quot;b&quot;, &quot;2&quot;: &quot;c&quot; &#125;</span><br></pre></td></tr></table></figure></p><h4 id="异常会打断后续拷贝任务"><a href="#异常会打断后续拷贝任务" class="headerlink" title="异常会打断后续拷贝任务"></a>异常会打断后续拷贝任务</h4><blockquote><p>在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象<sup><a href="https://www.css88.com/archives/8319" target="_blank" rel="noopener">2</a></sup>。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 定义不能写</span><br><span class="line">var target = Object.defineProperty(&#123;&#125;, &quot;foo&quot;, &#123;</span><br><span class="line">    value: 1,</span><br><span class="line">    writable: false</span><br><span class="line">&#125;); // target 的 foo 属性是个只读属性。</span><br><span class="line"></span><br><span class="line">Object.assign(target, &#123;bar: 2&#125;, &#123;foo2: 3, foo: 3, foo3: 3&#125;, &#123;baz: 4&#125;);</span><br><span class="line">// TypeError: &quot;foo&quot; is read-only</span><br><span class="line">// 注意这个异常是在拷贝第二个源对象的第二个属性时发生的。</span><br><span class="line">console.log(target.bar);  // 2，说明第一个源对象拷贝成功了。</span><br><span class="line">console.log(target.foo2); // 3，说明第二个源对象的第一个属性也拷贝成功了。</span><br><span class="line">console.log(target.foo);  // 1，只读属性不能被覆盖，所以第二个源对象的第二个属性拷贝失败了。这里异常</span><br><span class="line">console.log(target.foo3); // undefined，异常之后 assign 方法就退出了，第三个属性是不会被拷贝到的。</span><br><span class="line">console.log(target.baz);  // undefined，第三个源对象更是不会被拷贝到的。</span><br></pre></td></tr></table></figure><h4 id="拷贝访问器"><a href="#拷贝访问器" class="headerlink" title="拷贝访问器"></a>拷贝访问器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: 1,</span><br><span class="line">  // get 访问器</span><br><span class="line">  get bar() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var copy = Object.assign(&#123;&#125;, obj); </span><br><span class="line">console.log(copy); // &#123; foo: 1, bar: 2 &#125;</span><br><span class="line">// copy.bar的值来自obj.bar的getter函数的返回值</span><br></pre></td></tr></table></figure><h5 id="拷贝所有自有属性的属性描述符（难点）"><a href="#拷贝所有自有属性的属性描述符（难点）" class="headerlink" title="拷贝所有自有属性的属性描述符（难点）"></a>拷贝所有自有属性的属性描述符（难点）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: 1,</span><br><span class="line">  get bar() &#123;</span><br><span class="line">    return 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">function completeAssign(target, ...sources) &#123;</span><br><span class="line">  sources.forEach(source =&gt; &#123;</span><br><span class="line">   // reduce 可能是不太好理解，下期可能需要出一个笔记</span><br><span class="line">    let descriptors = Object.keys(source).reduce((descriptors, key) =&gt; &#123;</span><br><span class="line">// 获取属性描述符（可以分为数据描述符和存取描述符均，属性的信息可以查看：Object.defineProperty）</span><br><span class="line">      descriptors[key] = Object.getOwnPropertyDescriptor(source, key);</span><br><span class="line">      return descriptors;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">    // Object.assign 默认也会拷贝可枚举的Symbols</span><br><span class="line">// Object.getOwnPropertySymbols() 方法返回一个给定对象自身的所有 Symbol 属性的数组。</span><br><span class="line">    Object.getOwnPropertySymbols(source).forEach(sym =&gt; &#123;</span><br><span class="line">      let descriptor = Object.getOwnPropertyDescriptor(source, sym);</span><br><span class="line">      if (descriptor.enumerable) &#123;</span><br><span class="line">        descriptors[sym] = descriptor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Object.defineProperties(target, descriptors);</span><br><span class="line">  &#125;);</span><br><span class="line">  return target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var copy = completeAssign(&#123;&#125;, obj);</span><br><span class="line">console.log(copy);</span><br><span class="line">// &#123; foo:1, get bar() &#123; return 2 &#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="MDN实现Obeject-assign"><a href="#MDN实现Obeject-assign" class="headerlink" title="MDN实现Obeject.assign()"></a>MDN实现Obeject.assign()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (typeof Object.assign != &apos;function&apos;) &#123;</span><br><span class="line">  // Must be writable: true, enumerable: false, configurable: true</span><br><span class="line">  Object.defineProperty(Object, &quot;assign&quot;, &#123;</span><br><span class="line">    value: function assign(target, varArgs) &#123; // .length of function is 2</span><br><span class="line">      &apos;use strict&apos;;</span><br><span class="line">      if (target == null) &#123; // TypeError if undefined or null</span><br><span class="line">        throw new TypeError(&apos;Cannot convert undefined or null to object&apos;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      var to = Object(target);</span><br><span class="line"></span><br><span class="line">      for (var index = 1; index &lt; arguments.length; index++) &#123;</span><br><span class="line">        var nextSource = arguments[index];</span><br><span class="line"></span><br><span class="line">        if (nextSource != null) &#123; // Skip over if undefined or null</span><br><span class="line">          for (var nextKey in nextSource) &#123;</span><br><span class="line">            // Avoid bugs when hasOwnProperty is shadowed</span><br><span class="line">// 直接使用 myObject.hasOwnProperty(..) 是有问题的，因为有的对象可能没有连接到 Object.prototype 上所以这里用上call()</span><br><span class="line">            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;</span><br><span class="line">              to[nextKey] = nextSource[nextKey];</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return to;</span><br><span class="line">    &#125;,</span><br><span class="line">    writable: true,</span><br><span class="line">    configurable: true</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今天就先很粗糙地写一下，明天再详细的谈一些细节部分吧。<br>– end</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1].  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()–MDN</a><br>[2]. <a href="https://www.css88.com/archives/8319" target="_blank" rel="noopener">JavaScript 中的对象拷贝</a><br>[3]. <a href="https://juejin.im/post/5c31e5c4e51d45524975d05a" target="_blank" rel="noopener">【进阶4-2期】Object.assign 原理及其实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第七天2019-01-07</title>
      <link href="/2019/01/07/2019-01-07/"/>
      <url>/2019/01/07/2019-01-07/</url>
      
        <content type="html"><![CDATA[<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>最近发现写代码的速度有提升，这说明写业务代码基础都差不多了，接下来就应该深究其内容了，该向代码底层的一些原理进行深入探究了，当然还是得夯实基础。之前看过一点<code>Lodashjs</code>的基础，但是有些关联性太强，没办法一下子联系起来，得慢慢的来看内容。今早上看了js中一个<code>Object.assign()</code>中的一些原理，发现其实并没有想象的那么难，但是手写起来可是非常考验功底，需要真正理解才能去写出浅拷贝的<code>Objecr.assign()</code>。下面来浅谈下。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyygpxh56kj20hr0hr3yx.jpg" alt></p><a id="more"></a><h3 id="笔记-Object-assign-–上"><a href="#笔记-Object-assign-–上" class="headerlink" title="笔记-Object.assign()–上"></a>笔记-Object.assign()–上</h3><ul><li>描述<blockquote><p>如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。<br>这里应该讲的是<figure class="highlight plain"><figcaption><span>的**陷阱**。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 拷贝问题</span><br><span class="line"></span><br><span class="line">```javascript?linenums</span><br><span class="line">// 1. 浅拷贝</span><br><span class="line">let obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;  // 源对象</span><br><span class="line"></span><br><span class="line">let obj2 = Object.assign(&#123;&#125;, obj1); // 目标对象</span><br><span class="line">console.log(JSON.stringify(obj2)); // &#123; a: 0, b: &#123; c: 0&#125;&#125;</span><br><span class="line">// 2. 改变源对象的属性值，拷贝的值并不会改变</span><br><span class="line">obj1.a = 1;</span><br><span class="line">console.log(JSON.stringify(obj1)); // &#123; a: 1, b: &#123; c: 0&#125;&#125; ，</span><br><span class="line">console.log(JSON.stringify(obj2)); // &#123; a: 0, b: &#123; c: 0&#125;&#125;</span><br><span class="line">// 3. 修改目标对象的属性</span><br><span class="line">obj2.a = 2;</span><br><span class="line">console.log(JSON.stringify(obj1)); // &#123; a: 1, b: &#123; c: 0&#125;&#125;</span><br><span class="line">console.log(JSON.stringify(obj2)); // &#123; a: 2, b: &#123; c: 0&#125;&#125;</span><br><span class="line">// 4. 改变了目标对象的值，因为复制了对源对象的引用，对目标对象属性的修改也能改源对象，如何解决这种问题？</span><br><span class="line">obj2.b.c = 3;</span><br><span class="line">console.log(JSON.stringify(obj1)); // &#123; a: 1, b: &#123; c: 3&#125;&#125;</span><br><span class="line">console.log(JSON.stringify(obj2)); // &#123; a: 2, b: &#123; c: 3&#125;&#125;</span><br><span class="line">// 5. 常用的深拷贝JSON.parse(JSON.stringify()),这个方法也有缺点</span><br><span class="line">obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;</span><br><span class="line">let obj3 = JSON.parse(JSON.stringify(obj1));</span><br><span class="line">obj1.a = 4;</span><br><span class="line">obj1.b.c = 4;</span><br><span class="line">console.log(JSON.stringify(obj3)); // &#123; a: 0, b: &#123; c: 0&#125;&#125;</span><br></pre></td></tr></table></figure></p></blockquote></li></ul><h4 id="合并对象（常用）"><a href="#合并对象（常用）" class="headerlink" title="合并对象（常用）"></a>合并对象（常用）</h4><blockquote><p>以下代码引自MDN</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var o1 = &#123; a: 1 &#125;;</span><br><span class="line">var o2 = &#123; b: 2 &#125;;</span><br><span class="line">var o3 = &#123; c: 3 &#125;;</span><br><span class="line"></span><br><span class="line">var obj = Object.assign(o1, o2, o3);</span><br><span class="line">console.log(obj); // &#123; a: 1, b: 2, c: 3 &#125;</span><br><span class="line">console.log(o1);  // &#123; a: 1, b: 2, c: 3 &#125;</span><br></pre></td></tr></table></figure><ul><li>注意目标对象自身也会改变。</li></ul><h4 id="合并具有相同属性的对象"><a href="#合并具有相同属性的对象" class="headerlink" title="合并具有相同属性的对象"></a>合并具有相同属性的对象</h4><blockquote><p>以下代码引自MDN</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var o1 = &#123; a: 1, b: 1, c: 1 &#125;;</span><br><span class="line">var o2 = &#123; b: 2, c: 2 &#125;;</span><br><span class="line">var o3 = &#123; c: 3 &#125;;</span><br><span class="line"></span><br><span class="line">var obj = Object.assign(&#123;&#125;, o1, o2, o3);</span><br><span class="line">console.log(obj); // &#123; a: 1, b: 2, c: 3 &#125;</span><br></pre></td></tr></table></figure><ul><li>注意后续参数覆盖问题</li></ul><h4 id="拷贝-symbol-类型的属性"><a href="#拷贝-symbol-类型的属性" class="headerlink" title="拷贝 symbol 类型的属性"></a>拷贝 symbol 类型的属性</h4><ul><li>描述<blockquote><p>Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。String类型和 Symbol 类型的属性都会被拷贝。</p></blockquote></li></ul><blockquote><p>以下代码引自MDN</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var o1 = &#123; a: 1 &#125;;</span><br><span class="line">var o2 = &#123; [Symbol(&apos;foo&apos;)]: 2 &#125;;</span><br><span class="line"></span><br><span class="line">var obj = Object.assign(&#123;&#125;, o1, o2);</span><br><span class="line">console.log(obj); // &#123; a : 1, [Symbol(&quot;foo&quot;)]: 2 &#125;    (cf. bug 1207182 on Firefox)</span><br><span class="line">Object.getOwnPropertySymbols(obj); // [Symbol(foo)]</span><br></pre></td></tr></table></figure><h3 id="先探究到这里吧"><a href="#先探究到这里吧" class="headerlink" title="先探究到这里吧"></a>先探究到这里吧</h3><p>针对深拷贝，需要使用其他方法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。常用的可能是<code>JSON.parse(JSON.stringify())</code>,这个方法也有缺点。</p><h4 id="知识扩展-简单对比"><a href="#知识扩展-简单对比" class="headerlink" title="知识扩展-简单对比"></a>知识扩展-简单对比</h4><ol><li>Object.assign()</li><li>JSON.parse(JSON.stringify())</li></ol><ul><li><code>2</code>，不适合<strong>复制循环引用对象</strong>,不适合<strong>复制对象方法</strong> </li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1].  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign()–MDN</a><br>[2]. <a href="https://www.css88.com/archives/8319" target="_blank" rel="noopener">JavaScript 中的对象拷贝</a><br>–end</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第六天2019-01-06</title>
      <link href="/2019/01/06/2019-01-06/"/>
      <url>/2019/01/06/2019-01-06/</url>
      
        <content type="html"><![CDATA[<h4 id="讲讲生活哈"><a href="#讲讲生活哈" class="headerlink" title="讲讲生活哈"></a>讲讲生活哈</h4><p>今天一天，早上起来之后就买了，汤骨和一些作料来做饭吃，真是很便宜，比在外面吃不知道要好多少啊。下面谈谈观影感受。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyx7u0mosmj20qo0qot9y.jpg" alt></p><a id="more"></a><p>然后就开始在B站看电影，毕竟也是买了年度大会员的哈，总要找点专门属于会员的来看哈，因为最近上映的大黄蜂电影，于是就挑这个前传看，就在刚才结束的变形金刚前三部的观看，据说第四部和第五部分与原创相差太大。嗯，于是就不继续看下去吧。但是变形金刚的前三部是真的很帅！看完第一步，你完全想象不到这居然是零几年拍摄的电影CG效果简直不能再好。连看了三部之后真是觉得很热血啊。里面的人物价值观也设置的很合理，<strong>为了不同的追求，永远没有对和错，只有对事情角度的不同，影响。</strong></p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyx7t096iwj20go096jtu.jpg" alt><br>这个周日也就一下子过去了。当然，上午还看了一大半的绣春刀，这部电影镜头什么的真的没话说，就是看到卢大哥被赏百户的时候，看不下去了，觉得，这是沈大人做的孽啊，为什么要为了一己私欲放走了魏忠贤，你觉得他会放过一个知道秘密的人？有时候真的是所有的错误，全在一瞬间决定。当我们遇到这种情况的时候，切记，一定要保持理智啊！因为<strong>摧毁你的不太可能是一个很明显的错误，是你最脆弱的时候犯的错误。</strong><br>今天谈感受就谈到这里吧！<br>–end<br><!--more--></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五2019-01-05</title>
      <link href="/2019/01/05/2019-01-05/"/>
      <url>/2019/01/05/2019-01-05/</url>
      
        <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天加班啊！真是一件不太舒服的事情，加班都是为了一件事，让我一个人上线负责主要的内容。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyw05v0dcuj20go0h1dgb.jpg" alt><br>有点累。早上起得有点晚，出门下着小雨，在公交上都没法看点知识类的东西。晃晃悠悠到公司。结果发现我和产品来的最早啊。坑爹啊。不过，加班中午大家一起出去饭馆吃，老板请客这点倒是蛮不错，今天的才也都蛮合胃口！就是鼻子有鼻炎，总感觉人多的时候不太好，鼻子有失体面，下次一定把鼻子这事搞定吧。坚持用就行。<br>下午顺利上线，真是ok。<br>—end</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四天 2019-01-04</title>
      <link href="/2019/01/04/2019-01-04/"/>
      <url>/2019/01/04/2019-01-04/</url>
      
        <content type="html"><![CDATA[<h5 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h5><p>以为项目会今天上线，结果，一天提了50-60个样式问题。虽然问题都很简单，但是真的是找的要命啊！下面讲讲今天这些问题的来源，讲八卦。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuz4phl2hj20go0godg5.jpg" alt></p><a id="more"></a><h4 id="放图"><a href="#放图" class="headerlink" title="放图"></a>放图</h4><p>看到这奖状没？够专业了吧？</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo4h4zhj20ma0grtov.jpg" alt></p><p>你以为就只有奖状？！<strong>错</strong>，还有实在的<strong>礼品</strong>！<br>第三名和第二名！如图：</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo489j1j208a08dgrj.jpg" alt></p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo3w6wvj208d08bq75.jpg" alt><br><strong>真是非常辛苦产品小姐姐了！</strong>然而，我下班还当着产品的面，抱怨加需求。也是非常可以的了。<br>第一名有两位！奖励手机壳！<br>本来想聊一聊今天看的一篇，如何优化代码的文章！明天还要早起，算了吧。聊点八卦。<br>–end</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三天2019-01-03</title>
      <link href="/2019/01/03/2019-01-03/"/>
      <url>/2019/01/03/2019-01-03/</url>
      
        <content type="html"><![CDATA[<h4 id="忙碌的一天"><a href="#忙碌的一天" class="headerlink" title="忙碌的一天"></a>忙碌的一天</h4><p>啊！国际化终于要上线了。总是改文案改样式，我都快改死了。这个译文的调整真不是改的。细化到空格，逗号，括号。<br>今天眼睛又是眯着回来的。不知道怎么了，是眼睛困了，会进行自我保护?所以眼睛会眯着？<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyts90gsxyj20k10k3gm4.jpg" alt><br>今天又看了原型和原型链的一片文章，发现真是永远也讲不完，<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```prototype```, 这种&quot;面向关联&quot;的模式真的是比较奇怪但是有中用。</span><br><span class="line">**列一下几个重要的等式吧。**</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">// 函数的构造器是Function</span><br><span class="line">Object.__proto__  === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// 函数字面量的__proto__ 指向Function</span><br><span class="line">(function () &#123;&#125;).__proto__ === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// 对象字面量</span><br><span class="line">(&#123;&#125;).__proto__  === Object.prototype // true</span><br><span class="line"></span><br><span class="line">// Object函数原型的__proto__指向 null</span><br><span class="line">Object.prototype.__proto__ === null</span><br><span class="line"></span><br><span class="line">// Function 函数的__proto__ 指向自身prototype</span><br><span class="line">Function.__proto__ === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// Function的prototype是一个对象，所以Function.prototype.__proto__指向Object.prototype</span><br><span class="line">Function.prototype.__proto__ === Object.prototype // true</span><br></pre></td></tr></table></figure></p><h3 id="放图！"><a href="#放图！" class="headerlink" title="放图！"></a>放图！</h3><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fytrfhpdmwj20eg0gamxv.jpg" alt></p><h5 id="图说明"><a href="#图说明" class="headerlink" title="图说明"></a>图说明</h5><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fytrxmsbzsj20eg0gbq6u.jpg" alt></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li><p>对象有属性<code>__proto__</code>(又可以称为隐式原型),指向该对象的构造函数的原型对象</p></li><li><p>方法(Function)除了有属性<code>__proto__</code>,还有属性<code>prototype</code>指向该方法的原型对象（包含所有实例共享的属性和方法叫做原型对象），原型对象也有属性<code>constructor</code>指回原构造函数。</p></li><li><p>先有Object.prototype（原型链顶端），Function.prototype继承Object.prototype而产生，最后，Function和Object和其它构造函数继承Function.prototype而产生</p></li></ol><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>今天就到这吧，这是个很好的开端！！</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><code>[1]</code> <a href="https://www.zhihu.com/question/34183746" target="_blank" rel="noopener">js中<strong>proto</strong>和prototype的区别和关系？</a><br><code>[2]</code> <a href="https://juejin.im/post/5c2c211e6fb9a049a62caf30" target="_blank" rel="noopener">JavaScript原型与继承的秘密</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二天2019-01-02</title>
      <link href="/2019/01/02/2019-01-02/"/>
      <url>/2019/01/02/2019-01-02/</url>
      
        <content type="html"><![CDATA[<h4 id="谈一天感受"><a href="#谈一天感受" class="headerlink" title="谈一天感受"></a>谈一天感受</h4><p>今天早上起来，发现这几天真的好冷啊。真是降温到极点了。扫兴的是，居然还牙疼，都怪假期三天吃的太多了，这智齿问题又出来了，哪天找个机会真的把它给拔了！<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fysmf2k2xqj20k30k574t.jpg" alt><br><a id="more"></a><br>今天转了一篇微信文章，要集赞然后获取《经济学人》98年到18年的文章。真是幸运，前几天还念叨着，要想办法拿下经济学人的文章合集就好。真是运气啊，今天就有机会获得了。新年开始，运气都这么好的吗？<br>今天把推荐码和红包都写好了，不容易啊，断断续续一个星期，中间还惨杂这user-server的URL修改，实际工作时间真的就是三四天。剩下的还有后台管理的一小部分。其中掺杂着一些YiCAT的国际化，国际化你可快点上线吧，天天各种细节，译文修改，真是琐碎的很。还特别占时间。完全是体力活，原谅我再一次吐槽这个译文的修改。从第一次拿到译文，到现在为止，我已经数不清，改了多少次译文了。真想写个接口。让他们自己去修改。省得自己天天改译文文案。吐槽就到这里吧。<br>这些天不知道眼睛怎么了，总是表现出很困的感觉，一直不自觉眯着眼睛。可能是没有早睡的原因。真是佩服公司同事，每天熬夜到一两点，精神气还十足。<br>– end</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年第一天-2019-01-01</title>
      <link href="/2019/01/01/2019-01-01/"/>
      <url>/2019/01/01/2019-01-01/</url>
      
        <content type="html"><![CDATA[<h3 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h3><p>以下内容都是一些碎碎念，生活、读后感、今天生活内容。<br>ps: 附上我的“专业插画师”提供的图片。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyrcswupyxj20jg0jggmk.jpg" alt><br><a id="more"></a></p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>新年第一天，昨晚在群里抢红包，一直热闹到很晚才睡。今早10点才慵懒的起来，起的有点晚。中午炸鸡腿，惨不忍睹。后来玩游戏，庸庸碌碌的一天就过去了。这是假期最后一天。希望晚上的时候能收收心看点书。顺带一提昨天晚上看了组件详解。</p><h4 id="读Vue-组件基础之组件通信-《Vue-js实战》"><a href="#读Vue-组件基础之组件通信-《Vue-js实战》" class="headerlink" title="读Vue 组件基础之组件通信 -《Vue js实战》"></a>读Vue 组件基础之组件通信 -《Vue js实战》</h4><h5 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h5><p>组件的复用，复用离不开值得传递。父子组件，兄弟组件相互之间的传值。基本的有<code>props</code>，父组件传递给子组件，子组件通过<code>$emit()</code>、<code>v-on:</code> 来将值通知父组件。不太常用的有<code>$parent</code>(书中提到可以通过此通信访问父实例或组件），在组件中引用父组件，<code>$child</code>,父组件引用子组件。《Vue js实战》书中提到了，通过利用实例化一个空的<code>BUS</code>组件起到<code>总线</code>的作用，这种方法还挺新鲜。另外，组件通信时还有slot的内容分发，slot默认名称是可以和具名slot一起用的。相互之间并不影响。好吧，之前用的时候，总是会不自觉给slot取名字。理解的不够深刻。</p><h5 id="高级组件"><a href="#高级组件" class="headerlink" title="高级组件"></a>高级组件</h5><ol><li>组件可以递归自己。</li><li>异步组件。</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>总感觉这种组件通信方式还有待于改善，应该多读一下开源的一些组件是怎么写出来的。因为上次研究element-UI的时候并没有看它运用这些（指的是通信手段，也可能是我忽略？）但是表现出了很强的可扩展性。很值得学习。包括其中CSS中的书写。</p><h5 id="插播"><a href="#插播" class="headerlink" title="插播"></a>插播</h5><p>元旦放假头一天，买了100的零食，一个大箱子，有优惠。现在好像吃的牙有点疼。作啊。明明要减肥的人。</p><h5 id="发现好的视频"><a href="#发现好的视频" class="headerlink" title="发现好的视频"></a>发现好的视频</h5><p>今天看B站排行榜的时候发现一个点评动漫的UP主，LexBurner?“艺名”：蕾丝。他的视频看动漫的角度还真是蛮特别，应该是有大量的漫画番剧的基础，能有空看这么多视频和漫画，这人真是不简单。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年最后一天</title>
      <link href="/2018/12/31/2018-%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
      <url>/2018/12/31/2018-%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>2018年就要拜拜了。<br>早上9点起来的也不算太晚。折腾了一会儿博客样式之（发现是又拍云开启浏览器缓存的锅）。<br>今天打算看一些书度过。额，还是先玩会儿游戏放空下？不然感觉不太想看书。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fypoomy5vaj20qq0cr0ub.jpg" alt><br>放张图片吧，可能就是需要这样来自嘲。<br>– end<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matrix</title>
      <link href="/2018/03/28/matrix/"/>
      <url>/2018/03/28/matrix/</url>
      
        <content type="html"><![CDATA[<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><blockquote><p>写一个函数，输入数字 N,返会一个 N*N 的矩阵(环序)。</p></blockquote><a id="more"></a><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// matrix(2)</span></span><br><span class="line"><span class="comment">//      [[1, 2],</span></span><br><span class="line"><span class="comment">//       [3, 4]]</span></span><br><span class="line"><span class="comment">// matrix(3)</span></span><br><span class="line"><span class="comment">//      [[1, 2, 3],</span></span><br><span class="line"><span class="comment">//       [8, 9, 4],</span></span><br><span class="line"><span class="comment">//       [7, 6, 5]]</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    results.push([]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startColumn = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endColumn = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startRow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endRow = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (startColumn &lt;= endColumn &amp;&amp; startRow &lt;= endRow) &#123;</span><br><span class="line">    <span class="comment">//顶列开头到结尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startColumn; i &lt;= endColumn; i++) &#123;</span><br><span class="line">      results[startRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startRow++;</span><br><span class="line">    <span class="comment">//最右列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startRow; i &lt;= endRow; i++) &#123;</span><br><span class="line">      results[i][endColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endColumn--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底部行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endColumn; i &gt;= startColumn; i--) &#123;</span><br><span class="line">      results[endRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endRow--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start 列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endRow; i &gt;= startRow; i--) &#123;</span><br><span class="line">      results[i][startColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startColumn++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = <span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix 函数已定义'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="keyword">typeof</span> matrix).toEqual(<span class="string">'function'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 2x2 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">2</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">2</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">4</span>, <span class="number">3</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 3x3 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">3</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 4x4 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">4</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">4</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">5</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">11</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">6</span>]);</span><br><span class="line">  expect(m[<span class="number">3</span>]).toEqual([<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 编程 </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reversint</title>
      <link href="/2018/03/19/reversInt/"/>
      <url>/2018/03/19/reversInt/</url>
      
        <content type="html"><![CDATA[<h3 id="整数反转-reversint"><a href="#整数反转-reversint" class="headerlink" title="整数反转(reversint)"></a>整数反转(reversint)</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>给你一个带符号的整数，返回这些数值的倒序</p></blockquote><blockquote><p>//例如</p></blockquote><blockquote><p>// reverseint(1243) === 3421</p></blockquote><a id="more"></a><blockquote><p>// reverseint(123) === 321</p></blockquote><blockquote><p>// reverseint(-12) === -21</p></blockquote><blockquote><p>// reverseint(-10) === -1</p></blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reversed = n</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(reversed) * <span class="built_in">Math</span>.sign(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (n =</span><br><span class="line">    <span class="built_in">Math</span>.abs(n)</span><br><span class="line">      .toString()</span><br><span class="line">      .split(<span class="string">''</span>)</span><br><span class="line">      .reverse()</span><br><span class="line">      .join(<span class="string">''</span>) * <span class="built_in">Math</span>.sign(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 编程 </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 仓库合并（实例）</title>
      <link href="/2018/03/05/git-progress/"/>
      <url>/2018/03/05/git-progress/</url>
      
        <content type="html"><![CDATA[<p>最近想着整理一下 github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地 A 仓库中 clone B 再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。</p><a id="more"></a><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>合并两个库/提交记录</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>本地环境 Windows os ,所有均在命令 git bash 中操作</li><li>远程仓库 A,如图左，远程仓库 B,如图右。</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/NWbZygn.png" alt="enter description here"></td><td><img src="https://i.imgur.com/FidxLZc.png" alt="enter description here"></td></tr></tbody></table><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li>clone 到本地<br><code>git clone https://github.com/lmislm/Code_Repository.git</code></li><li><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">添加远程仓库</a></p><ul><li><p><code>cd Code_Repository/</code></p></li><li><p><code>git remote add -f CSS_Ex git://github.com/lmislm/CSS_Ex.git</code></p><ul><li>添加一个新的远程仓库，指定一个简单的名字，以便将来引用，运行 <code>git remote add [shortname] [url]：</code></li></ul></li></ul><ul><li><p><code>git merge --strategy ours --no-commit CSS_Ex/master</code> + 可能报错<code>fatal: refusing to merge unrelated histories</code>忽略就行。 + <a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener"><strong>ours</strong></a> 选项强制冲突由‘our’版本自动解决，即：来自其他分支树不会影响到我们这边映射到合并的结果。 + &gt; 即忽略冲突只保留<strong>Code_Repository</strong>文件树并且把 <strong>CSS_Ex</strong>的历史记录合并进来。</p></li><li><p><code>git remote -v</code> + 此命令将全部列出远程仓库。检查一下是否存在</p></li><li><p><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + <code>--prefix=css/</code>：这里 Code_Repository/目录下有 css/子目录 + &gt; –prefix 用于指定文件树读取后保存的路径，相对于当前路径并且一定要追加 /<br>–no-commit 的原因，<a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">该选项会在合并解析完成后中断，停留在最后的提交步骤之前。</a></p><ul><li><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + &gt; -u 是说在读取后更新 index，使得 working tree 与 index 保持同步 + <code>git commit -m &quot;finish,迁移CSS_Ex到了Code_Repository/css/下&quot;</code> + <code>git add .</code> + <code>git commit -m &quot;迁移完成&quot;</code> + <code>git push -u origin master</code></li></ul></li></ul></li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/QNW1boS.png" alt="enter description here"></td></tr></tbody></table><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><ul><li>在操作完成之后确实实现了合并到同一个仓库，但是<strong>并没有预期的结果</strong>，没有完美的合并提交记录。多次操作之后，将一些零散的东西合并到了同一个仓库。但是原来的仓库还是存在的。如果将原来零散的仓库删除。可以看到结果中，<code>a year ago</code>，历史提交记录确实存在，但是其他<code>flex_Ex</code>显示的却是在进行这个合并操作时提交的时间。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">如何用 Git 合并两个库（合并历史记录，解决冲突／改写路径）</a><br><a href="https://mlichtenberg.wordpress.com/2015/08/28/merging-git-repositories-and-preserving-history/" target="_blank" rel="noopener">Merging Git Repositories and Preserving History</a><br><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener"> Git 基础 - 远程仓库的使用</a><br><a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener">MERGE STRATEGIES​ - ours</a><br><a href="https://git-scm.com/docs/git-read-tree" target="_blank" rel="noopener">git read-tree</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>undefined behavior in c</title>
      <link href="/2018/01/06/undefined%20behavior%20in%20c/"/>
      <url>/2018/01/06/undefined%20behavior%20in%20c/</url>
      
        <content type="html"><![CDATA[<h2 id="undefined-behavior（未定义行为）"><a href="#undefined-behavior（未定义行为）" class="headerlink" title="undefined behavior（未定义行为）"></a>undefined behavior（未定义行为）</h2><ul><li>思考一下下面这段代码的输出会是什么（答案在后面）？</li><li>这段代码运行过程是怎样？</li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ(y) (y*y)  <span class="comment">//define 1</span></span></span><br><span class="line"><span class="comment">//#define SQ(y) ((y)*(y))   //define 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%-2d"</span>,SQ(i++));</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-只试了两种编译器</span></span><br><span class="line"><span class="comment"> *所用编译器：gcc</span></span><br><span class="line"><span class="comment"> *       用define  1 : 结果1  9  15</span></span><br><span class="line"><span class="comment"> *       用define 2 ：结果1  9  15</span></span><br><span class="line"><span class="comment"> *其他编辑器：</span></span><br><span class="line"><span class="comment"> *      用define  1 : 结果2  12  30</span></span><br><span class="line"><span class="comment"> *      用define  2: 结果1  9  15</span></span><br><span class="line"><span class="comment"> *      。。。。。</span></span><br></pre></td></tr></table></figure><h3 id="问题：为什么得到的结果不一样？"><a href="#问题：为什么得到的结果不一样？" class="headerlink" title="问题：为什么得到的结果不一样？"></a>问题：为什么得到的结果不一样？</h3><ul><li>看上面的对比，是因为编辑器的原因导致的??</li><li>一开始某本书上的答案是 2 12 30 ，我很纳闷，开头第一个数居然是 2，于是一番折腾查阅了一下别人的看法。</li></ul><h3 id="我认为的原因是：undefined-behavior"><a href="#我认为的原因是：undefined-behavior" class="headerlink" title="我认为的原因是：undefined behavior"></a>我认为的原因是：undefined behavior</h3><ul><li>什么是：undefined behavior（未定义行为）呢？如下。<blockquote><p>在计算机程序设计中，未定义行为（英语：undefined behavior) 是指行为不可预测的计算机代码。这是一些编程语言的一个特点，最有名的是在 C 语言中。在这些语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。……. 因此，这种未定义行为一般应被视为 bug。<br>—来源：<a href="https://zh.wikipedia.org/wiki/%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">中文维基百科</a></p></blockquote></li></ul><h3 id="还有哪些-undefined-behavior（未定义行为）"><a href="#还有哪些-undefined-behavior（未定义行为）" class="headerlink" title="还有哪些 undefined behavior（未定义行为）"></a>还有哪些 undefined behavior（未定义行为）</h3><blockquote><p>偷懒：)。此处省略一些例子，因为 wiki 上都有一些典型例子。中文访问不了的话，英文在这，<a href="https://en.wikipedia.org/wiki/Undefined_behavior" target="_blank" rel="noopener">点我</a>。</p></blockquote><h2 id="如何解释这段代码"><a href="#如何解释这段代码" class="headerlink" title="如何解释这段代码"></a>如何解释这段代码</h2><ul><li>输出 1 9 15<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，i=1，i++=2，1 _ 2 = 2， 再 i++=3<br><strong>第二次循环时</strong>，i=3，i++=4，3 _ 4 = 12，再 i++=5<br><strong>第三次循环时</strong>，i=5，i++=5, 5 * 6 = 30，再 i++=6<br>//进入 i&lt;=5 判断,值为假，退出循环</li></ul><hr><ul><li>输出 2 12 30<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，首先 i=1, 1 _ 1 = 1，i++=2，再 i++=3<br><strong>第二次循环时</strong>，首先 i=3, 3 _ 3 = 9，i++=4，再 i++=5<br><strong>第三次循环时</strong>，首先 i=5, 5 * 5 = 25, i++=6，再 i++=7<br>// i=7，所以退出循环。<blockquote><p>首先 i++是先运算，后加。对于 SQ(i++)来说，其实质是((i++)*(i++))。在后加运算符是在整个运算完成之后，才进行加 1 操作的。</p></blockquote></li></ul><p><em>多问和讨论总是有好处的，继续保持：）</em><br>参考：<br>[1]<a href="https://zhidao.baidu.com/question/561702258825816084.html" target="_blank" rel="noopener">c语言的代参宏定义，#define sq(y) ((y)*(y))….输出应该是2 12 30才对啊？？</a>[2]<a href="https://www.zhihu.com/question/36940781/answer/69683475" target="_blank" rel="noopener">int i=5 ；printf(“%d”,i++,++i)；为什么输出 6?</a></p><p>[3]<a href="http://www.cnblogs.com/yezhenhan/archive/2011/11/05/2236973.html" target="_blank" rel="noopener">c语言中define的用法</a><br>进阶（可不看）：<br><a href="https://wenku.baidu.com/view/2bd97e6bdd36a32d737581b4.html" target="_blank" rel="noopener">关于宏定义的 ppt</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell的正则表达式</title>
      <link href="/2017/07/20/shell%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/07/20/shell%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><ol><li>正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据</li><li>正则表达式与通配符的区别 1.正则表达式–匹配“文件”符合条件的字符串–&gt;&gt;包含匹配 2.通配符—–匹配符合条件的“文件”名——–&gt;&gt;完全匹配 3.为什么存在，通配符、正则表达式？<a id="more"></a><ul><li>ls、find、cp（操作文件的一些命令）不支持正则表达式，只能用通配符。</li><li>grep、awk、sed（操作字符串的一些命令）支持正则表达式。</li><li>为什么所有的不都支持正则表达式？</li></ul></li><li>正则表达式<ol><li>基础正则</li></ol></li></ol><table><thead><tr><th>元<strong>字</strong>符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>.</strong></td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>^</strong></td><td>匹配行首，例：^he 匹配以 he 开头的行</td></tr><tr><td><strong>$</strong></td><td>匹配行尾，例：he$匹配以 he 为结尾的字符串</td></tr><tr><td><strong>[ ]</strong></td><td>匹配括号中指定的任意一个字符，<strong>只匹配一个</strong> 例：[a-z]匹配 a-z 中的任意一个字符，[0-9][a-z]表示“连续匹配”</td></tr><tr><td><strong>[^]</strong></td><td>匹配除中括号字符外任意一个字符，例：^[0-9]匹配任意一位非数字的字符</td></tr><tr><td>\</td><td>转义符，取消特殊字符的含义</td></tr><tr><td>\ { n\ }</td><td>表示前面字符<strong>恰好</strong>出现 n 次</td></tr><tr><td>\ { n,\ }</td><td>表示前面字符出现<strong>不小于</strong>n 次</td></tr><tr><td>\ {n,m\ }</td><td>表示其前面字符<strong>至少</strong>出现 n 次</td></tr></tbody></table><ol start="2"><li>扩展正则</li></ol><hr><h2 id="正则表达式（基础正则）"><a href="#正则表达式（基础正则）" class="headerlink" title="正则表达式（基础正则）"></a><strong>正则表达式（基础正则）</strong></h2><h3 id="“-“"><a href="#“-“" class="headerlink" title="“ * “"></a>“ * “</h3><ol><li>“<code>*</code>“星号——–不同于通配符中的匹配所有内容。<ul><li>前一个字符匹配<strong>0 次</strong>，或者任意多次。<ul><li><code>a*</code> - - 匹配<strong>所有内容</strong>，包括<strong>空白行</strong>。</li><li><code>aa*</code> - - 匹配至少包含有一个 a 的行。</li><li><code>aaa*</code> - -匹配至少包含两个连续的 a 的字符串。</li></ul></li></ul></li></ol><h3 id="“-“-1"><a href="#“-“-1" class="headerlink" title="“ . “"></a>“ . “</h3><ol start="2"><li>“<code>.</code>“——–和通配符中”?”类似。<ul><li>匹配<strong>除了换行符</strong>外任意字符<ul><li><code>s..d</code> - - 匹配之间两个字符的单词。</li><li><code>s.*d</code> - - 匹配之间的任意字符。</li><li><code>.*</code> - - 匹配所有内容。</li></ul></li></ul></li></ol><h3 id="“-“、”-“、”-“、”-“"><a href="#“-“、”-“、”-“、”-“" class="headerlink" title="“ ^ “、” $ “、” [] “、” [ ^ ] “"></a>“ ^ “、” $ “、” [] “、” [ ^ ] “</h3><ol start="3"><li>“<code>^</code>“、”<code>$</code>“、”<code>[]</code>“、”<code>[^]</code>“<ul><li><code>^</code> - - 匹配行首。</li><li><code>$</code> - - 匹配行尾。</li><li><code>[]</code> - - 匹配括号中指定字符串中的任意字符，<strong>只匹配一个</strong>。</li><li><code>[^]</code> - - 匹配除中括号的字符以外的任意一个字符。</li></ul></li></ol><h3 id="n-、-n-、-n-m"><a href="#n-、-n-、-n-m" class="headerlink" title="{n\ }、{n,\ }、{n,m\ }"></a>{n\ }、{n,\ }、{n,m\ }</h3><ol start="4"><li>“<code>\{n\}</code>”、”<code>\{n,\}</code>“、”<code>\{n,m\}</code>“<ul><li><code>\{n\}</code> - - 例：<code>a\{3\}</code> 匹配 a 字母连续出现三次的字符串（连续四次以上也会被匹配到，所以在该匹配首尾加定界符能精确匹配到）</li><li><code>\{n,\}</code> - - 例：<code>\{n,\}</code> 前面字符出现不少于 n 次</li><li><code>\{n,m\}</code> - - 例：<code>sa\{1,3}i</code> 匹配在字母 s 和字母 i 之间最少一个 a，最多三个 a</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>question-check</title>
      <link href="/2017/05/27/check-question/"/>
      <url>/2017/05/27/check-question/</url>
      
        <content type="html"><![CDATA[<p>质量反馈调查展示界面</p><a id="more"></a><ul><li>编辑</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b69424e5.jpg" alt="编辑问卷" title="编辑问卷"></p><ul><li>管理</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b8f297d9.jpg" alt="问卷管理" title="问卷管理"></p><ul><li>答题<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32bfe08f31.jpg" alt="答题" title="问卷调查"></li><li>统计数据<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32c1f911b8.jpg" alt="enter description here" title="统计数据"></li><li>题库</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32c32be3ba.jpg" alt="题库" title="题库"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 展示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acm基础--POJ No.1003 Hangover</title>
      <link href="/2017/05/25/acm00/"/>
      <url>/2017/05/25/acm00/</url>
      
        <content type="html"><![CDATA[<h2 id="关于运算符号的思考（acm-热身）"><a href="#关于运算符号的思考（acm-热身）" class="headerlink" title="关于运算符号的思考（acm 热身）"></a>关于运算符号的思考（acm 热身）</h2><h3 id="POJ-No-1003-Hangover"><a href="#POJ-No-1003-Hangover" class="headerlink" title="POJ No.1003 Hangover"></a>POJ No.1003 Hangover</h3><blockquote><p>input：<br>1.00<br>3.71<br>output：<br>3 card(s)<br>61 card(s)</p></blockquote><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">float</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;b)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0.0</span>)<span class="keyword">break</span>;</span><br><span class="line">    a=<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;a&lt;b;++n) a+=<span class="number">1.0</span>/(<span class="keyword">float</span>)(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span> card(s) \n<span class="string">",n-1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="逗号运算符号"><a href="#逗号运算符号" class="headerlink" title="逗号运算符号"></a>逗号运算符号</h4><blockquote><p><strong><em>while(scanf(“%f”,&amp;b)==1)</em></strong><br>compare to<br><strong><em>while(scanf(“%f”,&amp;b),b)</em></strong><br>结束条件等价于<strong><em>b!=0</em></strong>即使 b 的值为 0.000001f,0.00001<br>f!=0 为真，也不会结束循环。所以写法(*，b）非常重要</p></blockquote><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><blockquote><p>直接用(float)转换为 int 类型，简单点就写成<br><strong><em>for(n=1;al；)</em></strong></p></blockquote><h4 id="减少变量"><a href="#减少变量" class="headerlink" title="减少变量"></a>减少变量</h4><blockquote><p>省略 int 类型将 n 写入 main（），但是有的编译器并不能通过。所以为了简单清晰，还是不要用的好。</p></blockquote><h4 id="尽量多用-for-循环"><a href="#尽量多用-for-循环" class="headerlink" title="尽量多用 for 循环"></a>尽量多用 for 循环</h4><p><strong>直接缩成一行</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中包含n省略在main</span><br><span class="line">main(n)</span><br><span class="line">&#123;</span><br><span class="line">float b;</span><br><span class="line">for(;scanf(&quot;%f&quot;,&amp;b),b;printf(&quot;%d card(s)\n&quot;,n-1))</span><br><span class="line">for(n=1;b&gt;0;)b-=1./++n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先算法-部分和问题</title>
      <link href="/2017/05/24/DFS-%E9%83%A8%E5%88%86%E5%92%8C/"/>
      <url>/2017/05/24/DFS-%E9%83%A8%E5%88%86%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。"><a href="#给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。" class="headerlink" title="给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。"></a>给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。</h3><a id="more"></a><p>限制条件</p><ul><li>1≤ n ≤20</li><li>-10^8^ ≤ a~i~ ≤ 10^8^</li><li>-10^8^ ≤ k ≤ 10^8^<br>输入</li><li>n=4</li><li>a={1,2,4,7}</li><li>k=13<br>输出<br>yes （13 = 2 + 4 + 7）</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="利用最简单的递归，可以先画出深度优先的树"><a href="#利用最简单的递归，可以先画出深度优先的树" class="headerlink" title="利用最简单的递归，可以先画出深度优先的树"></a>利用最简单的递归，可以先画出深度优先的树</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span>c++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNUM = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">int</span> arr[MAXNUM];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_data</span><span class="params">(<span class="keyword">int</span> *n, <span class="keyword">int</span> *k, <span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"n = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a = &#123;"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; *n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"k = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//已经从前n项得到了和sum，然后对于i项之后的分支</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果前n项都计算过了，则返回sum是否与k相等</span></span><br><span class="line">    <span class="keyword">if</span> (i == n) <span class="keyword">return</span> sum == k;</span><br><span class="line"><span class="comment">//    不加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//    加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum+arr[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 无论是否加上a[i],都不能凑成k就返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dfs(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    input_data(&amp;n, &amp;k, arr);</span><br><span class="line"></span><br><span class="line">    solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steps</title>
      <link href="/2017/05/21/poj%20No.2590/"/>
      <url>/2017/05/21/poj%20No.2590/</url>
      
        <content type="html"><![CDATA[<h2 id="POj-No-2590-Steps"><a href="#POj-No-2590-Steps" class="headerlink" title="POj No.2590 Steps"></a>POj No.2590 Steps</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在数轴上的两点之间，按照下面规则移动。</p><ul><li>每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差 1。</li><li>每一步和最后一步的步幅必须是 1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。<a id="more"></a></li></ul><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>测试数据个数 n、开始地点 x 以及终点 y（0&lt;=x&lt;=y&lt;2^31^),格式如下：</p><blockquote><p>n<br>x~1~ y~1~<br>x~2~ y~2~<br>…<br>x~n~ y~n~</p></blockquote><ul><li><p>输入</p><blockquote><p>3<br>45 48<br>45 49<br>45 50</p></blockquote></li><li><p>输出</p><blockquote><p>3<br>3<br>4</p></blockquote></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> step, i,len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(step=<span class="number">0</span>;step&lt;<span class="number">20</span>;++step)&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//求得一半为止的步数</span></span><br><span class="line"><span class="comment">//步数是奇数就加1</span></span><br><span class="line"><span class="keyword">int</span> mid=step/<span class="number">2</span>+step%<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出1+2+3+...到中间地点为止的合计</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mid;++i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从中间地点开始计算...+3+2+1</span></span><br><span class="line"><span class="keyword">for</span>(i=step/<span class="number">2</span>;i&gt;<span class="number">0</span>;--i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2d step(s)...%3d\n"</span>,step,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><blockquote><p>画图找规律</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj No.3062 Celebrity jeopardy</title>
      <link href="/2017/05/20/poj%20No.3062/"/>
      <url>/2017/05/20/poj%20No.3062/</url>
      
        <content type="html"><![CDATA[<h2 id="Celebrity-jeopardy"><a href="#Celebrity-jeopardy" class="headerlink" title="Celebrity jeopardy"></a>Celebrity jeopardy</h2><h3 id="直接输出的数字"><a href="#直接输出的数字" class="headerlink" title="直接输出的数字"></a>直接输出的数字</h3><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;~c;)</span><br><span class="line">    &#123;</span><br><span class="line">        c = getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 编程 </tag>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewars_Replace With Alphabet Position</title>
      <link href="/2017/05/07/codewars_Replace%20With%20Alphabet%20Position/"/>
      <url>/2017/05/07/codewars_Replace%20With%20Alphabet%20Position/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>这是一道字符串操作的题。题目如下：</p><a id="more"></a><blockquote><p>Welcome.<br>In this kata you are required to, given a string, replace every letter with its position in the alphabet. If anything in the text isn’t a letter, ignore it and don’t return it. a being 1, b being 2, etc.<br>As an example:</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alphabet_position(&quot;The sunset sets at twelve o&apos; clock.&quot;)</span><br><span class="line"></span><br><span class="line">Should return &quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11&quot; (As a string.)</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先肯定利用方法<code>charCodeAt</code>来处理字符，其次得转化下大小写，因为每个字符都是空格隔开，那么肯定用到<code>split</code>等来“切割”。思路大概就是我代码里头描述的，但是看最佳答案的时候，有相对另外的思路，大概意思差不多但是把处理的顺序调一下，会有意想不到的作用，也是佩服那些大牛们啊，具体怎么调整才可以 →_→ 最优，聪明的你，可以想一想啊 :) 留个悬念。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function alphabetPosition(text) &#123;</span><br><span class="line">    return text.replace(/[^a-zA-Z]+/g,&apos;&apos;).toUpperCase().split(&apos;&apos;).map(</span><br><span class="line">        function (eachStr) &#123;</span><br><span class="line">            return eachStr.charCodeAt()-64;</span><br><span class="line">        &#125;).join(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(alphabetPosition(&apos;The testT&apos;))</span><br></pre></td></tr></table></figure><ul><li>那么我看到目前为止最机智中票数最高的代码下面这个，可惜这些对我来说还是很晦涩啊。但是我想大概思路是差不多的。另外看到很多用 for 循环的，感觉太麻烦，虽然代码容易读，但是我想对于一个想学习 JS 的人来说，尽量用方法应该是好的。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let alphabetPosition = (text) =&gt; text</span><br><span class="line"> .toUpperCase()</span><br><span class="line"> .replace(/[^A-Z]/g, &apos;&apos;)</span><br><span class="line"> .split(&apos;&apos;)</span><br><span class="line"> .map(ch =&gt; ch.charCodeAt(0) - 64).join(&apos; &apos;);</span><br></pre></td></tr></table></figure><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p>看到 js 字符串转换为数字基本就用转换函数的比较多，</p><blockquote><p>js 字符串转换成数字<br>常用的几种方法转换函数、强制类型转换、利用 js 变量弱类型转换。</p></blockquote><ul><li>转换函数<br><code>parseInt(&quot;1234blue&quot;); // returns 1234</code></li><li>强制类型转换<br><code>Boolean(&quot;hi&quot;); //true – non-empty string</code></li><li>js 变量弱类型转换<br><code>var str = &#39;012.345 &#39;;var x = str - 0;x = x * 1;</code></li></ul><p>查资料发现，关于类型转换的还是比较多，但是我并没有感觉其中的区别和用的地方，可能是实际运用接触不多。但是关于字符和数字之间的转换在 Nodejs 中也是有体现。因此，觉得 codewars 的题目质量还真的挺不错，至少对于我这种初学者来说。每一道题目后面可能都是作者精心挑选出来的。所以，加油吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaScript 权威指南(第 6 版)(中文版)</li><li>JavaScript 语言精粹(修订版) 中文版</li><li>MDN(Mozilla Developer Network)</li><li><a href="http://www.bkjia.com/article/24233.html#top" target="_blank" rel="noopener">js 字符串转换成数字</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vowel Counts</title>
      <link href="/2017/04/02/vowel%20count/"/>
      <url>/2017/04/02/vowel%20count/</url>
      
        <content type="html"><![CDATA[<p>统计字符串中的特定字符的数量。主要是方法的优化:</p><a id="more"></a><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h2><blockquote><p>Description:</p></blockquote><blockquote><p>Return the number (count) of vowels in the given string.</p></blockquote><blockquote><p>We will consider a, e, i, o, and u as vowels for this Kata.</p></blockquote><h2 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h2><ul><li>测试数据</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//Example test:</span><br><span class="line">describe(&quot;Case 1&quot;, function()&#123;</span><br><span class="line">    it (&quot;should be defined&quot;, function()&#123;</span><br><span class="line">        Test.assertEquals(getCount(&quot;abracadabra&quot;), 5)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h2><ul><li>第一眼就想到是可以从头依次查找的。能想到用 c，java 等都是利用 for 循环来处理。</li><li>其次，JS 中想到的是字符串匹配，利用正则表达式对特定字符串遍历。然后输出匹配字符的 length。 * 利用字符串的原型方法<code>String.prototype.match()</code>,语法<code>str.match(regxp)</code></li><li>后面再总结一下，<strong>string 类方法 match(regex)</strong> <strong>和 RegExp 类方法 exec(string)</strong></li></ul><h2 id="4-解题"><a href="#4-解题" class="headerlink" title="4. 解题"></a>4. 解题</h2><h3 id="4-1-最优化："><a href="#4-1-最优化：" class="headerlink" title="4.1 最优化："></a>4.1 最优化：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    return (str.match(/[aeiou]/ig)||[]).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-“多语言”解"><a href="#4-2-“多语言”解" class="headerlink" title="4.2 “多语言”解"></a>4.2 “多语言”解</h3><p>非常的直白啊，感觉都没有一点艺术。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelsCount = 0;</span><br><span class="line">        var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">        for(var i=0; i&lt;str.length; i++)&#123;</span><br><span class="line">            for(var j=0;j&lt;a.length; j++)&#123;</span><br><span class="line">                if(a[j]===str[i])&#123;</span><br><span class="line">                    vowelsCount ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return vowelsCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-优化"><a href="#4-3-优化" class="headerlink" title="4.3 优化"></a>4.3 优化</h3><p>用<code>indexof</code>来减少 for 循环。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelCount = 0;</span><br><span class="line">    var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">    for(var i=0;i&lt;str.length; i++)&#123;</span><br><span class="line">        if((a.indexOf(str[i]))!==-1)&#123;</span><br><span class="line">            vowelCount ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return vowelCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="match（regexp）和-exec"><a href="#match（regexp）和-exec" class="headerlink" title="match（regexp）和 exec()"></a>match（regexp）和 exec()</h3><ul><li>关于这两个的讨论，感觉说破天也没有 MDN 上说得好啊。:&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Don&#39;t rely on luck.</title>
      <link href="/2017/03/30/Math.random/"/>
      <url>/2017/03/30/Math.random/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在 codewars 上碰到一道奇怪的题目。猜随机数。难度 6kyu，题干比以往简单。这就让人捉急了。什么都看不出来。接下来看题</p><a id="more"></a><blockquote><p>The test fixture I use for this kata is pre-populated.<br>It will compare your guess to a random number generated in Ruby by:</p></blockquote><blockquote><p>(Kernel::rand() * 100 + 1).floor<br>In Javascript/CoffeeScript by:</p></blockquote><blockquote><p>Math.floor(Math.random() * 100 + 1)<br>In Python by:<br>randint(1,100)<br>You can pass by relying on luck or skill but try not to rely on luck.</p></blockquote><blockquote><p>“The power to define the situation is the ultimate power.” - Jerry Rubin</p></blockquote><blockquote><p>Good luck!</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里，题目给出的测试是：</p><blockquote><p>Example Test:<br><code>var lucky_number = Math.floor(Math.random() * 100 + 1);</code><br><code>Test.assertEquals(guess, lucky_number, &quot;Sorry. Unlucky this time.&quot;);</code></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题目的时候，- - 就这么点? 然后 0.0 ，睁大眼睛看，然后 = =，这什么鬼，+.+，直接<code>Math.random()</code>?, @.@ 那怎么相等呢。？.?<br>搜了下 9.9 ，发现只有<a href="http://tao.logdown.com/posts/207117-codewarsdont-rely-on-luck" target="_blank" rel="noopener">Ruby 的答案</a>。</p><ul><li>再查了下随机数。<br>_ 随机数分为 <strong>伪随机数</strong> 和<strong> 真随机数 </strong><br>_ 正常电脑各种语言中使用的都是<strong> 伪随机数 </strong>，是由可确定的<em>函数</em>，通过种子（常用时钟），产生伪随机数，这种数字理论上存在可预测性。 * _函数_ :计算机产生随机数的方法有：<code>线性同余方法</code>(大部分采用,，即 Rand<em>Number = (Rand_Seed </em> X + Y) mod Z 那个 RandSeed 就是「种子」一般取时钟周期，也就是 GetTickCount()。），<code>平方取中法</code>，<code>M-sequence</code>，<code>梅森旋转算法</code>，还有<code>MT随机数算法</code>。<br>_ ps:这里不对 随机数的产生和随机数的计算理论做深究。具体可以看<a href="https://www.zhihu.com/question/20423025" target="_blank" rel="noopener">这里</a>，各答案较完整讲了计算机产生的是伪随机数，还有产生<strong> 真随机数 </strong> 的可行性。</li><li>那么 JavaScript 中的随机数是个什么样的存在？答案当然是伪随机数。= =<br>_ JavaScript 中并没有类似上面底层语言提供的函数,根据 panxiwu 博客中的说法，c 和 Ruby 都有底层重置 seed 方法依据不同的方法来生成种子。而，JavaScript 应该是依靠引擎使用随机函数方法，所以在安全方面，不用 Math.random 最好，替代的可以使用<code>window.crypto.getRandomValues(array);</code> &gt; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random" target="_blank" rel="noopener">MDN：</a>Math.random() does not provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the window.crypto.getRandomValues() method.<br>_ V8 引擎中实现 随机数：通过 Mathlmmul 来创造，并没有所谓的 seed 参数，所以只能重写。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// ECMA 262 - 15.8.2.14 var rngstate;</span><br><span class="line">// Initialized to a Uint32Array during genesis.</span><br><span class="line">function MathRandom() &#123;</span><br><span class="line">var r0 = (MathImul(18030, rngstate[0] &amp; 0xFFFF) + (rngstate[0] &gt;&gt;&gt; 16)) | 0;        rngstate[0] = r0; var r1 = (MathImul(36969, rngstate[1] &amp; 0xFFFF) + (rngstate[1] &gt;&gt;&gt; 16)) | 0;</span><br><span class="line">    rngstate[1] = r1; var x = ((r0 &lt;&lt; 16) + (r1 &amp; 0xFFFF)) | 0;</span><br><span class="line">// Division by 0x100000000 through multiplication by reciprocal.</span><br><span class="line">return (x &lt; 0 ? (x + 0x100000000) : x) * 2.3283064365386962890625e-10; &#125;</span><br><span class="line">// Non-standard extension.</span><br><span class="line">function MathImul(x, y) &#123;</span><br><span class="line">    return %NumberImul(TO_NUMBER_INLINE(x), TO_NUMBER_INLINE(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><blockquote><p>from <a href="https://github.com/v8/v8/blob/dae6dfe08ba9810abbe7eee81f7c58e999ae8525/src/math.js#L144" target="_blank" rel="noopener">v8</a></p></blockquote></li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var guess = 10</span><br><span class="line">Math.floor = function(num) &#123;return guess;&#125;</span><br></pre></td></tr></table></figure><p>Accept!然后看到一堆不可描述的东西。lol</p><ul><li>这个……..</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var guess = 10;</span><br><span class="line">lucky_number = 10;</span><br></pre></td></tr></table></figure><ul><li>还有这个</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Math.random=()=&gt;&quot;:D&quot;</span><br><span class="line">Math.floor=x=&gt;(x+&apos;&apos;).replace(/N/g,&apos;L&apos;).replace(/a/g,&quot;0&quot;)</span><br><span class="line">var guess = &quot;L0L&quot;</span><br></pre></td></tr></table></figure><p>不少都是写死了 random 的值然后钻牛角尖的。。还有令人搞笑的，可以拿来当笑话集了，这题：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var guess = &quot;What a stupid kata.&quot;;</span><br><span class="line"></span><br><span class="line">Math.floor = function() &#123;</span><br><span class="line">  return &quot;What a stupid kata.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有这个，，厉害了。。。<br><img src="https://ooo.0o0.ooo/2017/03/30/58dd0d4db4e85.jpg" alt="enter description here" title="图像 14"></p><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><blockquote><p>比如我们在开发京东的 H5 活动页面的小游戏时，可能需要随机产生一些背景、随机掉落道具、小怪物；当用户中途退出(微信不小心右滑，一定有不少人被这个恶心到[当然现在已经优化])，当用户重新打开小游戏时，用户整体进度、积分我们可以很容易记录到本地或者存储到微信 ID 建立的存储机制中从而得以恢复，但是随机产生的场景、随机掉落道具、小怪物等并不是那么容易存储恢复，重新获取场景、小怪物那未免用户体验太差！！！把画布上的所有物件、怪物属性全部存储下来更是没有必要。此时我们就可以利用我们重写的 Math.random()(此时可不重写内置方法，可另起别名)。只要我们保存下来一个随机数 seed 值，利用 seed 值来恢复所有的场景就好了。<br>from <a href="http://blog.panxinwu.com/" target="_blank" rel="noopener">潘信伍</a> ,谢谢大神啊</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://tao.logdown.com/posts/207117-codewarsdont-rely-on-luck" target="_blank" rel="noopener">悟道集</a><br><a href="http://blog.panxinwu.com/2016/03/27/JavaScript%E4%B8%ADMathdotrandom%E7%9A%84%E7%A7%8D%E5%AD%90%E8%AE%BE%E5%AE%9A%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">JavaScript 中 Math.random 的种子设定方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
          <category> codewars </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>holygrail（圣杯布局）</title>
      <link href="/2017/03/25/holygrail/"/>
      <url>/2017/03/25/holygrail/</url>
      
        <content type="html"><![CDATA[<h2 id="圣杯布局-holygrail"><a href="#圣杯布局-holygrail" class="headerlink" title="圣杯布局(holygrail)"></a>圣杯布局(<a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">holygrail</a>)</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote><p>三列。两列固定在两边，中间是一个<strong> 流体 </strong><br>圣杯布局的原理是? 简述实现圣杯布局的步骤。双飞翼布局和圣杯布局有什么异同负 margin 的用法</p></blockquote><a id="more"></a><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>一个简单的仿照例子实现圣杯布局</li></ul><ul><li>步骤</li></ul><h4 id="1-建立框架"><a href="#1-建立框架" class="headerlink" title="1. 建立框架"></a>1. 建立框架</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--第一步 建立框架--&gt;</span><br><span class="line">&lt;div id=&quot;header&quot;&gt;&lt;h1&gt;#header&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;#container&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;&lt;h1&gt;#footer&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-加-column"><a href="#2-加-column" class="headerlink" title="2. 加 column"></a>2. 加 column</h4><ul><li>float 让其在 line。再清除 footer 让它在最下面。添加背景颜色和边界便于观察。中间栏要放在前面以优先渲染。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">#container &#123;</span><br><span class="line">         padding-left: 200px;</span><br><span class="line">         padding-right:150px;</span><br><span class="line">     &#125;</span><br><span class="line">     #container .column &#123;</span><br><span class="line">         float: left;</span><br><span class="line">     &#125;</span><br><span class="line">     #center &#123;</span><br><span class="line">         width:100%;</span><br><span class="line">     &#125;</span><br><span class="line">     #left &#123;</span><br><span class="line">         width:200px;</span><br><span class="line">     &#125;</span><br><span class="line">     #right &#123;</span><br><span class="line">         width: 150px;</span><br><span class="line">     &#125;</span><br><span class="line">     #footer &#123;</span><br><span class="line">         clear: both;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;#container&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is center&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is left&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is right&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>效果图 2.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5d72feabca.png" alt="step2"></li></ul><h4 id="3-将左栏拉到相应位置"><a href="#3-将左栏拉到相应位置" class="headerlink" title="3. 将左栏拉到相应位置"></a>3. 将左栏拉到相应位置</h4><ul><li>要让左栏和中间在一条直线上，先对左栏进行操作,分两步。margin-left:-100%跑到左上角（覆盖主栏目），再设置 position:relative,right:200px 或者 left:-200px（不覆盖主栏目）<ul><li>第一步</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#left &#123;</span><br><span class="line">width:200px;</span><br><span class="line">margin-left: -100%;</span><br><span class="line">background-color: #555555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 3.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5d8169eeaa.png" alt="step3"> * 第二步用相对定位将左栏推开，加上相对定位标志之后，记得给左栏一个<code>right:200px</code>将左栏相对右边 200px,往左推 200px。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#left &#123;</span><br><span class="line">width:200px;</span><br><span class="line">margin-left: -100%;</span><br><span class="line">right:200px;</span><br><span class="line">background-color: #555555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 3.2<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5dae8bdfa3.png" alt="step3_2"><br>.</li></ul><h4 id="4-将右栏加入-line"><a href="#4-将右栏加入-line" class="headerlink" title="4.将右栏加入 line"></a>4.将右栏加入 line</h4><p>注意： 原作者这里用的是<code>margin-right:-150px</code>，在演示时并不能起效果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#right &#123;</span><br><span class="line">width: 150px</span><br><span class="line">margin-right: -100%;</span><br><span class="line">background-color: #8cacea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 4.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5de6bddba3.png" alt="step4_1"><br>再处理一些小细节,固定的右边栏多出的字，撑开了</li><li>效果图 4.2<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5e21d68c4d.png" alt="step4_2"></li></ul><h4 id="5-结果"><a href="#5-结果" class="headerlink" title="5.结果"></a>5.结果</h4><p><img src="https://ooo.0o0.ooo/2017/03/25/58d5e4038a31c.gif" alt="result"></p><h3 id="总结实现步骤"><a href="#总结实现步骤" class="headerlink" title="总结实现步骤"></a>总结实现步骤</h3><h4 id="1-div-框架搭建出来，"><a href="#1-div-框架搭建出来，" class="headerlink" title="1. div 框架搭建出来，"></a>1. div 框架搭建出来，</h4><ul><li>div- &gt;container，header，footer</li></ul><h4 id="2-加-column，"><a href="#2-加-column，" class="headerlink" title="2. 加 column，"></a>2. 加 column，</h4><ul><li>设置<code>float:left</code>，</li><li>设置<code>center宽度100%</code></li><li><code>清除footer浮动</code></li></ul><h4 id="3-将左栏添到-center-左边，"><a href="#3-将左栏添到-center-左边，" class="headerlink" title="3. 将左栏添到 center 左边，"></a>3. 将左栏添到 center 左边，</h4><ul><li><code>margin-left:-100%</code>到左上（覆盖主栏目），</li><li>再设置<code>position:relative</code>,<code>right:200px</code>或者<code>left:-200px</code>（不覆盖主栏目）</li></ul><h4 id="4-将右栏添右"><a href="#4-将右栏添右" class="headerlink" title="4. 将右栏添右"></a>4. 将右栏添右</h4><ul><li><code>margin-right: -100%;</code></li></ul><h3 id="圣杯布局和双飞翼布局异同"><a href="#圣杯布局和双飞翼布局异同" class="headerlink" title="圣杯布局和双飞翼布局异同"></a>圣杯布局和双飞翼布局异同</h3><ol><li>两种布局方式都是把主列放在文档流最前面，使主列优先加载</li><li>两者在实现上的相同点在于都让三列浮动，然后通过负外边距形成三列布局；</li><li>两种布局方式的不同在于如何处理中间主列的位置：圣杯布局是利用父容器的左右内边距定位；双飞翼布局是把主列嵌套在 div 后利用主列的左右外边距定位。</li></ol><h3 id="浮动元素上的负-margin"><a href="#浮动元素上的负-margin" class="headerlink" title="浮动元素上的负 margin"></a>浮动元素上的负 margin</h3><blockquote><p>给一个浮动元素加上相反方向的负 margin，则会使行间距为 0 且内容重叠。</p></blockquote><ul><li>bug 修复 * 当浮动元素使用负 margin 时，在一些旧的浏览器中可能会出现问题。用<code>position:float</code>,能解决很多问题。</li><li>具体可以参考 <a href="http://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负 margin 用法权威指南</a></li></ul><h3 id="flex-实现的“标准”圣杯布局"><a href="#flex-实现的“标准”圣杯布局" class="headerlink" title="flex 实现的“标准”圣杯布局"></a>flex 实现的“标准”圣杯布局</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">MDN</a></p><ul><li>效果图<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5fa60c22ea.png" alt="step"></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>圣杯布局基本就是（适：自适应，左：左栏，右：右栏）<br>_ 左适右<br>_ 左右适<br>_ 左适、右适<br>_ 等等</li><li><p>圣杯布局还有很多的实现方法<br>_ 纯浮动实现<br>_ flex 实现可以参考，<a href="http://web.jobbole.com/84993/" target="_blank" rel="noopener">圣杯布局小结</a>，觉得这位作者对圣杯布局总结的挺好，各种小例子。其他的也可以搜一下。我这里主要是介绍下圣杯布局。</p></li><li><p>圣杯布局类似 * <a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="noopener"> 双飞翼布局</a> 1. left 和 right 覆盖了 center 的左右两边的内容。 2. center 的外部再加一个 div 标签来包裹中间区块， 3. 宽度为 100%。然后再设置 main 的左右外边距，使它回到对应的位置。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">In Search of the Holy Grail</a> by Matthew Levine<br><a href="https://segmentfault.com/a/1190000004524159" target="_blank" rel="noopener">关于「圣杯布局」</a> by DotHide<br><a href="http://web.jobbole.com/84993/" target="_blank" rel="noopener">圣杯布局小结</a> by 流云诸葛<br><a href="http://www.jianshu.com/p/1a981df93770" target="_blank" rel="noopener">圣杯布局和双飞翼布局</a> by betterwlf<br><a href="http://blog.leanote.com/post/727600729@qq.com/CSS%E4%B9%8B%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80" target="_blank" rel="noopener">CSS 之圣杯布局和双飞翼布局</a> by 宋菲<br><a href="http://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负 margin 用法权威指南</a> by Airen 的博客</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法小记</title>
      <link href="/2017/03/20/markdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
      <url>/2017/03/20/markdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li>插入表格：<br>1.1. 表格的上下需要空行。空行的多少至关重要<ul><li>表格中文字居中 在划线部分的划线两端加上”<strong>:</strong>“<ul><li>比如”<strong>:</strong>—–<strong>:</strong> | <strong>:</strong>—-<strong>:</strong><a id="more"></a></li></ul></li></ul></li><li><code>代码块</code>:<br>2.1. 合理利用代码块有意想不到的效果。<br>3.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewars-count_digits</title>
      <link href="/2017/03/20/codewars/"/>
      <url>/2017/03/20/codewars/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>Take an integer n (n &gt;= 0) and a digit d (0 &lt;= d &lt;= 9) as an integer. Square all numbers k (0 &lt;= k &lt;= n) between 0 and n.</p></blockquote><a id="more"></a><blockquote><p>Count the numbers of digits d used in the writing of all the k* *2. Call nb_dig (or nbDig or …) the function taking n and d as parameters and returning this count.</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>n = 10, d = 1,<br>the k * k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 We are using the digit 1 in 1, 16, 81, 100.</li><li>The total count is then 4.<br>nb_dig(25, 1):<br>the numbers of interest are 1, 4, 9, 10, 11, 12, 13, 14, 19, 21<br>which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441 so there are 11 digits <code>1</code> for the squares of numbers between 0 and 25.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>给出<code>n</code>和<code>d</code>，求 0 到 n 中间的平方，再求这些平方的平方，问所得的这些数中包含多少个数字<code>d</code>。大概就是先算出这些数字的平方，然后挨个分解求出其中的值。</li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function nbDig(n,d) &#123;</span><br><span class="line">    var s = &apos;&apos;;</span><br><span class="line">    for(var i=0;i&lt;=n;i++)&#123;</span><br><span class="line">        s += Math.pow(i,2);</span><br><span class="line">    &#125;</span><br><span class="line">    return s.split(d).length-1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="牢骚篇"><a href="#牢骚篇" class="headerlink" title="牢骚篇"></a>牢骚篇</h2><p>今天，进了个群，挺多厉害的人，还私聊了一个有很多 offer 的同学。顿时觉得，自己就是渣渣啊，一点信心都没有。还是得加油吧，要学的东西还很多啊。<br><img src="https://ooo.0o0.ooo/2017/03/20/58cfd648e6d0a.jpg" alt="累啊"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewars ooxx =&gt;true</title>
      <link href="/2017/03/17/codewars-ooxx/"/>
      <url>/2017/03/17/codewars-ooxx/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第二关 Yeah！目标 6kyu，坚持升级~ ：）</p><ul><li>这一关，考察几个基本方法的使用，虽然单独拿出来可能难度不大，但是真正运用在工作中的时候，这些方法可能如大海捞针，不熟练是一时半会儿想不出来的。</li><li>话不多说，呀呀呀，提枪上阵，<a id="more"></a></li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Check to see if a string has the same amount of ‘x’s and ‘o’s. The method must return a boolean and be case insensitive. The string can contains any char.（0.0 看不懂？往下戳）</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XO(&quot;ooxx&quot;) =&gt; true</span><br><span class="line">XO(&quot;xooxx&quot;) =&gt; false</span><br><span class="line">XO(&quot;ooxXm&quot;) =&gt; true</span><br><span class="line">XO(&quot;zpzpzpp&quot;) =&gt; true // when no &apos;x&apos; and &apos;o&apos; is present should return true</span><br><span class="line">XO(&quot;zzoo&quot;) =&gt; false</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目大概意思就是： 在有限任意字符串中字符 <code>x</code> 和 <code>o</code> 存在且<strong>数量相等</strong>时 值为 <code>true</code>,否则当<code>x</code>和<code>o</code>不存在时，值为<code>flase</code>。匹配的话，首先想到正则表达式来处理。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用 RegExp 来匹配正则，然后再判断数量为空和数量是否相等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function xo(str) &#123;</span><br><span class="line">    var numX = new RegExp(/x/gi);</span><br><span class="line">    //g 全局搜索，i 忽略大小写</span><br><span class="line">    var numO = new RegExp(/o/gi);</span><br><span class="line">    if(numX.test(str)&amp;&amp;numO.test(str))&#123;</span><br><span class="line">        if(str.match(/x/gi).length == str.match(/o/gi).length)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(xo(&apos;xxoo&apos;))</span><br><span class="line">console.log(xo(&apos;glld&apos;))</span><br></pre></td></tr></table></figure><ul><li>仔细一看，这种写法太麻烦。如何轻松取敌呢？</li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>直接返回一个 return，并在 return 中判断。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function xo(str) &#123;</span><br><span class="line">    var numX = str.match(/x/gi) || [];</span><br><span class="line">    var numO = str.match(/x/gi) || [];</span><br><span class="line"></span><br><span class="line">    return numO.length == numX.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析方法一方法二"><a href="#解析方法一方法二" class="headerlink" title="解析方法一方法二"></a>解析方法一方法二</h4><ul><li>什么鬼！这不同的方法有什么区别呢？？我来试着剖析下这两种方法究竟是何利器。来看看<a href="https://developer.mozilla.org" target="_blank" rel="noopener">MDN</a>是怎么说的？贴心的<a href="https://developer.mozilla.org" target="_blank" rel="noopener">MDN</a>还在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">match</a>这一篇中对两者进行了比较。</li></ul><blockquote><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Description" target="_blank" rel="noopener"> RegExp</a> 构造函数创建了一个正则表达式对象，用于将文本与模式匹配。 2.当一个字符串与一个正则表达式匹配时， <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">match()</a>方法检索匹配项。</p></blockquote><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><blockquote><p>如果正则表达式没有 g 标志，则 str.match() 会返回和 RegExp.exec() 相同的结果。而且返回的 Array 拥有一个额外的 input 属性，该属性包含被解析的原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在原字符串中的索引（以 0 开始）。</p></blockquote><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><blockquote><p>如果你需要知道一个字符串是否匹配一个正则表达式 RegExp ，可使用 search() 。如果你只是需要第一个匹配结果，你可能想要使用 RegExp.exec() 。如果你想要获得捕获组，并且设置了全局标志，你需要用 RegExp.exec() 。</p></blockquote><p>综上：大概就是这么吧~不用鸟我了，直接看文档吧~</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>方法三是在解答完之后查看他人的方法，大神们就是大神。对于各种用法如数家珍，信手拈来。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x = str.match(/x/gi);</span><br><span class="line">let o = str.match(/o/gi);</span><br><span class="line">return (x &amp;&amp; x.length) === (o &amp;&amp; o.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h3><ul><li>这个<code>keyword</code>变量该如何转义呢？</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function addHightLight(txt,keyword) &#123;</span><br><span class="line">    return txt.replace(/+keyword+/g,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function addHightLight(txt,keyword) &#123;</span><br><span class="line">    txt = &quot;咖啡&quot; ;keyword = &quot;机器&quot;;</span><br><span class="line">    var va = new RegExp(keyword,&quot;g&quot;);</span><br><span class="line">    va = /\/咖啡\/g/&#123;lastIndex:0&#125;</span><br><span class="line">    return txt.replace(va,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就到这里了~<img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewars - - accm</title>
      <link href="/2017/03/16/codewars-accm/"/>
      <url>/2017/03/16/codewars-accm/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近在找实习啊，希望暑假有份合适的工作来填充暑假。就刷 codewars。我比较懒所以更新的可能比较慢。。<a id="more"></a></li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><pre><code>This time no story, no theory. The examples below show you how to write function accum:</code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">accum(&quot;abcd&quot;); // &quot;A-Bb-Ccc-Dddd&quot;</span><br><span class="line">accum(&quot;RqaEzty&quot;); // &quot;R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy&quot;</span><br><span class="line">accum(&quot;cwAt&quot;); // &quot;C-Ww-Aaa-Tttt&quot;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>大概意思就是递增的方式来重复每个字符再用依次拼接在一块儿，确定用<code>join()</code>来拼接，用 map 方法来迭代，再把首字母转为大写，其余为小写具体方法如下</li></ul><h3 id="解一"><a href="#解一" class="headerlink" title="解一"></a>解一</h3><ul><li>参考方法而之后发现这个并没有完全利用 js 中语法的特性，感觉在 js 学习中不可取</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accm</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.toUpperCase().split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = s.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = s[i].toLowerCase();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      s[i] += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.join(<span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决二"><a href="#解决二" class="headerlink" title="解决二"></a>解决二</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function accm(s)&#123;</span><br><span class="line">//分割。再map方法查询，再转换大小写</span><br><span class="line">return s.split(&apos;&apos;).map( (x,index) =&gt; x.toUpperCase() + Array(index+1).join(x.toLowerCase())).join(&apos;-&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决三"><a href="#解决三" class="headerlink" title="解决三"></a>解决三</h3><ul><li>在方法一上，进行简化，但是没有方法二更简单</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function accum(s)&#123;</span><br><span class="line">    var letter = s.split(&apos;&apos;);</span><br><span class="line">    var result = [];</span><br><span class="line">    for(var i=0;i&lt;letter.length;i++)&#123;</span><br><span class="line">        result.push(letter[i].toUpperCase()+Array(i+1).join(letter[i].toLowerCase()));</span><br><span class="line">    &#125;</span><br><span class="line">    return result.join(&apos;_&apos;);</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line">accum(&apos;fds&apos;)</span><br><span class="line">F_Dd_Sss</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在平时的学习中能多用到所学知识是最好的，如果混合方法写，不利于学习。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> js </tag>
            
            <tag> codewars </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 2.0 之 Vue-Router 路由挂载实例</title>
      <link href="/2017/01/26/vue-router%E6%8C%82%E8%BD%BD/"/>
      <url>/2017/01/26/vue-router%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>在新出的 vue 2.0 中文档，挂载实例<a id="more"></a></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>在构建路由时，vue1.0 中应用 map 方法，而在 2.0 中取消了 map 方法，而快速的启用 new router 便可以建立。在 vue1.0 到 vue2.0 的迁移时，也带来了很多麻烦。</li></ul><h3 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h3><ul><li><strong>render: h =&gt; h(App)</strong></li><li>路由挂载的正确姿势</li></ul><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li>vue1.0 中的实例很方便实现，而 2.0 中的实例模板并不是很好使用。</li><li><a href="https://github.com/vuejs/vue-router/blob/1.0/docs/en/basic.md" target="_blank" rel="noopener">vue1.0 中 vue-router 写法</a>、<a href="http://router.vuejs.org/zh-cn/essentials/getting-started.html" target="_blank" rel="noopener">vue2.0 中 vue-router 写法</a></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul><li>vue2.0 官网中：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点再讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><ul><li>实际案例写法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> goods <span class="keyword">from</span> <span class="string">'./components/goods/goods'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//路由嵌套</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/goods'</span>,</span><br><span class="line">      component: goods</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  <span class="comment">//关键点，官网中没加，这个相当于ES6的写法</span></span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>);</span><br><span class="line"><span class="comment">//默认去goods</span></span><br><span class="line">router.push(<span class="string">'goods'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置hexo标签</title>
      <link href="/2016/03/20/hexo%E4%B8%AD%E7%9A%84tags/"/>
      <url>/2016/03/20/hexo%E4%B8%AD%E7%9A%84tags/</url>
      
        <content type="html"><![CDATA[<h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><ol><li>hexo 写作要求的格式非常的严格，连空格都不能省略。</li><li>英语不好是硬伤，tags 标签在我配置的时候写成了 tages！害 得我找了很久。总算是搭建完了很多的功能。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css和sass的比较</title>
      <link href="/2016/01/18/sass%E4%B8%8Ecss%E6%AF%94%E8%BE%83/"/>
      <url>/2016/01/18/sass%E4%B8%8Ecss%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h1 id="css和sass的比较"><a href="#css和sass的比较" class="headerlink" title="css和sass的比较"></a>css和sass的比较</h1><h2 id="一个程序来说明sass和css3"><a href="#一个程序来说明sass和css3" class="headerlink" title="一个程序来说明sass和css3"></a>一个程序来说明sass和css3</h2><blockquote><p>这里配置sass不做介绍，请参考<a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">sass详细介绍和安装</a></p></blockquote><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><blockquote><p>在这两个效果一样编译结果不一样的文件中你可以看到区别，sass对于程序化css起很大作用。</p></blockquote><a id="more"></a><h3 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// n is number of stars required</span><br><span class="line">@function multiple-box-shadow ($n) </span><br><span class="line">  $value: &apos;#&#123;random(2000)&#125;px #&#123;random(2000)&#125;px #FFF&apos;</span><br><span class="line">  @for $i from 2 through $n</span><br><span class="line">    $value: &apos;#&#123;$value&#125; , #&#123;random(2000)&#125;px #&#123;random(2000)&#125;px #FFF&apos;</span><br><span class="line"></span><br><span class="line">  @return unquote($value)</span><br><span class="line"></span><br><span class="line">$shadows-small:  multiple-box-shadow(700)</span><br><span class="line">$shadows-medium: multiple-box-shadow(200)</span><br><span class="line">$shadows-big:    multiple-box-shadow(100)</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line">  height: 100%</span><br><span class="line">  background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%)</span><br><span class="line">  overflow: hidden</span><br><span class="line">    </span><br><span class="line">#stars</span><br><span class="line">  width: 1px</span><br><span class="line">  height: 1px</span><br><span class="line">  background: transparent</span><br><span class="line">  box-shadow: $shadows-small</span><br><span class="line">  animation: animStar 50s linear infinite</span><br><span class="line">    </span><br><span class="line">  &amp;:after</span><br><span class="line">    content: &quot; &quot;</span><br><span class="line">    position: absolute</span><br><span class="line">    top: 2000px</span><br><span class="line">    width: 1px</span><br><span class="line">    height: 1px</span><br><span class="line">    background: transparent</span><br><span class="line">    box-shadow: $shadows-small</span><br><span class="line">    </span><br><span class="line">#stars2</span><br><span class="line">  width: 2px</span><br><span class="line">  height: 2px</span><br><span class="line">  background: transparent</span><br><span class="line">  box-shadow: $shadows-medium</span><br><span class="line">  animation: animStar 100s linear infinite</span><br><span class="line">    </span><br><span class="line">  &amp;:after</span><br><span class="line">    content: &quot; &quot;</span><br><span class="line">    position: absolute</span><br><span class="line">    top: 2000px</span><br><span class="line">    width: 2px</span><br><span class="line">    height: 2px</span><br><span class="line">    background: transparent</span><br><span class="line">    box-shadow: $shadows-medium</span><br><span class="line">    </span><br><span class="line">#stars3</span><br><span class="line">  width: 3px</span><br><span class="line">  height: 3px</span><br><span class="line">  background: transparent</span><br><span class="line">  box-shadow: $shadows-big</span><br><span class="line">  animation: animStar 150s linear infinite</span><br><span class="line">    </span><br><span class="line">  &amp;:after</span><br><span class="line">    content: &quot; &quot;</span><br><span class="line">    position: absolute</span><br><span class="line">    top: 2000px</span><br><span class="line">    width: 3px</span><br><span class="line">    height: 3px</span><br><span class="line">    background: transparent</span><br><span class="line">    box-shadow: $shadows-big</span><br><span class="line"></span><br><span class="line">#title</span><br><span class="line">  position: absolute</span><br><span class="line">  top: 50%</span><br><span class="line">  left: 0</span><br><span class="line">  right: 0</span><br><span class="line">  </span><br><span class="line">  color: #FFF</span><br><span class="line">  text-align: center</span><br><span class="line">  font-family: &apos;lato&apos;,sans-serif</span><br><span class="line">  font-weight: 300</span><br><span class="line">  font-size: 50px</span><br><span class="line">  letter-spacing: 10px</span><br><span class="line">  </span><br><span class="line">  margin-top: -60px</span><br><span class="line">  padding-left: 10px</span><br><span class="line">  </span><br><span class="line">  span</span><br><span class="line">    background: -webkit-linear-gradient(white, #38495a)</span><br><span class="line">    -webkit-background-clip: text</span><br><span class="line">    -webkit-text-fill-color: transparent</span><br><span class="line">    </span><br><span class="line">@keyframes animStar</span><br><span class="line">  from</span><br><span class="line">    transform: translateY(0px)</span><br><span class="line">  to</span><br><span class="line">    transform: translateY(-2000px)</span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse at bottom, #1b2735 0%, #090a0f 100%);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stars</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1747px</span> <span class="number">1720px</span> <span class="number">#FFF</span> , <span class="number">1693px</span> <span class="number">439px</span> <span class="number">#FFF</span> , <span class="number">699px</span> <span class="number">1744px</span> <span class="number">#FFF</span> , <span class="number">180px</span> <span class="number">479px</span> <span class="number">#FFF</span> , <span class="number">379px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">1294px</span> <span class="number">910px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1860px</span> <span class="number">#FFF</span> , <span class="number">270px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">252px</span> <span class="number">1651px</span> <span class="number">#FFF</span> , <span class="number">472px</span> <span class="number">1251px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">235px</span> <span class="number">#FFF</span> , <span class="number">311px</span> <span class="number">1770px</span> <span class="number">#FFF</span> , <span class="number">1469px</span> <span class="number">984px</span> <span class="number">#FFF</span> , <span class="number">1349px</span> <span class="number">1839px</span> <span class="number">#FFF</span> , <span class="number">525px</span> <span class="number">958px</span> <span class="number">#FFF</span> , <span class="number">753px</span> <span class="number">1748px</span> <span class="number">#FFF</span> , <span class="number">753px</span> <span class="number">1299px</span> <span class="number">#FFF</span> , <span class="number">530px</span> <span class="number">489px</span> <span class="number">#FFF</span> , <span class="number">1574px</span> <span class="number">311px</span> <span class="number">#FFF</span> , <span class="number">760px</span> <span class="number">76px</span> <span class="number">#FFF</span> , <span class="number">774px</span> <span class="number">837px</span> <span class="number">#FFF</span> , <span class="number">1505px</span> <span class="number">1499px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">512px</span> <span class="number">#FFF</span> , <span class="number">1587px</span> <span class="number">1312px</span> <span class="number">#FFF</span> , <span class="number">1072px</span> <span class="number">753px</span> <span class="number">#FFF</span> , <span class="number">911px</span> <span class="number">866px</span> <span class="number">#FFF</span> , <span class="number">1217px</span> <span class="number">1280px</span> <span class="number">#FFF</span> , <span class="number">226px</span> <span class="number">958px</span> <span class="number">#FFF</span> , <span class="number">1021px</span> <span class="number">149px</span> <span class="number">#FFF</span> , <span class="number">1129px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">1354px</span> <span class="number">#FFF</span> , <span class="number">12px</span> <span class="number">1248px</span> <span class="number">#FFF</span> , <span class="number">1816px</span> <span class="number">1631px</span> <span class="number">#FFF</span> , <span class="number">178px</span> <span class="number">1185px</span> <span class="number">#FFF</span> , <span class="number">628px</span> <span class="number">962px</span> <span class="number">#FFF</span> , <span class="number">1806px</span> <span class="number">315px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1436px</span> <span class="number">#FFF</span> , <span class="number">1133px</span> <span class="number">1304px</span> <span class="number">#FFF</span> , <span class="number">1539px</span> <span class="number">661px</span> <span class="number">#FFF</span> , <span class="number">342px</span> <span class="number">148px</span> <span class="number">#FFF</span> , <span class="number">138px</span> <span class="number">332px</span> <span class="number">#FFF</span> , <span class="number">1928px</span> <span class="number">612px</span> <span class="number">#FFF</span> , <span class="number">434px</span> <span class="number">970px</span> <span class="number">#FFF</span> , <span class="number">577px</span> <span class="number">456px</span> <span class="number">#FFF</span> , <span class="number">1132px</span> <span class="number">892px</span> <span class="number">#FFF</span> , <span class="number">1880px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">1524px</span> <span class="number">268px</span> <span class="number">#FFF</span> , <span class="number">1406px</span> <span class="number">1375px</span> <span class="number">#FFF</span> , <span class="number">747px</span> <span class="number">726px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">523px</span> <span class="number">#FFF</span> , <span class="number">1996px</span> <span class="number">1063px</span> <span class="number">#FFF</span> , <span class="number">1128px</span> <span class="number">595px</span> <span class="number">#FFF</span> , <span class="number">177px</span> <span class="number">1792px</span> <span class="number">#FFF</span> , <span class="number">1430px</span> <span class="number">477px</span> <span class="number">#FFF</span> , <span class="number">949px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">1949px</span> <span class="number">#FFF</span> , <span class="number">1958px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">1899px</span> <span class="number">1870px</span> <span class="number">#FFF</span> , <span class="number">1105px</span> <span class="number">208px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">719px</span> <span class="number">#FFF</span> , <span class="number">822px</span> <span class="number">598px</span> <span class="number">#FFF</span> , <span class="number">409px</span> <span class="number">1398px</span> <span class="number">#FFF</span> , <span class="number">345px</span> <span class="number">607px</span> <span class="number">#FFF</span> , <span class="number">160px</span> <span class="number">156px</span> <span class="number">#FFF</span> , <span class="number">946px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">1796px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">1896px</span> <span class="number">1125px</span> <span class="number">#FFF</span> , <span class="number">1731px</span> <span class="number">1802px</span> <span class="number">#FFF</span> , <span class="number">1147px</span> <span class="number">503px</span> <span class="number">#FFF</span> , <span class="number">525px</span> <span class="number">1562px</span> <span class="number">#FFF</span> , <span class="number">1791px</span> <span class="number">1266px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">312px</span> <span class="number">#FFF</span> , <span class="number">102px</span> <span class="number">1586px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1314px</span> <span class="number">#FFF</span> , <span class="number">781px</span> <span class="number">1403px</span> <span class="number">#FFF</span> , <span class="number">901px</span> <span class="number">1566px</span> <span class="number">#FFF</span> , <span class="number">1934px</span> <span class="number">1761px</span> <span class="number">#FFF</span> , <span class="number">767px</span> <span class="number">646px</span> <span class="number">#FFF</span> , <span class="number">797px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">889px</span> <span class="number">#FFF</span> , <span class="number">1165px</span> <span class="number">1607px</span> <span class="number">#FFF</span> , <span class="number">940px</span> <span class="number">1092px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">957px</span> <span class="number">#FFF</span> , <span class="number">1563px</span> <span class="number">1793px</span> <span class="number">#FFF</span> , <span class="number">83px</span> <span class="number">498px</span> <span class="number">#FFF</span> , <span class="number">1246px</span> <span class="number">492px</span> <span class="number">#FFF</span> , <span class="number">80px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">1137px</span> <span class="number">1795px</span> <span class="number">#FFF</span> , <span class="number">1365px</span> <span class="number">1816px</span> <span class="number">#FFF</span> , <span class="number">549px</span> <span class="number">1650px</span> <span class="number">#FFF</span> , <span class="number">1645px</span> <span class="number">1758px</span> <span class="number">#FFF</span> , <span class="number">244px</span> <span class="number">1543px</span> <span class="number">#FFF</span> , <span class="number">1941px</span> <span class="number">325px</span> <span class="number">#FFF</span> , <span class="number">1347px</span> <span class="number">1608px</span> <span class="number">#FFF</span> , <span class="number">409px</span> <span class="number">433px</span> <span class="number">#FFF</span> , <span class="number">1364px</span> <span class="number">552px</span> <span class="number">#FFF</span> , <span class="number">264px</span> <span class="number">1839px</span> <span class="number">#FFF</span> , <span class="number">1610px</span> <span class="number">581px</span> <span class="number">#FFF</span> , <span class="number">1225px</span> <span class="number">1386px</span> <span class="number">#FFF</span> , <span class="number">763px</span> <span class="number">1077px</span> <span class="number">#FFF</span> , <span class="number">1442px</span> <span class="number">1362px</span> <span class="number">#FFF</span> , <span class="number">1152px</span> <span class="number">794px</span> <span class="number">#FFF</span> , <span class="number">191px</span> <span class="number">1980px</span> <span class="number">#FFF</span> , <span class="number">1537px</span> <span class="number">281px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">749px</span> <span class="number">#FFF</span> , <span class="number">1906px</span> <span class="number">1489px</span> <span class="number">#FFF</span> , <span class="number">529px</span> <span class="number">1711px</span> <span class="number">#FFF</span> , <span class="number">272px</span> <span class="number">910px</span> <span class="number">#FFF</span> , <span class="number">26px</span> <span class="number">768px</span> <span class="number">#FFF</span> , <span class="number">1702px</span> <span class="number">1887px</span> <span class="number">#FFF</span> , <span class="number">531px</span> <span class="number">1236px</span> <span class="number">#FFF</span> , <span class="number">1911px</span> <span class="number">11px</span> <span class="number">#FFF</span> , <span class="number">875px</span> <span class="number">544px</span> <span class="number">#FFF</span> , <span class="number">1340px</span> <span class="number">443px</span> <span class="number">#FFF</span> , <span class="number">350px</span> <span class="number">343px</span> <span class="number">#FFF</span> , <span class="number">368px</span> <span class="number">1663px</span> <span class="number">#FFF</span> , <span class="number">1761px</span> <span class="number">671px</span> <span class="number">#FFF</span> , <span class="number">1246px</span> <span class="number">1936px</span> <span class="number">#FFF</span> , <span class="number">1927px</span> <span class="number">1611px</span> <span class="number">#FFF</span> , <span class="number">1630px</span> <span class="number">1003px</span> <span class="number">#FFF</span> , <span class="number">1602px</span> <span class="number">722px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">178px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">994px</span> <span class="number">#FFF</span> , <span class="number">1466px</span> <span class="number">296px</span> <span class="number">#FFF</span> , <span class="number">1192px</span> <span class="number">1239px</span> <span class="number">#FFF</span> , <span class="number">1864px</span> <span class="number">1361px</span> <span class="number">#FFF</span> , <span class="number">503px</span> <span class="number">153px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">1830px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">360px</span> <span class="number">236px</span> <span class="number">#FFF</span> , <span class="number">357px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">127px</span> <span class="number">847px</span> <span class="number">#FFF</span> , <span class="number">1729px</span> <span class="number">1178px</span> <span class="number">#FFF</span> , <span class="number">237px</span> <span class="number">1815px</span> <span class="number">#FFF</span> , <span class="number">608px</span> <span class="number">108px</span> <span class="number">#FFF</span> , <span class="number">1869px</span> <span class="number">1657px</span> <span class="number">#FFF</span> , <span class="number">1864px</span> <span class="number">664px</span> <span class="number">#FFF</span> , <span class="number">108px</span> <span class="number">175px</span> <span class="number">#FFF</span> , <span class="number">807px</span> <span class="number">851px</span> <span class="number">#FFF</span> , <span class="number">1031px</span> <span class="number">645px</span> <span class="number">#FFF</span> , <span class="number">1322px</span> <span class="number">16px</span> <span class="number">#FFF</span> , <span class="number">285px</span> <span class="number">154px</span> <span class="number">#FFF</span> , <span class="number">414px</span> <span class="number">404px</span> <span class="number">#FFF</span> , <span class="number">1750px</span> <span class="number">385px</span> <span class="number">#FFF</span> , <span class="number">450px</span> <span class="number">579px</span> <span class="number">#FFF</span> , <span class="number">1515px</span> <span class="number">546px</span> <span class="number">#FFF</span> , <span class="number">915px</span> <span class="number">1198px</span> <span class="number">#FFF</span> , <span class="number">921px</span> <span class="number">1940px</span> <span class="number">#FFF</span> , <span class="number">234px</span> <span class="number">80px</span> <span class="number">#FFF</span> , <span class="number">1790px</span> <span class="number">1079px</span> <span class="number">#FFF</span> , <span class="number">1270px</span> <span class="number">1768px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">587px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">1150px</span> <span class="number">1336px</span> <span class="number">#FFF</span> , <span class="number">568px</span> <span class="number">776px</span> <span class="number">#FFF</span> , <span class="number">839px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">1565px</span> <span class="number">267px</span> <span class="number">#FFF</span> , <span class="number">294px</span> <span class="number">1855px</span> <span class="number">#FFF</span> , <span class="number">524px</span> <span class="number">364px</span> <span class="number">#FFF</span> , <span class="number">734px</span> <span class="number">789px</span> <span class="number">#FFF</span> , <span class="number">1979px</span> <span class="number">1049px</span> <span class="number">#FFF</span> , <span class="number">1353px</span> <span class="number">410px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">438px</span> <span class="number">#FFF</span> , <span class="number">255px</span> <span class="number">1707px</span> <span class="number">#FFF</span> , <span class="number">1699px</span> <span class="number">580px</span> <span class="number">#FFF</span> , <span class="number">1812px</span> <span class="number">1261px</span> <span class="number">#FFF</span> , <span class="number">84px</span> <span class="number">481px</span> <span class="number">#FFF</span> , <span class="number">921px</span> <span class="number">863px</span> <span class="number">#FFF</span> , <span class="number">113px</span> <span class="number">228px</span> <span class="number">#FFF</span> , <span class="number">980px</span> <span class="number">806px</span> <span class="number">#FFF</span> , <span class="number">920px</span> <span class="number">845px</span> <span class="number">#FFF</span> , <span class="number">1933px</span> <span class="number">623px</span> <span class="number">#FFF</span> , <span class="number">1744px</span> <span class="number">1304px</span> <span class="number">#FFF</span> , <span class="number">148px</span> <span class="number">40px</span> <span class="number">#FFF</span> , <span class="number">1732px</span> <span class="number">1292px</span> <span class="number">#FFF</span> , <span class="number">1487px</span> <span class="number">1736px</span> <span class="number">#FFF</span> , <span class="number">1123px</span> <span class="number">189px</span> <span class="number">#FFF</span> , <span class="number">555px</span> <span class="number">1290px</span> <span class="number">#FFF</span> , <span class="number">1293px</span> <span class="number">1629px</span> <span class="number">#FFF</span> , <span class="number">1034px</span> <span class="number">521px</span> <span class="number">#FFF</span> , <span class="number">1573px</span> <span class="number">1332px</span> <span class="number">#FFF</span> , <span class="number">1679px</span> <span class="number">1906px</span> <span class="number">#FFF</span> , <span class="number">1834px</span> <span class="number">1062px</span> <span class="number">#FFF</span> , <span class="number">802px</span> <span class="number">1374px</span> <span class="number">#FFF</span> , <span class="number">863px</span> <span class="number">66px</span> <span class="number">#FFF</span> , <span class="number">660px</span> <span class="number">1260px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1012px</span> <span class="number">#FFF</span> , <span class="number">1698px</span> <span class="number">964px</span> <span class="number">#FFF</span> , <span class="number">260px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">402px</span> <span class="number">1064px</span> <span class="number">#FFF</span> , <span class="number">621px</span> <span class="number">1517px</span> <span class="number">#FFF</span> , <span class="number">989px</span> <span class="number">822px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">29px</span> <span class="number">#FFF</span> , <span class="number">1342px</span> <span class="number">1655px</span> <span class="number">#FFF</span> , <span class="number">1314px</span> <span class="number">389px</span> <span class="number">#FFF</span> , <span class="number">807px</span> <span class="number">1137px</span> <span class="number">#FFF</span> , <span class="number">1820px</span> <span class="number">831px</span> <span class="number">#FFF</span> , <span class="number">394px</span> <span class="number">658px</span> <span class="number">#FFF</span> , <span class="number">1234px</span> <span class="number">562px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">1674px</span> <span class="number">#FFF</span> , <span class="number">180px</span> <span class="number">836px</span> <span class="number">#FFF</span> , <span class="number">1291px</span> <span class="number">506px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">480px</span> <span class="number">#FFF</span> , <span class="number">970px</span> <span class="number">1767px</span> <span class="number">#FFF</span> , <span class="number">1066px</span> <span class="number">1142px</span> <span class="number">#FFF</span> , <span class="number">351px</span> <span class="number">1465px</span> <span class="number">#FFF</span> , <span class="number">1446px</span> <span class="number">1909px</span> <span class="number">#FFF</span> , <span class="number">254px</span> <span class="number">306px</span> <span class="number">#FFF</span> , <span class="number">1969px</span> <span class="number">1642px</span> <span class="number">#FFF</span> , <span class="number">269px</span> <span class="number">404px</span> <span class="number">#FFF</span> , <span class="number">838px</span> <span class="number">98px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">1030px</span> <span class="number">1033px</span> <span class="number">#FFF</span> , <span class="number">962px</span> <span class="number">1694px</span> <span class="number">#FFF</span> , <span class="number">284px</span> <span class="number">497px</span> <span class="number">#FFF</span> , <span class="number">109px</span> <span class="number">1796px</span> <span class="number">#FFF</span> , <span class="number">1897px</span> <span class="number">592px</span> <span class="number">#FFF</span> , <span class="number">1108px</span> <span class="number">1186px</span> <span class="number">#FFF</span> , <span class="number">1464px</span> <span class="number">990px</span> <span class="number">#FFF</span> , <span class="number">329px</span> <span class="number">1595px</span> <span class="number">#FFF</span> , <span class="number">1524px</span> <span class="number">1046px</span> <span class="number">#FFF</span> , <span class="number">454px</span> <span class="number">280px</span> <span class="number">#FFF</span> , <span class="number">248px</span> <span class="number">493px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1145px</span> <span class="number">#FFF</span> , <span class="number">865px</span> <span class="number">1223px</span> <span class="number">#FFF</span> , <span class="number">1045px</span> <span class="number">57px</span> <span class="number">#FFF</span> , <span class="number">777px</span> <span class="number">128px</span> <span class="number">#FFF</span> , <span class="number">1929px</span> <span class="number">565px</span> <span class="number">#FFF</span> , <span class="number">880px</span> <span class="number">1923px</span> <span class="number">#FFF</span> , <span class="number">1555px</span> <span class="number">20px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">26px</span> <span class="number">#FFF</span> , <span class="number">1986px</span> <span class="number">182px</span> <span class="number">#FFF</span> , <span class="number">588px</span> <span class="number">659px</span> <span class="number">#FFF</span> , <span class="number">531px</span> <span class="number">1025px</span> <span class="number">#FFF</span> , <span class="number">1503px</span> <span class="number">448px</span> <span class="number">#FFF</span> , <span class="number">1437px</span> <span class="number">816px</span> <span class="number">#FFF</span> , <span class="number">171px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">416px</span> <span class="number">1692px</span> <span class="number">#FFF</span> , <span class="number">21px</span> <span class="number">1457px</span> <span class="number">#FFF</span> , <span class="number">135px</span> <span class="number">1158px</span> <span class="number">#FFF</span> , <span class="number">828px</span> <span class="number">499px</span> <span class="number">#FFF</span> , <span class="number">1748px</span> <span class="number">666px</span> <span class="number">#FFF</span> , <span class="number">749px</span> <span class="number">549px</span> <span class="number">#FFF</span> , <span class="number">320px</span> <span class="number">1241px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">624px</span> <span class="number">#FFF</span> , <span class="number">287px</span> <span class="number">935px</span> <span class="number">#FFF</span> , <span class="number">739px</span> <span class="number">397px</span> <span class="number">#FFF</span> , <span class="number">1319px</span> <span class="number">1371px</span> <span class="number">#FFF</span> , <span class="number">1257px</span> <span class="number">1186px</span> <span class="number">#FFF</span> , <span class="number">46px</span> <span class="number">1278px</span> <span class="number">#FFF</span> , <span class="number">1826px</span> <span class="number">1073px</span> <span class="number">#FFF</span> , <span class="number">1530px</span> <span class="number">1720px</span> <span class="number">#FFF</span> , <span class="number">1302px</span> <span class="number">548px</span> <span class="number">#FFF</span> , <span class="number">1411px</span> <span class="number">550px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">615px</span> <span class="number">#FFF</span> , <span class="number">404px</span> <span class="number">1006px</span> <span class="number">#FFF</span> , <span class="number">1119px</span> <span class="number">1467px</span> <span class="number">#FFF</span> , <span class="number">1154px</span> <span class="number">1330px</span> <span class="number">#FFF</span> , <span class="number">1585px</span> <span class="number">248px</span> <span class="number">#FFF</span> , <span class="number">1080px</span> <span class="number">671px</span> <span class="number">#FFF</span> , <span class="number">219px</span> <span class="number">1195px</span> <span class="number">#FFF</span> , <span class="number">903px</span> <span class="number">584px</span> <span class="number">#FFF</span> , <span class="number">711px</span> <span class="number">1244px</span> <span class="number">#FFF</span> , <span class="number">730px</span> <span class="number">1427px</span> <span class="number">#FFF</span> , <span class="number">1891px</span> <span class="number">1491px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">1196px</span> <span class="number">#FFF</span> , <span class="number">1605px</span> <span class="number">140px</span> <span class="number">#FFF</span> , <span class="number">384px</span> <span class="number">194px</span> <span class="number">#FFF</span> , <span class="number">148px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">837px</span> <span class="number">1028px</span> <span class="number">#FFF</span> , <span class="number">1949px</span> <span class="number">1981px</span> <span class="number">#FFF</span> , <span class="number">159px</span> <span class="number">1530px</span> <span class="number">#FFF</span> , <span class="number">1763px</span> <span class="number">1244px</span> <span class="number">#FFF</span> , <span class="number">713px</span> <span class="number">1187px</span> <span class="number">#FFF</span> , <span class="number">1356px</span> <span class="number">766px</span> <span class="number">#FFF</span> , <span class="number">387px</span> <span class="number">280px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">240px</span> <span class="number">#FFF</span> , <span class="number">42px</span> <span class="number">840px</span> <span class="number">#FFF</span> , <span class="number">1178px</span> <span class="number">253px</span> <span class="number">#FFF</span> , <span class="number">1075px</span> <span class="number">1392px</span> <span class="number">#FFF</span> , <span class="number">1944px</span> <span class="number">1639px</span> <span class="number">#FFF</span> , <span class="number">748px</span> <span class="number">178px</span> <span class="number">#FFF</span> , <span class="number">1952px</span> <span class="number">1310px</span> <span class="number">#FFF</span> , <span class="number">1918px</span> <span class="number">1612px</span> <span class="number">#FFF</span> , <span class="number">557px</span> <span class="number">755px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">192px</span> <span class="number">1863px</span> <span class="number">#FFF</span> , <span class="number">489px</span> <span class="number">1175px</span> <span class="number">#FFF</span> , <span class="number">647px</span> <span class="number">105px</span> <span class="number">#FFF</span> , <span class="number">498px</span> <span class="number">1477px</span> <span class="number">#FFF</span> , <span class="number">1398px</span> <span class="number">1548px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">980px</span> <span class="number">#FFF</span> , <span class="number">1412px</span> <span class="number">347px</span> <span class="number">#FFF</span> , <span class="number">291px</span> <span class="number">755px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">232px</span> <span class="number">#FFF</span> , <span class="number">681px</span> <span class="number">20px</span> <span class="number">#FFF</span> , <span class="number">261px</span> <span class="number">391px</span> <span class="number">#FFF</span> , <span class="number">256px</span> <span class="number">1048px</span> <span class="number">#FFF</span> , <span class="number">876px</span> <span class="number">1530px</span> <span class="number">#FFF</span> , <span class="number">1003px</span> <span class="number">1213px</span> <span class="number">#FFF</span> , <span class="number">1626px</span> <span class="number">940px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1974px</span> <span class="number">#FFF</span> , <span class="number">767px</span> <span class="number">1944px</span> <span class="number">#FFF</span> , <span class="number">721px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">1284px</span> <span class="number">629px</span> <span class="number">#FFF</span> , <span class="number">1813px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">465px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">1980px</span> <span class="number">#FFF</span> , <span class="number">935px</span> <span class="number">542px</span> <span class="number">#FFF</span> , <span class="number">331px</span> <span class="number">1468px</span> <span class="number">#FFF</span> , <span class="number">1173px</span> <span class="number">1095px</span> <span class="number">#FFF</span> , <span class="number">29px</span> <span class="number">1107px</span> <span class="number">#FFF</span> , <span class="number">1810px</span> <span class="number">715px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1476px</span> <span class="number">#FFF</span> , <span class="number">1801px</span> <span class="number">1739px</span> <span class="number">#FFF</span> , <span class="number">1989px</span> <span class="number">599px</span> <span class="number">#FFF</span> , <span class="number">1656px</span> <span class="number">1744px</span> <span class="number">#FFF</span> , <span class="number">1117px</span> <span class="number">1377px</span> <span class="number">#FFF</span> , <span class="number">1757px</span> <span class="number">800px</span> <span class="number">#FFF</span> , <span class="number">373px</span> <span class="number">1151px</span> <span class="number">#FFF</span> , <span class="number">1001px</span> <span class="number">64px</span> <span class="number">#FFF</span> , <span class="number">1828px</span> <span class="number">1355px</span> <span class="number">#FFF</span> , <span class="number">1493px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">176px</span> <span class="number">497px</span> <span class="number">#FFF</span> , <span class="number">683px</span> <span class="number">1634px</span> <span class="number">#FFF</span> , <span class="number">1120px</span> <span class="number">659px</span> <span class="number">#FFF</span> , <span class="number">648px</span> <span class="number">1643px</span> <span class="number">#FFF</span> , <span class="number">1281px</span> <span class="number">347px</span> <span class="number">#FFF</span> , <span class="number">105px</span> <span class="number">1309px</span> <span class="number">#FFF</span> , <span class="number">77px</span> <span class="number">1335px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1892px</span> <span class="number">#FFF</span> , <span class="number">868px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">319px</span> <span class="number">1180px</span> <span class="number">#FFF</span> , <span class="number">860px</span> <span class="number">1263px</span> <span class="number">#FFF</span> , <span class="number">447px</span> <span class="number">916px</span> <span class="number">#FFF</span> , <span class="number">723px</span> <span class="number">402px</span> <span class="number">#FFF</span> , <span class="number">875px</span> <span class="number">283px</span> <span class="number">#FFF</span> , <span class="number">1330px</span> <span class="number">1083px</span> <span class="number">#FFF</span> , <span class="number">1175px</span> <span class="number">819px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1469px</span> <span class="number">#FFF</span> , <span class="number">680px</span> <span class="number">371px</span> <span class="number">#FFF</span> , <span class="number">1357px</span> <span class="number">1235px</span> <span class="number">#FFF</span> , <span class="number">1223px</span> <span class="number">1701px</span> <span class="number">#FFF</span> , <span class="number">1452px</span> <span class="number">1322px</span> <span class="number">#FFF</span> , <span class="number">32px</span> <span class="number">882px</span> <span class="number">#FFF</span> , <span class="number">1545px</span> <span class="number">407px</span> <span class="number">#FFF</span> , <span class="number">1924px</span> <span class="number">1404px</span> <span class="number">#FFF</span> , <span class="number">1846px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">216px</span> <span class="number">1421px</span> <span class="number">#FFF</span> , <span class="number">1421px</span> <span class="number">1584px</span> <span class="number">#FFF</span> , <span class="number">1167px</span> <span class="number">1901px</span> <span class="number">#FFF</span> , <span class="number">276px</span> <span class="number">1756px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">1856px</span> <span class="number">#FFF</span> , <span class="number">359px</span> <span class="number">1199px</span> <span class="number">#FFF</span> , <span class="number">1143px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">891px</span> <span class="number">635px</span> <span class="number">#FFF</span> , <span class="number">579px</span> <span class="number">230px</span> <span class="number">#FFF</span> , <span class="number">570px</span> <span class="number">676px</span> <span class="number">#FFF</span> , <span class="number">1156px</span> <span class="number">1764px</span> <span class="number">#FFF</span> , <span class="number">944px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">301px</span> <span class="number">666px</span> <span class="number">#FFF</span> , <span class="number">209px</span> <span class="number">1005px</span> <span class="number">#FFF</span> , <span class="number">460px</span> <span class="number">677px</span> <span class="number">#FFF</span> , <span class="number">186px</span> <span class="number">1260px</span> <span class="number">#FFF</span> , <span class="number">849px</span> <span class="number">284px</span> <span class="number">#FFF</span> , <span class="number">240px</span> <span class="number">1059px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">1959px</span> <span class="number">#FFF</span> , <span class="number">783px</span> <span class="number">328px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">128px</span> <span class="number">#FFF</span> , <span class="number">1884px</span> <span class="number">1051px</span> <span class="number">#FFF</span> , <span class="number">842px</span> <span class="number">758px</span> <span class="number">#FFF</span> , <span class="number">1848px</span> <span class="number">318px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">348px</span> <span class="number">#FFF</span> , <span class="number">1242px</span> <span class="number">1496px</span> <span class="number">#FFF</span> , <span class="number">441px</span> <span class="number">712px</span> <span class="number">#FFF</span> , <span class="number">1039px</span> <span class="number">113px</span> <span class="number">#FFF</span> , <span class="number">1994px</span> <span class="number">749px</span> <span class="number">#FFF</span> , <span class="number">1777px</span> <span class="number">1596px</span> <span class="number">#FFF</span> , <span class="number">1471px</span> <span class="number">1817px</span> <span class="number">#FFF</span> , <span class="number">1482px</span> <span class="number">1668px</span> <span class="number">#FFF</span> , <span class="number">1837px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">1272px</span> <span class="number">1285px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">1669px</span> <span class="number">#FFF</span> , <span class="number">104px</span> <span class="number">1968px</span> <span class="number">#FFF</span> , <span class="number">1570px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">1225px</span> <span class="number">1879px</span> <span class="number">#FFF</span> , <span class="number">885px</span> <span class="number">1156px</span> <span class="number">#FFF</span> , <span class="number">1392px</span> <span class="number">121px</span> <span class="number">#FFF</span> , <span class="number">1754px</span> <span class="number">1477px</span> <span class="number">#FFF</span> , <span class="number">251px</span> <span class="number">1060px</span> <span class="number">#FFF</span> , <span class="number">1701px</span> <span class="number">547px</span> <span class="number">#FFF</span> , <span class="number">1847px</span> <span class="number">114px</span> <span class="number">#FFF</span> , <span class="number">1733px</span> <span class="number">1932px</span> <span class="number">#FFF</span> , <span class="number">1178px</span> <span class="number">873px</span> <span class="number">#FFF</span> , <span class="number">553px</span> <span class="number">191px</span> <span class="number">#FFF</span> , <span class="number">1974px</span> <span class="number">1659px</span> <span class="number">#FFF</span> , <span class="number">1155px</span> <span class="number">612px</span> <span class="number">#FFF</span> , <span class="number">1509px</span> <span class="number">1533px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">1148px</span> <span class="number">#FFF</span> , <span class="number">1708px</span> <span class="number">224px</span> <span class="number">#FFF</span> , <span class="number">1358px</span> <span class="number">1235px</span> <span class="number">#FFF</span> , <span class="number">293px</span> <span class="number">608px</span> <span class="number">#FFF</span> , <span class="number">424px</span> <span class="number">639px</span> <span class="number">#FFF</span> , <span class="number">347px</span> <span class="number">1944px</span> <span class="number">#FFF</span> , <span class="number">1813px</span> <span class="number">243px</span> <span class="number">#FFF</span> , <span class="number">150px</span> <span class="number">1042px</span> <span class="number">#FFF</span> , <span class="number">36px</span> <span class="number">1533px</span> <span class="number">#FFF</span> , <span class="number">1215px</span> <span class="number">64px</span> <span class="number">#FFF</span> , <span class="number">1393px</span> <span class="number">730px</span> <span class="number">#FFF</span> , <span class="number">567px</span> <span class="number">1509px</span> <span class="number">#FFF</span> , <span class="number">1209px</span> <span class="number">1055px</span> <span class="number">#FFF</span> , <span class="number">1969px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1458px</span> <span class="number">42px</span> <span class="number">#FFF</span> , <span class="number">1494px</span> <span class="number">817px</span> <span class="number">#FFF</span> , <span class="number">1863px</span> <span class="number">1290px</span> <span class="number">#FFF</span> , <span class="number">1508px</span> <span class="number">1194px</span> <span class="number">#FFF</span> , <span class="number">1607px</span> <span class="number">906px</span> <span class="number">#FFF</span> , <span class="number">1371px</span> <span class="number">997px</span> <span class="number">#FFF</span> , <span class="number">573px</span> <span class="number">871px</span> <span class="number">#FFF</span> , <span class="number">1625px</span> <span class="number">1930px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">1835px</span> <span class="number">#FFF</span> , <span class="number">1400px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">467px</span> <span class="number">1695px</span> <span class="number">#FFF</span> , <span class="number">911px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1745px</span> <span class="number">766px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">1602px</span> <span class="number">#FFF</span> , <span class="number">1940px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1468px</span> <span class="number">1035px</span> <span class="number">#FFF</span> , <span class="number">1298px</span> <span class="number">992px</span> <span class="number">#FFF</span> , <span class="number">874px</span> <span class="number">1589px</span> <span class="number">#FFF</span> , <span class="number">1288px</span> <span class="number">721px</span> <span class="number">#FFF</span> , <span class="number">1611px</span> <span class="number">905px</span> <span class="number">#FFF</span> , <span class="number">569px</span> <span class="number">1548px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1668px</span> <span class="number">1903px</span> <span class="number">#FFF</span> , <span class="number">267px</span> <span class="number">1053px</span> <span class="number">#FFF</span> , <span class="number">1403px</span> <span class="number">4px</span> <span class="number">#FFF</span> , <span class="number">1722px</span> <span class="number">91px</span> <span class="number">#FFF</span> , <span class="number">863px</span> <span class="number">1904px</span> <span class="number">#FFF</span> , <span class="number">120px</span> <span class="number">1878px</span> <span class="number">#FFF</span> , <span class="number">21px</span> <span class="number">47px</span> <span class="number">#FFF</span> , <span class="number">1384px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1000px</span> <span class="number">1523px</span> <span class="number">#FFF</span> , <span class="number">1019px</span> <span class="number">1768px</span> <span class="number">#FFF</span> , <span class="number">811px</span> <span class="number">209px</span> <span class="number">#FFF</span> , <span class="number">950px</span> <span class="number">1763px</span> <span class="number">#FFF</span> , <span class="number">504px</span> <span class="number">1011px</span> <span class="number">#FFF</span> , <span class="number">420px</span> <span class="number">1424px</span> <span class="number">#FFF</span> , <span class="number">1606px</span> <span class="number">747px</span> <span class="number">#FFF</span> , <span class="number">1073px</span> <span class="number">9px</span> <span class="number">#FFF</span> , <span class="number">860px</span> <span class="number">1731px</span> <span class="number">#FFF</span> , <span class="number">473px</span> <span class="number">990px</span> <span class="number">#FFF</span> , <span class="number">922px</span> <span class="number">1704px</span> <span class="number">#FFF</span> , <span class="number">371px</span> <span class="number">15px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">423px</span> <span class="number">1259px</span> <span class="number">#FFF</span> , <span class="number">1974px</span> <span class="number">1100px</span> <span class="number">#FFF</span> , <span class="number">183px</span> <span class="number">615px</span> <span class="number">#FFF</span> , <span class="number">1430px</span> <span class="number">6px</span> <span class="number">#FFF</span> , <span class="number">909px</span> <span class="number">296px</span> <span class="number">#FFF</span> , <span class="number">449px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">155px</span> <span class="number">#FFF</span> , <span class="number">824px</span> <span class="number">706px</span> <span class="number">#FFF</span> , <span class="number">1097px</span> <span class="number">429px</span> <span class="number">#FFF</span> , <span class="number">1104px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1851px</span> <span class="number">#FFF</span> , <span class="number">1224px</span> <span class="number">1554px</span> <span class="number">#FFF</span> , <span class="number">521px</span> <span class="number">1040px</span> <span class="number">#FFF</span> , <span class="number">160px</span> <span class="number">1852px</span> <span class="number">#FFF</span> , <span class="number">1564px</span> <span class="number">1782px</span> <span class="number">#FFF</span> , <span class="number">320px</span> <span class="number">1490px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">741px</span> <span class="number">#FFF</span> , <span class="number">236px</span> <span class="number">214px</span> <span class="number">#FFF</span> , <span class="number">878px</span> <span class="number">1068px</span> <span class="number">#FFF</span> , <span class="number">1698px</span> <span class="number">1752px</span> <span class="number">#FFF</span> , <span class="number">1844px</span> <span class="number">799px</span> <span class="number">#FFF</span> , <span class="number">55px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">690px</span> <span class="number">1503px</span> <span class="number">#FFF</span> , <span class="number">869px</span> <span class="number">1066px</span> <span class="number">#FFF</span> , <span class="number">840px</span> <span class="number">204px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">863px</span> <span class="number">#FFF</span> , <span class="number">1315px</span> <span class="number">960px</span> <span class="number">#FFF</span> , <span class="number">370px</span> <span class="number">1418px</span> <span class="number">#FFF</span> , <span class="number">990px</span> <span class="number">1869px</span> <span class="number">#FFF</span> , <span class="number">1560px</span> <span class="number">1981px</span> <span class="number">#FFF</span> , <span class="number">66px</span> <span class="number">1315px</span> <span class="number">#FFF</span> , <span class="number">834px</span> <span class="number">1874px</span> <span class="number">#FFF</span> , <span class="number">1946px</span> <span class="number">1621px</span> <span class="number">#FFF</span> , <span class="number">1062px</span> <span class="number">379px</span> <span class="number">#FFF</span> , <span class="number">1688px</span> <span class="number">1972px</span> <span class="number">#FFF</span> , <span class="number">526px</span> <span class="number">876px</span> <span class="number">#FFF</span> , <span class="number">1121px</span> <span class="number">1353px</span> <span class="number">#FFF</span> , <span class="number">1963px</span> <span class="number">1242px</span> <span class="number">#FFF</span> , <span class="number">1456px</span> <span class="number">1033px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">1617px</span> <span class="number">#FFF</span> , <span class="number">582px</span> <span class="number">1325px</span> <span class="number">#FFF</span> , <span class="number">312px</span> <span class="number">182px</span> <span class="number">#FFF</span> , <span class="number">1815px</span> <span class="number">1006px</span> <span class="number">#FFF</span> , <span class="number">513px</span> <span class="number">1826px</span> <span class="number">#FFF</span> , <span class="number">173px</span> <span class="number">398px</span> <span class="number">#FFF</span> , <span class="number">1892px</span> <span class="number">432px</span> <span class="number">#FFF</span> , <span class="number">374px</span> <span class="number">432px</span> <span class="number">#FFF</span> , <span class="number">645px</span> <span class="number">735px</span> <span class="number">#FFF</span> , <span class="number">156px</span> <span class="number">1706px</span> <span class="number">#FFF</span> , <span class="number">1596px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">1661px</span> <span class="number">845px</span> <span class="number">#FFF</span> , <span class="number">831px</span> <span class="number">561px</span> <span class="number">#FFF</span> , <span class="number">966px</span> <span class="number">1432px</span> <span class="number">#FFF</span> , <span class="number">227px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">1088px</span> <span class="number">1804px</span> <span class="number">#FFF</span> , <span class="number">972px</span> <span class="number">594px</span> <span class="number">#FFF</span> , <span class="number">367px</span> <span class="number">1189px</span> <span class="number">#FFF</span> , <span class="number">1527px</span> <span class="number">1909px</span> <span class="number">#FFF</span> , <span class="number">1240px</span> <span class="number">290px</span> <span class="number">#FFF</span> , <span class="number">676px</span> <span class="number">1729px</span> <span class="number">#FFF</span> , <span class="number">1182px</span> <span class="number">1631px</span> <span class="number">#FFF</span> , <span class="number">200px</span> <span class="number">423px</span> <span class="number">#FFF</span> , <span class="number">1511px</span> <span class="number">1083px</span> <span class="number">#FFF</span> , <span class="number">378px</span> <span class="number">1487px</span> <span class="number">#FFF</span> , <span class="number">1876px</span> <span class="number">613px</span> <span class="number">#FFF</span> , <span class="number">432px</span> <span class="number">696px</span> <span class="number">#FFF</span> , <span class="number">1472px</span> <span class="number">32px</span> <span class="number">#FFF</span> , <span class="number">691px</span> <span class="number">1422px</span> <span class="number">#FFF</span> , <span class="number">666px</span> <span class="number">67px</span> <span class="number">#FFF</span> , <span class="number">1280px</span> <span class="number">333px</span> <span class="number">#FFF</span> , <span class="number">35px</span> <span class="number">843px</span> <span class="number">#FFF</span> , <span class="number">803px</span> <span class="number">384px</span> <span class="number">#FFF</span> , <span class="number">1272px</span> <span class="number">359px</span> <span class="number">#FFF</span> , <span class="number">1074px</span> <span class="number">397px</span> <span class="number">#FFF</span> , <span class="number">1757px</span> <span class="number">100px</span> <span class="number">#FFF</span> , <span class="number">1391px</span> <span class="number">360px</span> <span class="number">#FFF</span> , <span class="number">1601px</span> <span class="number">1885px</span> <span class="number">#FFF</span> , <span class="number">1277px</span> <span class="number">1009px</span> <span class="number">#FFF</span> , <span class="number">1025px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">1262px</span> <span class="number">1473px</span> <span class="number">#FFF</span> , <span class="number">1179px</span> <span class="number">941px</span> <span class="number">#FFF</span> , <span class="number">1630px</span> <span class="number">722px</span> <span class="number">#FFF</span> , <span class="number">1318px</span> <span class="number">234px</span> <span class="number">#FFF</span> , <span class="number">235px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">637px</span> <span class="number">1605px</span> <span class="number">#FFF</span> , <span class="number">648px</span> <span class="number">138px</span> <span class="number">#FFF</span> , <span class="number">718px</span> <span class="number">391px</span> <span class="number">#FFF</span> , <span class="number">893px</span> <span class="number">1863px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">359px</span> <span class="number">#FFF</span> , <span class="number">656px</span> <span class="number">1583px</span> <span class="number">#FFF</span> , <span class="number">1285px</span> <span class="number">12px</span> <span class="number">#FFF</span> , <span class="number">762px</span> <span class="number">1806px</span> <span class="number">#FFF</span> , <span class="number">1164px</span> <span class="number">1280px</span> <span class="number">#FFF</span> , <span class="number">1528px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">67px</span> <span class="number">82px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">1047px</span> <span class="number">#FFF</span> , <span class="number">1926px</span> <span class="number">1683px</span> <span class="number">#FFF</span> , <span class="number">1701px</span> <span class="number">609px</span> <span class="number">#FFF</span> , <span class="number">862px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">175px</span> <span class="number">364px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">1183px</span> <span class="number">#FFF</span> , <span class="number">1011px</span> <span class="number">100px</span> <span class="number">#FFF</span> , <span class="number">1967px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">327px</span> <span class="number">77px</span> <span class="number">#FFF</span> , <span class="number">1044px</span> <span class="number">681px</span> <span class="number">#FFF</span> , <span class="number">801px</span> <span class="number">1912px</span> <span class="number">#FFF</span> , <span class="number">1633px</span> <span class="number">1110px</span> <span class="number">#FFF</span> , <span class="number">1691px</span> <span class="number">925px</span> <span class="number">#FFF</span> , <span class="number">342px</span> <span class="number">148px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">119px</span> <span class="number">#FFF</span> , <span class="number">1717px</span> <span class="number">1051px</span> <span class="number">#FFF</span> , <span class="number">923px</span> <span class="number">1804px</span> <span class="number">#FFF</span> , <span class="number">1504px</span> <span class="number">1465px</span> <span class="number">#FFF</span> , <span class="number">1027px</span> <span class="number">1205px</span> <span class="number">#FFF</span> , <span class="number">1086px</span> <span class="number">1662px</span> <span class="number">#FFF</span> , <span class="number">605px</span> <span class="number">763px</span> <span class="number">#FFF</span> , <span class="number">978px</span> <span class="number">624px</span> <span class="number">#FFF</span> , <span class="number">551px</span> <span class="number">1242px</span> <span class="number">#FFF</span> , <span class="number">1248px</span> <span class="number">297px</span> <span class="number">#FFF</span> , <span class="number">676px</span> <span class="number">1534px</span> <span class="number">#FFF</span> , <span class="number">1713px</span> <span class="number">1868px</span> <span class="number">#FFF</span> , <span class="number">1684px</span> <span class="number">915px</span> <span class="number">#FFF</span> , <span class="number">1657px</span> <span class="number">952px</span> <span class="number">#FFF</span> , <span class="number">168px</span> <span class="number">556px</span> <span class="number">#FFF</span> , <span class="number">1573px</span> <span class="number">481px</span> <span class="number">#FFF</span> , <span class="number">213px</span> <span class="number">1525px</span> <span class="number">#FFF</span> , <span class="number">203px</span> <span class="number">780px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">265px</span> <span class="number">#FFF</span> , <span class="number">23px</span> <span class="number">676px</span> <span class="number">#FFF</span> , <span class="number">1367px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">651px</span> <span class="number">1047px</span> <span class="number">#FFF</span> , <span class="number">445px</span> <span class="number">1194px</span> <span class="number">#FFF</span> , <span class="number">1483px</span> <span class="number">1439px</span> <span class="number">#FFF</span> , <span class="number">1669px</span> <span class="number">1499px</span> <span class="number">#FFF</span> , <span class="number">1499px</span> <span class="number">1596px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1044px</span> <span class="number">918px</span> <span class="number">#FFF</span> , <span class="number">642px</span> <span class="number">1615px</span> <span class="number">#FFF</span> , <span class="number">1158px</span> <span class="number">847px</span> <span class="number">#FFF</span> , <span class="number">1553px</span> <span class="number">1546px</span> <span class="number">#FFF</span> , <span class="number">1527px</span> <span class="number">486px</span> <span class="number">#FFF</span> , <span class="number">355px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">1991px</span> <span class="number">494px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1958px</span> <span class="number">#FFF</span> , <span class="number">601px</span> <span class="number">543px</span> <span class="number">#FFF</span> , <span class="number">1217px</span> <span class="number">1684px</span> <span class="number">#FFF</span> , <span class="number">1150px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1875px</span> <span class="number">1843px</span> <span class="number">#FFF</span> , <span class="number">1857px</span> <span class="number">1106px</span> <span class="number">#FFF</span> , <span class="number">1957px</span> <span class="number">1456px</span> <span class="number">#FFF</span> , <span class="number">698px</span> <span class="number">558px</span> <span class="number">#FFF</span> , <span class="number">1700px</span> <span class="number">1333px</span> <span class="number">#FFF</span> , <span class="number">808px</span> <span class="number">965px</span> <span class="number">#FFF</span> , <span class="number">1654px</span> <span class="number">407px</span> <span class="number">#FFF</span> , <span class="number">1649px</span> <span class="number">547px</span> <span class="number">#FFF</span> , <span class="number">1862px</span> <span class="number">946px</span> <span class="number">#FFF</span> , <span class="number">38px</span> <span class="number">808px</span> <span class="number">#FFF</span> , <span class="number">1254px</span> <span class="number">578px</span> <span class="number">#FFF</span> , <span class="number">1991px</span> <span class="number">243px</span> <span class="number">#FFF</span> , <span class="number">363px</span> <span class="number">76px</span> <span class="number">#FFF</span> , <span class="number">111px</span> <span class="number">1093px</span> <span class="number">#FFF</span> , <span class="number">1096px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">1449px</span> <span class="number">1545px</span> <span class="number">#FFF</span> , <span class="number">210px</span> <span class="number">576px</span> <span class="number">#FFF</span> , <span class="number">321px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1434px</span> <span class="number">662px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">895px</span> <span class="number">#FFF</span> , <span class="number">510px</span> <span class="number">330px</span> <span class="number">#FFF</span> , <span class="number">589px</span> <span class="number">1522px</span> <span class="number">#FFF</span> , <span class="number">720px</span> <span class="number">1862px</span> <span class="number">#FFF</span> , <span class="number">138px</span> <span class="number">1195px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">319px</span> <span class="number">#FFF</span> , <span class="number">814px</span> <span class="number">1434px</span> <span class="number">#FFF</span> , <span class="number">1440px</span> <span class="number">274px</span> <span class="number">#FFF</span> , <span class="number">795px</span> <span class="number">607px</span> <span class="number">#FFF</span> , <span class="number">1860px</span> <span class="number">1988px</span> <span class="number">#FFF</span> , <span class="number">1085px</span> <span class="number">204px</span> <span class="number">#FFF</span> , <span class="number">394px</span> <span class="number">1151px</span> <span class="number">#FFF</span> , <span class="number">1247px</span> <span class="number">870px</span> <span class="number">#FFF</span> , <span class="number">189px</span> <span class="number">1638px</span> <span class="number">#FFF</span> , <span class="number">384px</span> <span class="number">1430px</span> <span class="number">#FFF</span> , <span class="number">1914px</span> <span class="number">895px</span> <span class="number">#FFF</span> , <span class="number">48px</span> <span class="number">1777px</span> <span class="number">#FFF</span> , <span class="number">242px</span> <span class="number">1378px</span> <span class="number">#FFF</span> , <span class="number">343px</span> <span class="number">470px</span> <span class="number">#FFF</span> , <span class="number">893px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">1818px</span> <span class="number">354px</span> <span class="number">#FFF</span> , <span class="number">1260px</span> <span class="number">166px</span> <span class="number">#FFF</span> , <span class="number">960px</span> <span class="number">1561px</span> <span class="number">#FFF</span> , <span class="number">1072px</span> <span class="number">1416px</span> <span class="number">#FFF</span> , <span class="number">835px</span> <span class="number">213px</span> <span class="number">#FFF</span> , <span class="number">643px</span> <span class="number">1197px</span> <span class="number">#FFF</span> , <span class="number">1257px</span> <span class="number">1319px</span> <span class="number">#FFF</span> , <span class="number">508px</span> <span class="number">835px</span> <span class="number">#FFF</span> , <span class="number">1568px</span> <span class="number">901px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">233px</span> <span class="number">#FFF</span> , <span class="number">495px</span> <span class="number">716px</span> <span class="number">#FFF</span> , <span class="number">551px</span> <span class="number">1869px</span> <span class="number">#FFF</span> , <span class="number">1275px</span> <span class="number">1694px</span> <span class="number">#FFF</span> , <span class="number">1676px</span> <span class="number">302px</span> <span class="number">#FFF</span> , <span class="number">524px</span> <span class="number">300px</span> <span class="number">#FFF</span> , <span class="number">802px</span> <span class="number">1436px</span> <span class="number">#FFF</span> , <span class="number">520px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">511px</span> <span class="number">1722px</span> <span class="number">#FFF</span> , <span class="number">1640px</span> <span class="number">1315px</span> <span class="number">#FFF</span> , <span class="number">825px</span> <span class="number">886px</span> <span class="number">#FFF</span> , <span class="number">795px</span> <span class="number">1081px</span> <span class="number">#FFF</span> , <span class="number">1297px</span> <span class="number">672px</span> <span class="number">#FFF</span> , <span class="number">413px</span> <span class="number">1087px</span> <span class="number">#FFF</span> , <span class="number">330px</span> <span class="number">168px</span> <span class="number">#FFF</span> , <span class="number">745px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">275px</span> <span class="number">1856px</span> <span class="number">#FFF</span> , <span class="number">1312px</span> <span class="number">1284px</span> <span class="number">#FFF</span> , <span class="number">582px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">1647px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">1856px</span> <span class="number">794px</span> <span class="number">#FFF</span> , <span class="number">663px</span> <span class="number">1882px</span> <span class="number">#FFF</span> , <span class="number">949px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">1791px</span> <span class="number">#FFF</span> , <span class="number">233px</span> <span class="number">52px</span> <span class="number">#FFF</span> , <span class="number">139px</span> <span class="number">1133px</span> <span class="number">#FFF</span> , <span class="number">1057px</span> <span class="number">1972px</span> <span class="number">#FFF</span> , <span class="number">1602px</span> <span class="number">861px</span> <span class="number">#FFF</span> , <span class="number">1402px</span> <span class="number">713px</span> <span class="number">#FFF</span> , <span class="number">974px</span> <span class="number">862px</span> <span class="number">#FFF</span> , <span class="number">1341px</span> <span class="number">1705px</span> <span class="number">#FFF</span> , <span class="number">1987px</span> <span class="number">1598px</span> <span class="number">#FFF</span> , <span class="number">221px</span> <span class="number">482px</span> <span class="number">#FFF</span> , <span class="number">1080px</span> <span class="number">1117px</span> <span class="number">#FFF</span> , <span class="number">1589px</span> <span class="number">34px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">960px</span> <span class="number">#FFF</span> , <span class="number">1939px</span> <span class="number">253px</span> <span class="number">#FFF</span> , <span class="number">1349px</span> <span class="number">566px</span> <span class="number">#FFF</span> , <span class="number">1363px</span> <span class="number">1296px</span> <span class="number">#FFF</span> , <span class="number">136px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">606px</span> <span class="number">1376px</span> <span class="number">#FFF</span> , <span class="number">609px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">633px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">1967px</span> <span class="number">#FFF</span> , <span class="number">1340px</span> <span class="number">1519px</span> <span class="number">#FFF</span> , <span class="number">141px</span> <span class="number">1061px</span> <span class="number">#FFF</span> , <span class="number">123px</span> <span class="number">1427px</span> <span class="number">#FFF</span> , <span class="number">1075px</span> <span class="number">573px</span> <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">animation</span>: animStar <span class="number">50s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stars</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1747px</span> <span class="number">1720px</span> <span class="number">#FFF</span> , <span class="number">1693px</span> <span class="number">439px</span> <span class="number">#FFF</span> , <span class="number">699px</span> <span class="number">1744px</span> <span class="number">#FFF</span> , <span class="number">180px</span> <span class="number">479px</span> <span class="number">#FFF</span> , <span class="number">379px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">1294px</span> <span class="number">910px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1860px</span> <span class="number">#FFF</span> , <span class="number">270px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">252px</span> <span class="number">1651px</span> <span class="number">#FFF</span> , <span class="number">472px</span> <span class="number">1251px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">235px</span> <span class="number">#FFF</span> , <span class="number">311px</span> <span class="number">1770px</span> <span class="number">#FFF</span> , <span class="number">1469px</span> <span class="number">984px</span> <span class="number">#FFF</span> , <span class="number">1349px</span> <span class="number">1839px</span> <span class="number">#FFF</span> , <span class="number">525px</span> <span class="number">958px</span> <span class="number">#FFF</span> , <span class="number">753px</span> <span class="number">1748px</span> <span class="number">#FFF</span> , <span class="number">753px</span> <span class="number">1299px</span> <span class="number">#FFF</span> , <span class="number">530px</span> <span class="number">489px</span> <span class="number">#FFF</span> , <span class="number">1574px</span> <span class="number">311px</span> <span class="number">#FFF</span> , <span class="number">760px</span> <span class="number">76px</span> <span class="number">#FFF</span> , <span class="number">774px</span> <span class="number">837px</span> <span class="number">#FFF</span> , <span class="number">1505px</span> <span class="number">1499px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">512px</span> <span class="number">#FFF</span> , <span class="number">1587px</span> <span class="number">1312px</span> <span class="number">#FFF</span> , <span class="number">1072px</span> <span class="number">753px</span> <span class="number">#FFF</span> , <span class="number">911px</span> <span class="number">866px</span> <span class="number">#FFF</span> , <span class="number">1217px</span> <span class="number">1280px</span> <span class="number">#FFF</span> , <span class="number">226px</span> <span class="number">958px</span> <span class="number">#FFF</span> , <span class="number">1021px</span> <span class="number">149px</span> <span class="number">#FFF</span> , <span class="number">1129px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">1354px</span> <span class="number">#FFF</span> , <span class="number">12px</span> <span class="number">1248px</span> <span class="number">#FFF</span> , <span class="number">1816px</span> <span class="number">1631px</span> <span class="number">#FFF</span> , <span class="number">178px</span> <span class="number">1185px</span> <span class="number">#FFF</span> , <span class="number">628px</span> <span class="number">962px</span> <span class="number">#FFF</span> , <span class="number">1806px</span> <span class="number">315px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1436px</span> <span class="number">#FFF</span> , <span class="number">1133px</span> <span class="number">1304px</span> <span class="number">#FFF</span> , <span class="number">1539px</span> <span class="number">661px</span> <span class="number">#FFF</span> , <span class="number">342px</span> <span class="number">148px</span> <span class="number">#FFF</span> , <span class="number">138px</span> <span class="number">332px</span> <span class="number">#FFF</span> , <span class="number">1928px</span> <span class="number">612px</span> <span class="number">#FFF</span> , <span class="number">434px</span> <span class="number">970px</span> <span class="number">#FFF</span> , <span class="number">577px</span> <span class="number">456px</span> <span class="number">#FFF</span> , <span class="number">1132px</span> <span class="number">892px</span> <span class="number">#FFF</span> , <span class="number">1880px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">1524px</span> <span class="number">268px</span> <span class="number">#FFF</span> , <span class="number">1406px</span> <span class="number">1375px</span> <span class="number">#FFF</span> , <span class="number">747px</span> <span class="number">726px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">523px</span> <span class="number">#FFF</span> , <span class="number">1996px</span> <span class="number">1063px</span> <span class="number">#FFF</span> , <span class="number">1128px</span> <span class="number">595px</span> <span class="number">#FFF</span> , <span class="number">177px</span> <span class="number">1792px</span> <span class="number">#FFF</span> , <span class="number">1430px</span> <span class="number">477px</span> <span class="number">#FFF</span> , <span class="number">949px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">1949px</span> <span class="number">#FFF</span> , <span class="number">1958px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">1899px</span> <span class="number">1870px</span> <span class="number">#FFF</span> , <span class="number">1105px</span> <span class="number">208px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">719px</span> <span class="number">#FFF</span> , <span class="number">822px</span> <span class="number">598px</span> <span class="number">#FFF</span> , <span class="number">409px</span> <span class="number">1398px</span> <span class="number">#FFF</span> , <span class="number">345px</span> <span class="number">607px</span> <span class="number">#FFF</span> , <span class="number">160px</span> <span class="number">156px</span> <span class="number">#FFF</span> , <span class="number">946px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">1796px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">1896px</span> <span class="number">1125px</span> <span class="number">#FFF</span> , <span class="number">1731px</span> <span class="number">1802px</span> <span class="number">#FFF</span> , <span class="number">1147px</span> <span class="number">503px</span> <span class="number">#FFF</span> , <span class="number">525px</span> <span class="number">1562px</span> <span class="number">#FFF</span> , <span class="number">1791px</span> <span class="number">1266px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">312px</span> <span class="number">#FFF</span> , <span class="number">102px</span> <span class="number">1586px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1314px</span> <span class="number">#FFF</span> , <span class="number">781px</span> <span class="number">1403px</span> <span class="number">#FFF</span> , <span class="number">901px</span> <span class="number">1566px</span> <span class="number">#FFF</span> , <span class="number">1934px</span> <span class="number">1761px</span> <span class="number">#FFF</span> , <span class="number">767px</span> <span class="number">646px</span> <span class="number">#FFF</span> , <span class="number">797px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">889px</span> <span class="number">#FFF</span> , <span class="number">1165px</span> <span class="number">1607px</span> <span class="number">#FFF</span> , <span class="number">940px</span> <span class="number">1092px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">957px</span> <span class="number">#FFF</span> , <span class="number">1563px</span> <span class="number">1793px</span> <span class="number">#FFF</span> , <span class="number">83px</span> <span class="number">498px</span> <span class="number">#FFF</span> , <span class="number">1246px</span> <span class="number">492px</span> <span class="number">#FFF</span> , <span class="number">80px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">1137px</span> <span class="number">1795px</span> <span class="number">#FFF</span> , <span class="number">1365px</span> <span class="number">1816px</span> <span class="number">#FFF</span> , <span class="number">549px</span> <span class="number">1650px</span> <span class="number">#FFF</span> , <span class="number">1645px</span> <span class="number">1758px</span> <span class="number">#FFF</span> , <span class="number">244px</span> <span class="number">1543px</span> <span class="number">#FFF</span> , <span class="number">1941px</span> <span class="number">325px</span> <span class="number">#FFF</span> , <span class="number">1347px</span> <span class="number">1608px</span> <span class="number">#FFF</span> , <span class="number">409px</span> <span class="number">433px</span> <span class="number">#FFF</span> , <span class="number">1364px</span> <span class="number">552px</span> <span class="number">#FFF</span> , <span class="number">264px</span> <span class="number">1839px</span> <span class="number">#FFF</span> , <span class="number">1610px</span> <span class="number">581px</span> <span class="number">#FFF</span> , <span class="number">1225px</span> <span class="number">1386px</span> <span class="number">#FFF</span> , <span class="number">763px</span> <span class="number">1077px</span> <span class="number">#FFF</span> , <span class="number">1442px</span> <span class="number">1362px</span> <span class="number">#FFF</span> , <span class="number">1152px</span> <span class="number">794px</span> <span class="number">#FFF</span> , <span class="number">191px</span> <span class="number">1980px</span> <span class="number">#FFF</span> , <span class="number">1537px</span> <span class="number">281px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">749px</span> <span class="number">#FFF</span> , <span class="number">1906px</span> <span class="number">1489px</span> <span class="number">#FFF</span> , <span class="number">529px</span> <span class="number">1711px</span> <span class="number">#FFF</span> , <span class="number">272px</span> <span class="number">910px</span> <span class="number">#FFF</span> , <span class="number">26px</span> <span class="number">768px</span> <span class="number">#FFF</span> , <span class="number">1702px</span> <span class="number">1887px</span> <span class="number">#FFF</span> , <span class="number">531px</span> <span class="number">1236px</span> <span class="number">#FFF</span> , <span class="number">1911px</span> <span class="number">11px</span> <span class="number">#FFF</span> , <span class="number">875px</span> <span class="number">544px</span> <span class="number">#FFF</span> , <span class="number">1340px</span> <span class="number">443px</span> <span class="number">#FFF</span> , <span class="number">350px</span> <span class="number">343px</span> <span class="number">#FFF</span> , <span class="number">368px</span> <span class="number">1663px</span> <span class="number">#FFF</span> , <span class="number">1761px</span> <span class="number">671px</span> <span class="number">#FFF</span> , <span class="number">1246px</span> <span class="number">1936px</span> <span class="number">#FFF</span> , <span class="number">1927px</span> <span class="number">1611px</span> <span class="number">#FFF</span> , <span class="number">1630px</span> <span class="number">1003px</span> <span class="number">#FFF</span> , <span class="number">1602px</span> <span class="number">722px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">178px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">994px</span> <span class="number">#FFF</span> , <span class="number">1466px</span> <span class="number">296px</span> <span class="number">#FFF</span> , <span class="number">1192px</span> <span class="number">1239px</span> <span class="number">#FFF</span> , <span class="number">1864px</span> <span class="number">1361px</span> <span class="number">#FFF</span> , <span class="number">503px</span> <span class="number">153px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">1830px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">360px</span> <span class="number">236px</span> <span class="number">#FFF</span> , <span class="number">357px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">127px</span> <span class="number">847px</span> <span class="number">#FFF</span> , <span class="number">1729px</span> <span class="number">1178px</span> <span class="number">#FFF</span> , <span class="number">237px</span> <span class="number">1815px</span> <span class="number">#FFF</span> , <span class="number">608px</span> <span class="number">108px</span> <span class="number">#FFF</span> , <span class="number">1869px</span> <span class="number">1657px</span> <span class="number">#FFF</span> , <span class="number">1864px</span> <span class="number">664px</span> <span class="number">#FFF</span> , <span class="number">108px</span> <span class="number">175px</span> <span class="number">#FFF</span> , <span class="number">807px</span> <span class="number">851px</span> <span class="number">#FFF</span> , <span class="number">1031px</span> <span class="number">645px</span> <span class="number">#FFF</span> , <span class="number">1322px</span> <span class="number">16px</span> <span class="number">#FFF</span> , <span class="number">285px</span> <span class="number">154px</span> <span class="number">#FFF</span> , <span class="number">414px</span> <span class="number">404px</span> <span class="number">#FFF</span> , <span class="number">1750px</span> <span class="number">385px</span> <span class="number">#FFF</span> , <span class="number">450px</span> <span class="number">579px</span> <span class="number">#FFF</span> , <span class="number">1515px</span> <span class="number">546px</span> <span class="number">#FFF</span> , <span class="number">915px</span> <span class="number">1198px</span> <span class="number">#FFF</span> , <span class="number">921px</span> <span class="number">1940px</span> <span class="number">#FFF</span> , <span class="number">234px</span> <span class="number">80px</span> <span class="number">#FFF</span> , <span class="number">1790px</span> <span class="number">1079px</span> <span class="number">#FFF</span> , <span class="number">1270px</span> <span class="number">1768px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">587px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">1150px</span> <span class="number">1336px</span> <span class="number">#FFF</span> , <span class="number">568px</span> <span class="number">776px</span> <span class="number">#FFF</span> , <span class="number">839px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">1565px</span> <span class="number">267px</span> <span class="number">#FFF</span> , <span class="number">294px</span> <span class="number">1855px</span> <span class="number">#FFF</span> , <span class="number">524px</span> <span class="number">364px</span> <span class="number">#FFF</span> , <span class="number">734px</span> <span class="number">789px</span> <span class="number">#FFF</span> , <span class="number">1979px</span> <span class="number">1049px</span> <span class="number">#FFF</span> , <span class="number">1353px</span> <span class="number">410px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">438px</span> <span class="number">#FFF</span> , <span class="number">255px</span> <span class="number">1707px</span> <span class="number">#FFF</span> , <span class="number">1699px</span> <span class="number">580px</span> <span class="number">#FFF</span> , <span class="number">1812px</span> <span class="number">1261px</span> <span class="number">#FFF</span> , <span class="number">84px</span> <span class="number">481px</span> <span class="number">#FFF</span> , <span class="number">921px</span> <span class="number">863px</span> <span class="number">#FFF</span> , <span class="number">113px</span> <span class="number">228px</span> <span class="number">#FFF</span> , <span class="number">980px</span> <span class="number">806px</span> <span class="number">#FFF</span> , <span class="number">920px</span> <span class="number">845px</span> <span class="number">#FFF</span> , <span class="number">1933px</span> <span class="number">623px</span> <span class="number">#FFF</span> , <span class="number">1744px</span> <span class="number">1304px</span> <span class="number">#FFF</span> , <span class="number">148px</span> <span class="number">40px</span> <span class="number">#FFF</span> , <span class="number">1732px</span> <span class="number">1292px</span> <span class="number">#FFF</span> , <span class="number">1487px</span> <span class="number">1736px</span> <span class="number">#FFF</span> , <span class="number">1123px</span> <span class="number">189px</span> <span class="number">#FFF</span> , <span class="number">555px</span> <span class="number">1290px</span> <span class="number">#FFF</span> , <span class="number">1293px</span> <span class="number">1629px</span> <span class="number">#FFF</span> , <span class="number">1034px</span> <span class="number">521px</span> <span class="number">#FFF</span> , <span class="number">1573px</span> <span class="number">1332px</span> <span class="number">#FFF</span> , <span class="number">1679px</span> <span class="number">1906px</span> <span class="number">#FFF</span> , <span class="number">1834px</span> <span class="number">1062px</span> <span class="number">#FFF</span> , <span class="number">802px</span> <span class="number">1374px</span> <span class="number">#FFF</span> , <span class="number">863px</span> <span class="number">66px</span> <span class="number">#FFF</span> , <span class="number">660px</span> <span class="number">1260px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1012px</span> <span class="number">#FFF</span> , <span class="number">1698px</span> <span class="number">964px</span> <span class="number">#FFF</span> , <span class="number">260px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">402px</span> <span class="number">1064px</span> <span class="number">#FFF</span> , <span class="number">621px</span> <span class="number">1517px</span> <span class="number">#FFF</span> , <span class="number">989px</span> <span class="number">822px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">29px</span> <span class="number">#FFF</span> , <span class="number">1342px</span> <span class="number">1655px</span> <span class="number">#FFF</span> , <span class="number">1314px</span> <span class="number">389px</span> <span class="number">#FFF</span> , <span class="number">807px</span> <span class="number">1137px</span> <span class="number">#FFF</span> , <span class="number">1820px</span> <span class="number">831px</span> <span class="number">#FFF</span> , <span class="number">394px</span> <span class="number">658px</span> <span class="number">#FFF</span> , <span class="number">1234px</span> <span class="number">562px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">1674px</span> <span class="number">#FFF</span> , <span class="number">180px</span> <span class="number">836px</span> <span class="number">#FFF</span> , <span class="number">1291px</span> <span class="number">506px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">480px</span> <span class="number">#FFF</span> , <span class="number">970px</span> <span class="number">1767px</span> <span class="number">#FFF</span> , <span class="number">1066px</span> <span class="number">1142px</span> <span class="number">#FFF</span> , <span class="number">351px</span> <span class="number">1465px</span> <span class="number">#FFF</span> , <span class="number">1446px</span> <span class="number">1909px</span> <span class="number">#FFF</span> , <span class="number">254px</span> <span class="number">306px</span> <span class="number">#FFF</span> , <span class="number">1969px</span> <span class="number">1642px</span> <span class="number">#FFF</span> , <span class="number">269px</span> <span class="number">404px</span> <span class="number">#FFF</span> , <span class="number">838px</span> <span class="number">98px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">1030px</span> <span class="number">1033px</span> <span class="number">#FFF</span> , <span class="number">962px</span> <span class="number">1694px</span> <span class="number">#FFF</span> , <span class="number">284px</span> <span class="number">497px</span> <span class="number">#FFF</span> , <span class="number">109px</span> <span class="number">1796px</span> <span class="number">#FFF</span> , <span class="number">1897px</span> <span class="number">592px</span> <span class="number">#FFF</span> , <span class="number">1108px</span> <span class="number">1186px</span> <span class="number">#FFF</span> , <span class="number">1464px</span> <span class="number">990px</span> <span class="number">#FFF</span> , <span class="number">329px</span> <span class="number">1595px</span> <span class="number">#FFF</span> , <span class="number">1524px</span> <span class="number">1046px</span> <span class="number">#FFF</span> , <span class="number">454px</span> <span class="number">280px</span> <span class="number">#FFF</span> , <span class="number">248px</span> <span class="number">493px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1145px</span> <span class="number">#FFF</span> , <span class="number">865px</span> <span class="number">1223px</span> <span class="number">#FFF</span> , <span class="number">1045px</span> <span class="number">57px</span> <span class="number">#FFF</span> , <span class="number">777px</span> <span class="number">128px</span> <span class="number">#FFF</span> , <span class="number">1929px</span> <span class="number">565px</span> <span class="number">#FFF</span> , <span class="number">880px</span> <span class="number">1923px</span> <span class="number">#FFF</span> , <span class="number">1555px</span> <span class="number">20px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">26px</span> <span class="number">#FFF</span> , <span class="number">1986px</span> <span class="number">182px</span> <span class="number">#FFF</span> , <span class="number">588px</span> <span class="number">659px</span> <span class="number">#FFF</span> , <span class="number">531px</span> <span class="number">1025px</span> <span class="number">#FFF</span> , <span class="number">1503px</span> <span class="number">448px</span> <span class="number">#FFF</span> , <span class="number">1437px</span> <span class="number">816px</span> <span class="number">#FFF</span> , <span class="number">171px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">416px</span> <span class="number">1692px</span> <span class="number">#FFF</span> , <span class="number">21px</span> <span class="number">1457px</span> <span class="number">#FFF</span> , <span class="number">135px</span> <span class="number">1158px</span> <span class="number">#FFF</span> , <span class="number">828px</span> <span class="number">499px</span> <span class="number">#FFF</span> , <span class="number">1748px</span> <span class="number">666px</span> <span class="number">#FFF</span> , <span class="number">749px</span> <span class="number">549px</span> <span class="number">#FFF</span> , <span class="number">320px</span> <span class="number">1241px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">624px</span> <span class="number">#FFF</span> , <span class="number">287px</span> <span class="number">935px</span> <span class="number">#FFF</span> , <span class="number">739px</span> <span class="number">397px</span> <span class="number">#FFF</span> , <span class="number">1319px</span> <span class="number">1371px</span> <span class="number">#FFF</span> , <span class="number">1257px</span> <span class="number">1186px</span> <span class="number">#FFF</span> , <span class="number">46px</span> <span class="number">1278px</span> <span class="number">#FFF</span> , <span class="number">1826px</span> <span class="number">1073px</span> <span class="number">#FFF</span> , <span class="number">1530px</span> <span class="number">1720px</span> <span class="number">#FFF</span> , <span class="number">1302px</span> <span class="number">548px</span> <span class="number">#FFF</span> , <span class="number">1411px</span> <span class="number">550px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">615px</span> <span class="number">#FFF</span> , <span class="number">404px</span> <span class="number">1006px</span> <span class="number">#FFF</span> , <span class="number">1119px</span> <span class="number">1467px</span> <span class="number">#FFF</span> , <span class="number">1154px</span> <span class="number">1330px</span> <span class="number">#FFF</span> , <span class="number">1585px</span> <span class="number">248px</span> <span class="number">#FFF</span> , <span class="number">1080px</span> <span class="number">671px</span> <span class="number">#FFF</span> , <span class="number">219px</span> <span class="number">1195px</span> <span class="number">#FFF</span> , <span class="number">903px</span> <span class="number">584px</span> <span class="number">#FFF</span> , <span class="number">711px</span> <span class="number">1244px</span> <span class="number">#FFF</span> , <span class="number">730px</span> <span class="number">1427px</span> <span class="number">#FFF</span> , <span class="number">1891px</span> <span class="number">1491px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">1196px</span> <span class="number">#FFF</span> , <span class="number">1605px</span> <span class="number">140px</span> <span class="number">#FFF</span> , <span class="number">384px</span> <span class="number">194px</span> <span class="number">#FFF</span> , <span class="number">148px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">837px</span> <span class="number">1028px</span> <span class="number">#FFF</span> , <span class="number">1949px</span> <span class="number">1981px</span> <span class="number">#FFF</span> , <span class="number">159px</span> <span class="number">1530px</span> <span class="number">#FFF</span> , <span class="number">1763px</span> <span class="number">1244px</span> <span class="number">#FFF</span> , <span class="number">713px</span> <span class="number">1187px</span> <span class="number">#FFF</span> , <span class="number">1356px</span> <span class="number">766px</span> <span class="number">#FFF</span> , <span class="number">387px</span> <span class="number">280px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">240px</span> <span class="number">#FFF</span> , <span class="number">42px</span> <span class="number">840px</span> <span class="number">#FFF</span> , <span class="number">1178px</span> <span class="number">253px</span> <span class="number">#FFF</span> , <span class="number">1075px</span> <span class="number">1392px</span> <span class="number">#FFF</span> , <span class="number">1944px</span> <span class="number">1639px</span> <span class="number">#FFF</span> , <span class="number">748px</span> <span class="number">178px</span> <span class="number">#FFF</span> , <span class="number">1952px</span> <span class="number">1310px</span> <span class="number">#FFF</span> , <span class="number">1918px</span> <span class="number">1612px</span> <span class="number">#FFF</span> , <span class="number">557px</span> <span class="number">755px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">192px</span> <span class="number">1863px</span> <span class="number">#FFF</span> , <span class="number">489px</span> <span class="number">1175px</span> <span class="number">#FFF</span> , <span class="number">647px</span> <span class="number">105px</span> <span class="number">#FFF</span> , <span class="number">498px</span> <span class="number">1477px</span> <span class="number">#FFF</span> , <span class="number">1398px</span> <span class="number">1548px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">980px</span> <span class="number">#FFF</span> , <span class="number">1412px</span> <span class="number">347px</span> <span class="number">#FFF</span> , <span class="number">291px</span> <span class="number">755px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">232px</span> <span class="number">#FFF</span> , <span class="number">681px</span> <span class="number">20px</span> <span class="number">#FFF</span> , <span class="number">261px</span> <span class="number">391px</span> <span class="number">#FFF</span> , <span class="number">256px</span> <span class="number">1048px</span> <span class="number">#FFF</span> , <span class="number">876px</span> <span class="number">1530px</span> <span class="number">#FFF</span> , <span class="number">1003px</span> <span class="number">1213px</span> <span class="number">#FFF</span> , <span class="number">1626px</span> <span class="number">940px</span> <span class="number">#FFF</span> , <span class="number">1778px</span> <span class="number">1974px</span> <span class="number">#FFF</span> , <span class="number">767px</span> <span class="number">1944px</span> <span class="number">#FFF</span> , <span class="number">721px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">1284px</span> <span class="number">629px</span> <span class="number">#FFF</span> , <span class="number">1813px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">465px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">1980px</span> <span class="number">#FFF</span> , <span class="number">935px</span> <span class="number">542px</span> <span class="number">#FFF</span> , <span class="number">331px</span> <span class="number">1468px</span> <span class="number">#FFF</span> , <span class="number">1173px</span> <span class="number">1095px</span> <span class="number">#FFF</span> , <span class="number">29px</span> <span class="number">1107px</span> <span class="number">#FFF</span> , <span class="number">1810px</span> <span class="number">715px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1476px</span> <span class="number">#FFF</span> , <span class="number">1801px</span> <span class="number">1739px</span> <span class="number">#FFF</span> , <span class="number">1989px</span> <span class="number">599px</span> <span class="number">#FFF</span> , <span class="number">1656px</span> <span class="number">1744px</span> <span class="number">#FFF</span> , <span class="number">1117px</span> <span class="number">1377px</span> <span class="number">#FFF</span> , <span class="number">1757px</span> <span class="number">800px</span> <span class="number">#FFF</span> , <span class="number">373px</span> <span class="number">1151px</span> <span class="number">#FFF</span> , <span class="number">1001px</span> <span class="number">64px</span> <span class="number">#FFF</span> , <span class="number">1828px</span> <span class="number">1355px</span> <span class="number">#FFF</span> , <span class="number">1493px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">176px</span> <span class="number">497px</span> <span class="number">#FFF</span> , <span class="number">683px</span> <span class="number">1634px</span> <span class="number">#FFF</span> , <span class="number">1120px</span> <span class="number">659px</span> <span class="number">#FFF</span> , <span class="number">648px</span> <span class="number">1643px</span> <span class="number">#FFF</span> , <span class="number">1281px</span> <span class="number">347px</span> <span class="number">#FFF</span> , <span class="number">105px</span> <span class="number">1309px</span> <span class="number">#FFF</span> , <span class="number">77px</span> <span class="number">1335px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1892px</span> <span class="number">#FFF</span> , <span class="number">868px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">319px</span> <span class="number">1180px</span> <span class="number">#FFF</span> , <span class="number">860px</span> <span class="number">1263px</span> <span class="number">#FFF</span> , <span class="number">447px</span> <span class="number">916px</span> <span class="number">#FFF</span> , <span class="number">723px</span> <span class="number">402px</span> <span class="number">#FFF</span> , <span class="number">875px</span> <span class="number">283px</span> <span class="number">#FFF</span> , <span class="number">1330px</span> <span class="number">1083px</span> <span class="number">#FFF</span> , <span class="number">1175px</span> <span class="number">819px</span> <span class="number">#FFF</span> , <span class="number">667px</span> <span class="number">1469px</span> <span class="number">#FFF</span> , <span class="number">680px</span> <span class="number">371px</span> <span class="number">#FFF</span> , <span class="number">1357px</span> <span class="number">1235px</span> <span class="number">#FFF</span> , <span class="number">1223px</span> <span class="number">1701px</span> <span class="number">#FFF</span> , <span class="number">1452px</span> <span class="number">1322px</span> <span class="number">#FFF</span> , <span class="number">32px</span> <span class="number">882px</span> <span class="number">#FFF</span> , <span class="number">1545px</span> <span class="number">407px</span> <span class="number">#FFF</span> , <span class="number">1924px</span> <span class="number">1404px</span> <span class="number">#FFF</span> , <span class="number">1846px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">216px</span> <span class="number">1421px</span> <span class="number">#FFF</span> , <span class="number">1421px</span> <span class="number">1584px</span> <span class="number">#FFF</span> , <span class="number">1167px</span> <span class="number">1901px</span> <span class="number">#FFF</span> , <span class="number">276px</span> <span class="number">1756px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">1856px</span> <span class="number">#FFF</span> , <span class="number">359px</span> <span class="number">1199px</span> <span class="number">#FFF</span> , <span class="number">1143px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">891px</span> <span class="number">635px</span> <span class="number">#FFF</span> , <span class="number">579px</span> <span class="number">230px</span> <span class="number">#FFF</span> , <span class="number">570px</span> <span class="number">676px</span> <span class="number">#FFF</span> , <span class="number">1156px</span> <span class="number">1764px</span> <span class="number">#FFF</span> , <span class="number">944px</span> <span class="number">1652px</span> <span class="number">#FFF</span> , <span class="number">301px</span> <span class="number">666px</span> <span class="number">#FFF</span> , <span class="number">209px</span> <span class="number">1005px</span> <span class="number">#FFF</span> , <span class="number">460px</span> <span class="number">677px</span> <span class="number">#FFF</span> , <span class="number">186px</span> <span class="number">1260px</span> <span class="number">#FFF</span> , <span class="number">849px</span> <span class="number">284px</span> <span class="number">#FFF</span> , <span class="number">240px</span> <span class="number">1059px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">1959px</span> <span class="number">#FFF</span> , <span class="number">783px</span> <span class="number">328px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">128px</span> <span class="number">#FFF</span> , <span class="number">1884px</span> <span class="number">1051px</span> <span class="number">#FFF</span> , <span class="number">842px</span> <span class="number">758px</span> <span class="number">#FFF</span> , <span class="number">1848px</span> <span class="number">318px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">348px</span> <span class="number">#FFF</span> , <span class="number">1242px</span> <span class="number">1496px</span> <span class="number">#FFF</span> , <span class="number">441px</span> <span class="number">712px</span> <span class="number">#FFF</span> , <span class="number">1039px</span> <span class="number">113px</span> <span class="number">#FFF</span> , <span class="number">1994px</span> <span class="number">749px</span> <span class="number">#FFF</span> , <span class="number">1777px</span> <span class="number">1596px</span> <span class="number">#FFF</span> , <span class="number">1471px</span> <span class="number">1817px</span> <span class="number">#FFF</span> , <span class="number">1482px</span> <span class="number">1668px</span> <span class="number">#FFF</span> , <span class="number">1837px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">1272px</span> <span class="number">1285px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">1669px</span> <span class="number">#FFF</span> , <span class="number">104px</span> <span class="number">1968px</span> <span class="number">#FFF</span> , <span class="number">1570px</span> <span class="number">400px</span> <span class="number">#FFF</span> , <span class="number">1225px</span> <span class="number">1879px</span> <span class="number">#FFF</span> , <span class="number">885px</span> <span class="number">1156px</span> <span class="number">#FFF</span> , <span class="number">1392px</span> <span class="number">121px</span> <span class="number">#FFF</span> , <span class="number">1754px</span> <span class="number">1477px</span> <span class="number">#FFF</span> , <span class="number">251px</span> <span class="number">1060px</span> <span class="number">#FFF</span> , <span class="number">1701px</span> <span class="number">547px</span> <span class="number">#FFF</span> , <span class="number">1847px</span> <span class="number">114px</span> <span class="number">#FFF</span> , <span class="number">1733px</span> <span class="number">1932px</span> <span class="number">#FFF</span> , <span class="number">1178px</span> <span class="number">873px</span> <span class="number">#FFF</span> , <span class="number">553px</span> <span class="number">191px</span> <span class="number">#FFF</span> , <span class="number">1974px</span> <span class="number">1659px</span> <span class="number">#FFF</span> , <span class="number">1155px</span> <span class="number">612px</span> <span class="number">#FFF</span> , <span class="number">1509px</span> <span class="number">1533px</span> <span class="number">#FFF</span> , <span class="number">1936px</span> <span class="number">1148px</span> <span class="number">#FFF</span> , <span class="number">1708px</span> <span class="number">224px</span> <span class="number">#FFF</span> , <span class="number">1358px</span> <span class="number">1235px</span> <span class="number">#FFF</span> , <span class="number">293px</span> <span class="number">608px</span> <span class="number">#FFF</span> , <span class="number">424px</span> <span class="number">639px</span> <span class="number">#FFF</span> , <span class="number">347px</span> <span class="number">1944px</span> <span class="number">#FFF</span> , <span class="number">1813px</span> <span class="number">243px</span> <span class="number">#FFF</span> , <span class="number">150px</span> <span class="number">1042px</span> <span class="number">#FFF</span> , <span class="number">36px</span> <span class="number">1533px</span> <span class="number">#FFF</span> , <span class="number">1215px</span> <span class="number">64px</span> <span class="number">#FFF</span> , <span class="number">1393px</span> <span class="number">730px</span> <span class="number">#FFF</span> , <span class="number">567px</span> <span class="number">1509px</span> <span class="number">#FFF</span> , <span class="number">1209px</span> <span class="number">1055px</span> <span class="number">#FFF</span> , <span class="number">1969px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1458px</span> <span class="number">42px</span> <span class="number">#FFF</span> , <span class="number">1494px</span> <span class="number">817px</span> <span class="number">#FFF</span> , <span class="number">1863px</span> <span class="number">1290px</span> <span class="number">#FFF</span> , <span class="number">1508px</span> <span class="number">1194px</span> <span class="number">#FFF</span> , <span class="number">1607px</span> <span class="number">906px</span> <span class="number">#FFF</span> , <span class="number">1371px</span> <span class="number">997px</span> <span class="number">#FFF</span> , <span class="number">573px</span> <span class="number">871px</span> <span class="number">#FFF</span> , <span class="number">1625px</span> <span class="number">1930px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">1835px</span> <span class="number">#FFF</span> , <span class="number">1400px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">467px</span> <span class="number">1695px</span> <span class="number">#FFF</span> , <span class="number">911px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1745px</span> <span class="number">766px</span> <span class="number">#FFF</span> , <span class="number">1016px</span> <span class="number">1602px</span> <span class="number">#FFF</span> , <span class="number">1940px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1468px</span> <span class="number">1035px</span> <span class="number">#FFF</span> , <span class="number">1298px</span> <span class="number">992px</span> <span class="number">#FFF</span> , <span class="number">874px</span> <span class="number">1589px</span> <span class="number">#FFF</span> , <span class="number">1288px</span> <span class="number">721px</span> <span class="number">#FFF</span> , <span class="number">1611px</span> <span class="number">905px</span> <span class="number">#FFF</span> , <span class="number">569px</span> <span class="number">1548px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1668px</span> <span class="number">1903px</span> <span class="number">#FFF</span> , <span class="number">267px</span> <span class="number">1053px</span> <span class="number">#FFF</span> , <span class="number">1403px</span> <span class="number">4px</span> <span class="number">#FFF</span> , <span class="number">1722px</span> <span class="number">91px</span> <span class="number">#FFF</span> , <span class="number">863px</span> <span class="number">1904px</span> <span class="number">#FFF</span> , <span class="number">120px</span> <span class="number">1878px</span> <span class="number">#FFF</span> , <span class="number">21px</span> <span class="number">47px</span> <span class="number">#FFF</span> , <span class="number">1384px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1000px</span> <span class="number">1523px</span> <span class="number">#FFF</span> , <span class="number">1019px</span> <span class="number">1768px</span> <span class="number">#FFF</span> , <span class="number">811px</span> <span class="number">209px</span> <span class="number">#FFF</span> , <span class="number">950px</span> <span class="number">1763px</span> <span class="number">#FFF</span> , <span class="number">504px</span> <span class="number">1011px</span> <span class="number">#FFF</span> , <span class="number">420px</span> <span class="number">1424px</span> <span class="number">#FFF</span> , <span class="number">1606px</span> <span class="number">747px</span> <span class="number">#FFF</span> , <span class="number">1073px</span> <span class="number">9px</span> <span class="number">#FFF</span> , <span class="number">860px</span> <span class="number">1731px</span> <span class="number">#FFF</span> , <span class="number">473px</span> <span class="number">990px</span> <span class="number">#FFF</span> , <span class="number">922px</span> <span class="number">1704px</span> <span class="number">#FFF</span> , <span class="number">371px</span> <span class="number">15px</span> <span class="number">#FFF</span> , <span class="number">821px</span> <span class="number">1243px</span> <span class="number">#FFF</span> , <span class="number">423px</span> <span class="number">1259px</span> <span class="number">#FFF</span> , <span class="number">1974px</span> <span class="number">1100px</span> <span class="number">#FFF</span> , <span class="number">183px</span> <span class="number">615px</span> <span class="number">#FFF</span> , <span class="number">1430px</span> <span class="number">6px</span> <span class="number">#FFF</span> , <span class="number">909px</span> <span class="number">296px</span> <span class="number">#FFF</span> , <span class="number">449px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">953px</span> <span class="number">155px</span> <span class="number">#FFF</span> , <span class="number">824px</span> <span class="number">706px</span> <span class="number">#FFF</span> , <span class="number">1097px</span> <span class="number">429px</span> <span class="number">#FFF</span> , <span class="number">1104px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1851px</span> <span class="number">#FFF</span> , <span class="number">1224px</span> <span class="number">1554px</span> <span class="number">#FFF</span> , <span class="number">521px</span> <span class="number">1040px</span> <span class="number">#FFF</span> , <span class="number">160px</span> <span class="number">1852px</span> <span class="number">#FFF</span> , <span class="number">1564px</span> <span class="number">1782px</span> <span class="number">#FFF</span> , <span class="number">320px</span> <span class="number">1490px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">741px</span> <span class="number">#FFF</span> , <span class="number">236px</span> <span class="number">214px</span> <span class="number">#FFF</span> , <span class="number">878px</span> <span class="number">1068px</span> <span class="number">#FFF</span> , <span class="number">1698px</span> <span class="number">1752px</span> <span class="number">#FFF</span> , <span class="number">1844px</span> <span class="number">799px</span> <span class="number">#FFF</span> , <span class="number">55px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">690px</span> <span class="number">1503px</span> <span class="number">#FFF</span> , <span class="number">869px</span> <span class="number">1066px</span> <span class="number">#FFF</span> , <span class="number">840px</span> <span class="number">204px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">863px</span> <span class="number">#FFF</span> , <span class="number">1315px</span> <span class="number">960px</span> <span class="number">#FFF</span> , <span class="number">370px</span> <span class="number">1418px</span> <span class="number">#FFF</span> , <span class="number">990px</span> <span class="number">1869px</span> <span class="number">#FFF</span> , <span class="number">1560px</span> <span class="number">1981px</span> <span class="number">#FFF</span> , <span class="number">66px</span> <span class="number">1315px</span> <span class="number">#FFF</span> , <span class="number">834px</span> <span class="number">1874px</span> <span class="number">#FFF</span> , <span class="number">1946px</span> <span class="number">1621px</span> <span class="number">#FFF</span> , <span class="number">1062px</span> <span class="number">379px</span> <span class="number">#FFF</span> , <span class="number">1688px</span> <span class="number">1972px</span> <span class="number">#FFF</span> , <span class="number">526px</span> <span class="number">876px</span> <span class="number">#FFF</span> , <span class="number">1121px</span> <span class="number">1353px</span> <span class="number">#FFF</span> , <span class="number">1963px</span> <span class="number">1242px</span> <span class="number">#FFF</span> , <span class="number">1456px</span> <span class="number">1033px</span> <span class="number">#FFF</span> , <span class="number">486px</span> <span class="number">1617px</span> <span class="number">#FFF</span> , <span class="number">582px</span> <span class="number">1325px</span> <span class="number">#FFF</span> , <span class="number">312px</span> <span class="number">182px</span> <span class="number">#FFF</span> , <span class="number">1815px</span> <span class="number">1006px</span> <span class="number">#FFF</span> , <span class="number">513px</span> <span class="number">1826px</span> <span class="number">#FFF</span> , <span class="number">173px</span> <span class="number">398px</span> <span class="number">#FFF</span> , <span class="number">1892px</span> <span class="number">432px</span> <span class="number">#FFF</span> , <span class="number">374px</span> <span class="number">432px</span> <span class="number">#FFF</span> , <span class="number">645px</span> <span class="number">735px</span> <span class="number">#FFF</span> , <span class="number">156px</span> <span class="number">1706px</span> <span class="number">#FFF</span> , <span class="number">1596px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">1661px</span> <span class="number">845px</span> <span class="number">#FFF</span> , <span class="number">831px</span> <span class="number">561px</span> <span class="number">#FFF</span> , <span class="number">966px</span> <span class="number">1432px</span> <span class="number">#FFF</span> , <span class="number">227px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">1088px</span> <span class="number">1804px</span> <span class="number">#FFF</span> , <span class="number">972px</span> <span class="number">594px</span> <span class="number">#FFF</span> , <span class="number">367px</span> <span class="number">1189px</span> <span class="number">#FFF</span> , <span class="number">1527px</span> <span class="number">1909px</span> <span class="number">#FFF</span> , <span class="number">1240px</span> <span class="number">290px</span> <span class="number">#FFF</span> , <span class="number">676px</span> <span class="number">1729px</span> <span class="number">#FFF</span> , <span class="number">1182px</span> <span class="number">1631px</span> <span class="number">#FFF</span> , <span class="number">200px</span> <span class="number">423px</span> <span class="number">#FFF</span> , <span class="number">1511px</span> <span class="number">1083px</span> <span class="number">#FFF</span> , <span class="number">378px</span> <span class="number">1487px</span> <span class="number">#FFF</span> , <span class="number">1876px</span> <span class="number">613px</span> <span class="number">#FFF</span> , <span class="number">432px</span> <span class="number">696px</span> <span class="number">#FFF</span> , <span class="number">1472px</span> <span class="number">32px</span> <span class="number">#FFF</span> , <span class="number">691px</span> <span class="number">1422px</span> <span class="number">#FFF</span> , <span class="number">666px</span> <span class="number">67px</span> <span class="number">#FFF</span> , <span class="number">1280px</span> <span class="number">333px</span> <span class="number">#FFF</span> , <span class="number">35px</span> <span class="number">843px</span> <span class="number">#FFF</span> , <span class="number">803px</span> <span class="number">384px</span> <span class="number">#FFF</span> , <span class="number">1272px</span> <span class="number">359px</span> <span class="number">#FFF</span> , <span class="number">1074px</span> <span class="number">397px</span> <span class="number">#FFF</span> , <span class="number">1757px</span> <span class="number">100px</span> <span class="number">#FFF</span> , <span class="number">1391px</span> <span class="number">360px</span> <span class="number">#FFF</span> , <span class="number">1601px</span> <span class="number">1885px</span> <span class="number">#FFF</span> , <span class="number">1277px</span> <span class="number">1009px</span> <span class="number">#FFF</span> , <span class="number">1025px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">1262px</span> <span class="number">1473px</span> <span class="number">#FFF</span> , <span class="number">1179px</span> <span class="number">941px</span> <span class="number">#FFF</span> , <span class="number">1630px</span> <span class="number">722px</span> <span class="number">#FFF</span> , <span class="number">1318px</span> <span class="number">234px</span> <span class="number">#FFF</span> , <span class="number">235px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">637px</span> <span class="number">1605px</span> <span class="number">#FFF</span> , <span class="number">648px</span> <span class="number">138px</span> <span class="number">#FFF</span> , <span class="number">718px</span> <span class="number">391px</span> <span class="number">#FFF</span> , <span class="number">893px</span> <span class="number">1863px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">359px</span> <span class="number">#FFF</span> , <span class="number">656px</span> <span class="number">1583px</span> <span class="number">#FFF</span> , <span class="number">1285px</span> <span class="number">12px</span> <span class="number">#FFF</span> , <span class="number">762px</span> <span class="number">1806px</span> <span class="number">#FFF</span> , <span class="number">1164px</span> <span class="number">1280px</span> <span class="number">#FFF</span> , <span class="number">1528px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">67px</span> <span class="number">82px</span> <span class="number">#FFF</span> , <span class="number">214px</span> <span class="number">1047px</span> <span class="number">#FFF</span> , <span class="number">1926px</span> <span class="number">1683px</span> <span class="number">#FFF</span> , <span class="number">1701px</span> <span class="number">609px</span> <span class="number">#FFF</span> , <span class="number">862px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">175px</span> <span class="number">364px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">1183px</span> <span class="number">#FFF</span> , <span class="number">1011px</span> <span class="number">100px</span> <span class="number">#FFF</span> , <span class="number">1967px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">327px</span> <span class="number">77px</span> <span class="number">#FFF</span> , <span class="number">1044px</span> <span class="number">681px</span> <span class="number">#FFF</span> , <span class="number">801px</span> <span class="number">1912px</span> <span class="number">#FFF</span> , <span class="number">1633px</span> <span class="number">1110px</span> <span class="number">#FFF</span> , <span class="number">1691px</span> <span class="number">925px</span> <span class="number">#FFF</span> , <span class="number">342px</span> <span class="number">148px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">119px</span> <span class="number">#FFF</span> , <span class="number">1717px</span> <span class="number">1051px</span> <span class="number">#FFF</span> , <span class="number">923px</span> <span class="number">1804px</span> <span class="number">#FFF</span> , <span class="number">1504px</span> <span class="number">1465px</span> <span class="number">#FFF</span> , <span class="number">1027px</span> <span class="number">1205px</span> <span class="number">#FFF</span> , <span class="number">1086px</span> <span class="number">1662px</span> <span class="number">#FFF</span> , <span class="number">605px</span> <span class="number">763px</span> <span class="number">#FFF</span> , <span class="number">978px</span> <span class="number">624px</span> <span class="number">#FFF</span> , <span class="number">551px</span> <span class="number">1242px</span> <span class="number">#FFF</span> , <span class="number">1248px</span> <span class="number">297px</span> <span class="number">#FFF</span> , <span class="number">676px</span> <span class="number">1534px</span> <span class="number">#FFF</span> , <span class="number">1713px</span> <span class="number">1868px</span> <span class="number">#FFF</span> , <span class="number">1684px</span> <span class="number">915px</span> <span class="number">#FFF</span> , <span class="number">1657px</span> <span class="number">952px</span> <span class="number">#FFF</span> , <span class="number">168px</span> <span class="number">556px</span> <span class="number">#FFF</span> , <span class="number">1573px</span> <span class="number">481px</span> <span class="number">#FFF</span> , <span class="number">213px</span> <span class="number">1525px</span> <span class="number">#FFF</span> , <span class="number">203px</span> <span class="number">780px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">265px</span> <span class="number">#FFF</span> , <span class="number">23px</span> <span class="number">676px</span> <span class="number">#FFF</span> , <span class="number">1367px</span> <span class="number">394px</span> <span class="number">#FFF</span> , <span class="number">651px</span> <span class="number">1047px</span> <span class="number">#FFF</span> , <span class="number">445px</span> <span class="number">1194px</span> <span class="number">#FFF</span> , <span class="number">1483px</span> <span class="number">1439px</span> <span class="number">#FFF</span> , <span class="number">1669px</span> <span class="number">1499px</span> <span class="number">#FFF</span> , <span class="number">1499px</span> <span class="number">1596px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1044px</span> <span class="number">918px</span> <span class="number">#FFF</span> , <span class="number">642px</span> <span class="number">1615px</span> <span class="number">#FFF</span> , <span class="number">1158px</span> <span class="number">847px</span> <span class="number">#FFF</span> , <span class="number">1553px</span> <span class="number">1546px</span> <span class="number">#FFF</span> , <span class="number">1527px</span> <span class="number">486px</span> <span class="number">#FFF</span> , <span class="number">355px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">1991px</span> <span class="number">494px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1958px</span> <span class="number">#FFF</span> , <span class="number">601px</span> <span class="number">543px</span> <span class="number">#FFF</span> , <span class="number">1217px</span> <span class="number">1684px</span> <span class="number">#FFF</span> , <span class="number">1150px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">1875px</span> <span class="number">1843px</span> <span class="number">#FFF</span> , <span class="number">1857px</span> <span class="number">1106px</span> <span class="number">#FFF</span> , <span class="number">1957px</span> <span class="number">1456px</span> <span class="number">#FFF</span> , <span class="number">698px</span> <span class="number">558px</span> <span class="number">#FFF</span> , <span class="number">1700px</span> <span class="number">1333px</span> <span class="number">#FFF</span> , <span class="number">808px</span> <span class="number">965px</span> <span class="number">#FFF</span> , <span class="number">1654px</span> <span class="number">407px</span> <span class="number">#FFF</span> , <span class="number">1649px</span> <span class="number">547px</span> <span class="number">#FFF</span> , <span class="number">1862px</span> <span class="number">946px</span> <span class="number">#FFF</span> , <span class="number">38px</span> <span class="number">808px</span> <span class="number">#FFF</span> , <span class="number">1254px</span> <span class="number">578px</span> <span class="number">#FFF</span> , <span class="number">1991px</span> <span class="number">243px</span> <span class="number">#FFF</span> , <span class="number">363px</span> <span class="number">76px</span> <span class="number">#FFF</span> , <span class="number">111px</span> <span class="number">1093px</span> <span class="number">#FFF</span> , <span class="number">1096px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">1449px</span> <span class="number">1545px</span> <span class="number">#FFF</span> , <span class="number">210px</span> <span class="number">576px</span> <span class="number">#FFF</span> , <span class="number">321px</span> <span class="number">718px</span> <span class="number">#FFF</span> , <span class="number">1434px</span> <span class="number">662px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">895px</span> <span class="number">#FFF</span> , <span class="number">510px</span> <span class="number">330px</span> <span class="number">#FFF</span> , <span class="number">589px</span> <span class="number">1522px</span> <span class="number">#FFF</span> , <span class="number">720px</span> <span class="number">1862px</span> <span class="number">#FFF</span> , <span class="number">138px</span> <span class="number">1195px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">319px</span> <span class="number">#FFF</span> , <span class="number">814px</span> <span class="number">1434px</span> <span class="number">#FFF</span> , <span class="number">1440px</span> <span class="number">274px</span> <span class="number">#FFF</span> , <span class="number">795px</span> <span class="number">607px</span> <span class="number">#FFF</span> , <span class="number">1860px</span> <span class="number">1988px</span> <span class="number">#FFF</span> , <span class="number">1085px</span> <span class="number">204px</span> <span class="number">#FFF</span> , <span class="number">394px</span> <span class="number">1151px</span> <span class="number">#FFF</span> , <span class="number">1247px</span> <span class="number">870px</span> <span class="number">#FFF</span> , <span class="number">189px</span> <span class="number">1638px</span> <span class="number">#FFF</span> , <span class="number">384px</span> <span class="number">1430px</span> <span class="number">#FFF</span> , <span class="number">1914px</span> <span class="number">895px</span> <span class="number">#FFF</span> , <span class="number">48px</span> <span class="number">1777px</span> <span class="number">#FFF</span> , <span class="number">242px</span> <span class="number">1378px</span> <span class="number">#FFF</span> , <span class="number">343px</span> <span class="number">470px</span> <span class="number">#FFF</span> , <span class="number">893px</span> <span class="number">1464px</span> <span class="number">#FFF</span> , <span class="number">1818px</span> <span class="number">354px</span> <span class="number">#FFF</span> , <span class="number">1260px</span> <span class="number">166px</span> <span class="number">#FFF</span> , <span class="number">960px</span> <span class="number">1561px</span> <span class="number">#FFF</span> , <span class="number">1072px</span> <span class="number">1416px</span> <span class="number">#FFF</span> , <span class="number">835px</span> <span class="number">213px</span> <span class="number">#FFF</span> , <span class="number">643px</span> <span class="number">1197px</span> <span class="number">#FFF</span> , <span class="number">1257px</span> <span class="number">1319px</span> <span class="number">#FFF</span> , <span class="number">508px</span> <span class="number">835px</span> <span class="number">#FFF</span> , <span class="number">1568px</span> <span class="number">901px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">233px</span> <span class="number">#FFF</span> , <span class="number">495px</span> <span class="number">716px</span> <span class="number">#FFF</span> , <span class="number">551px</span> <span class="number">1869px</span> <span class="number">#FFF</span> , <span class="number">1275px</span> <span class="number">1694px</span> <span class="number">#FFF</span> , <span class="number">1676px</span> <span class="number">302px</span> <span class="number">#FFF</span> , <span class="number">524px</span> <span class="number">300px</span> <span class="number">#FFF</span> , <span class="number">802px</span> <span class="number">1436px</span> <span class="number">#FFF</span> , <span class="number">520px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">511px</span> <span class="number">1722px</span> <span class="number">#FFF</span> , <span class="number">1640px</span> <span class="number">1315px</span> <span class="number">#FFF</span> , <span class="number">825px</span> <span class="number">886px</span> <span class="number">#FFF</span> , <span class="number">795px</span> <span class="number">1081px</span> <span class="number">#FFF</span> , <span class="number">1297px</span> <span class="number">672px</span> <span class="number">#FFF</span> , <span class="number">413px</span> <span class="number">1087px</span> <span class="number">#FFF</span> , <span class="number">330px</span> <span class="number">168px</span> <span class="number">#FFF</span> , <span class="number">745px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">275px</span> <span class="number">1856px</span> <span class="number">#FFF</span> , <span class="number">1312px</span> <span class="number">1284px</span> <span class="number">#FFF</span> , <span class="number">582px</span> <span class="number">1939px</span> <span class="number">#FFF</span> , <span class="number">1647px</span> <span class="number">1252px</span> <span class="number">#FFF</span> , <span class="number">1856px</span> <span class="number">794px</span> <span class="number">#FFF</span> , <span class="number">663px</span> <span class="number">1882px</span> <span class="number">#FFF</span> , <span class="number">949px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">1791px</span> <span class="number">#FFF</span> , <span class="number">233px</span> <span class="number">52px</span> <span class="number">#FFF</span> , <span class="number">139px</span> <span class="number">1133px</span> <span class="number">#FFF</span> , <span class="number">1057px</span> <span class="number">1972px</span> <span class="number">#FFF</span> , <span class="number">1602px</span> <span class="number">861px</span> <span class="number">#FFF</span> , <span class="number">1402px</span> <span class="number">713px</span> <span class="number">#FFF</span> , <span class="number">974px</span> <span class="number">862px</span> <span class="number">#FFF</span> , <span class="number">1341px</span> <span class="number">1705px</span> <span class="number">#FFF</span> , <span class="number">1987px</span> <span class="number">1598px</span> <span class="number">#FFF</span> , <span class="number">221px</span> <span class="number">482px</span> <span class="number">#FFF</span> , <span class="number">1080px</span> <span class="number">1117px</span> <span class="number">#FFF</span> , <span class="number">1589px</span> <span class="number">34px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">960px</span> <span class="number">#FFF</span> , <span class="number">1939px</span> <span class="number">253px</span> <span class="number">#FFF</span> , <span class="number">1349px</span> <span class="number">566px</span> <span class="number">#FFF</span> , <span class="number">1363px</span> <span class="number">1296px</span> <span class="number">#FFF</span> , <span class="number">136px</span> <span class="number">1080px</span> <span class="number">#FFF</span> , <span class="number">606px</span> <span class="number">1376px</span> <span class="number">#FFF</span> , <span class="number">609px</span> <span class="number">522px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">633px</span> <span class="number">#FFF</span> , <span class="number">852px</span> <span class="number">1967px</span> <span class="number">#FFF</span> , <span class="number">1340px</span> <span class="number">1519px</span> <span class="number">#FFF</span> , <span class="number">141px</span> <span class="number">1061px</span> <span class="number">#FFF</span> , <span class="number">123px</span> <span class="number">1427px</span> <span class="number">#FFF</span> , <span class="number">1075px</span> <span class="number">573px</span> <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stars2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1211px</span> <span class="number">1949px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">499px</span> <span class="number">819px</span> <span class="number">#FFF</span> , <span class="number">237px</span> <span class="number">1431px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">1914px</span> <span class="number">#FFF</span> , <span class="number">461px</span> <span class="number">702px</span> <span class="number">#FFF</span> , <span class="number">116px</span> <span class="number">1817px</span> <span class="number">#FFF</span> , <span class="number">194px</span> <span class="number">695px</span> <span class="number">#FFF</span> , <span class="number">1666px</span> <span class="number">172px</span> <span class="number">#FFF</span> , <span class="number">1224px</span> <span class="number">1424px</span> <span class="number">#FFF</span> , <span class="number">1823px</span> <span class="number">1249px</span> <span class="number">#FFF</span> , <span class="number">1193px</span> <span class="number">1555px</span> <span class="number">#FFF</span> , <span class="number">1922px</span> <span class="number">1440px</span> <span class="number">#FFF</span> , <span class="number">1932px</span> <span class="number">58px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">1396px</span> <span class="number">#FFF</span> , <span class="number">1179px</span> <span class="number">73px</span> <span class="number">#FFF</span> , <span class="number">761px</span> <span class="number">189px</span> <span class="number">#FFF</span> , <span class="number">1596px</span> <span class="number">703px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">290px</span> <span class="number">#FFF</span> , <span class="number">1184px</span> <span class="number">837px</span> <span class="number">#FFF</span> , <span class="number">752px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">1939px</span> <span class="number">1147px</span> <span class="number">#FFF</span> , <span class="number">970px</span> <span class="number">887px</span> <span class="number">#FFF</span> , <span class="number">37px</span> <span class="number">516px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">172px</span> <span class="number">#FFF</span> , <span class="number">801px</span> <span class="number">1813px</span> <span class="number">#FFF</span> , <span class="number">216px</span> <span class="number">1615px</span> <span class="number">#FFF</span> , <span class="number">12px</span> <span class="number">1764px</span> <span class="number">#FFF</span> , <span class="number">549px</span> <span class="number">1914px</span> <span class="number">#FFF</span> , <span class="number">958px</span> <span class="number">1200px</span> <span class="number">#FFF</span> , <span class="number">70px</span> <span class="number">888px</span> <span class="number">#FFF</span> , <span class="number">1856px</span> <span class="number">1524px</span> <span class="number">#FFF</span> , <span class="number">1061px</span> <span class="number">1809px</span> <span class="number">#FFF</span> , <span class="number">1101px</span> <span class="number">1084px</span> <span class="number">#FFF</span> , <span class="number">1322px</span> <span class="number">87px</span> <span class="number">#FFF</span> , <span class="number">344px</span> <span class="number">367px</span> <span class="number">#FFF</span> , <span class="number">1821px</span> <span class="number">22px</span> <span class="number">#FFF</span> , <span class="number">1923px</span> <span class="number">817px</span> <span class="number">#FFF</span> , <span class="number">1520px</span> <span class="number">848px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">1032px</span> <span class="number">#FFF</span> , <span class="number">1089px</span> <span class="number">169px</span> <span class="number">#FFF</span> , <span class="number">376px</span> <span class="number">381px</span> <span class="number">#FFF</span> , <span class="number">692px</span> <span class="number">991px</span> <span class="number">#FFF</span> , <span class="number">1569px</span> <span class="number">120px</span> <span class="number">#FFF</span> , <span class="number">467px</span> <span class="number">429px</span> <span class="number">#FFF</span> , <span class="number">1582px</span> <span class="number">778px</span> <span class="number">#FFF</span> , <span class="number">785px</span> <span class="number">977px</span> <span class="number">#FFF</span> , <span class="number">1744px</span> <span class="number">1519px</span> <span class="number">#FFF</span> , <span class="number">874px</span> <span class="number">777px</span> <span class="number">#FFF</span> , <span class="number">88px</span> <span class="number">1174px</span> <span class="number">#FFF</span> , <span class="number">613px</span> <span class="number">1715px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">1942px</span> <span class="number">#FFF</span> , <span class="number">547px</span> <span class="number">1002px</span> <span class="number">#FFF</span> , <span class="number">1244px</span> <span class="number">1453px</span> <span class="number">#FFF</span> , <span class="number">1359px</span> <span class="number">1344px</span> <span class="number">#FFF</span> , <span class="number">372px</span> <span class="number">421px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">1736px</span> <span class="number">#FFF</span> , <span class="number">1978px</span> <span class="number">1952px</span> <span class="number">#FFF</span> , <span class="number">1154px</span> <span class="number">1256px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1518px</span> <span class="number">#FFF</span> , <span class="number">685px</span> <span class="number">361px</span> <span class="number">#FFF</span> , <span class="number">1098px</span> <span class="number">1371px</span> <span class="number">#FFF</span> , <span class="number">1916px</span> <span class="number">152px</span> <span class="number">#FFF</span> , <span class="number">917px</span> <span class="number">700px</span> <span class="number">#FFF</span> , <span class="number">191px</span> <span class="number">1498px</span> <span class="number">#FFF</span> , <span class="number">811px</span> <span class="number">657px</span> <span class="number">#FFF</span> , <span class="number">108px</span> <span class="number">1616px</span> <span class="number">#FFF</span> , <span class="number">764px</span> <span class="number">619px</span> <span class="number">#FFF</span> , <span class="number">844px</span> <span class="number">1480px</span> <span class="number">#FFF</span> , <span class="number">1819px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">743px</span> <span class="number">7px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">743px</span> <span class="number">#FFF</span> , <span class="number">1437px</span> <span class="number">428px</span> <span class="number">#FFF</span> , <span class="number">1935px</span> <span class="number">1865px</span> <span class="number">#FFF</span> , <span class="number">1312px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">19px</span> <span class="number">636px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1445px</span> <span class="number">#FFF</span> , <span class="number">1610px</span> <span class="number">1600px</span> <span class="number">#FFF</span> , <span class="number">1148px</span> <span class="number">1897px</span> <span class="number">#FFF</span> , <span class="number">1656px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">814px</span> <span class="number">1143px</span> <span class="number">#FFF</span> , <span class="number">422px</span> <span class="number">61px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">414px</span> <span class="number">#FFF</span> , <span class="number">561px</span> <span class="number">245px</span> <span class="number">#FFF</span> , <span class="number">1569px</span> <span class="number">417px</span> <span class="number">#FFF</span> , <span class="number">1141px</span> <span class="number">223px</span> <span class="number">#FFF</span> , <span class="number">971px</span> <span class="number">285px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">1586px</span> <span class="number">#FFF</span> , <span class="number">1077px</span> <span class="number">421px</span> <span class="number">#FFF</span> , <span class="number">1949px</span> <span class="number">1009px</span> <span class="number">#FFF</span> , <span class="number">552px</span> <span class="number">561px</span> <span class="number">#FFF</span> , <span class="number">1378px</span> <span class="number">264px</span> <span class="number">#FFF</span> , <span class="number">181px</span> <span class="number">1355px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">896px</span> <span class="number">1650px</span> <span class="number">#FFF</span> , <span class="number">194px</span> <span class="number">1369px</span> <span class="number">#FFF</span> , <span class="number">1123px</span> <span class="number">619px</span> <span class="number">#FFF</span> , <span class="number">788px</span> <span class="number">797px</span> <span class="number">#FFF</span> , <span class="number">768px</span> <span class="number">1942px</span> <span class="number">#FFF</span> , <span class="number">1957px</span> <span class="number">1718px</span> <span class="number">#FFF</span> , <span class="number">817px</span> <span class="number">1013px</span> <span class="number">#FFF</span> , <span class="number">1278px</span> <span class="number">1152px</span> <span class="number">#FFF</span> , <span class="number">578px</span> <span class="number">1312px</span> <span class="number">#FFF</span> , <span class="number">1730px</span> <span class="number">528px</span> <span class="number">#FFF</span> , <span class="number">71px</span> <span class="number">1821px</span> <span class="number">#FFF</span> , <span class="number">262px</span> <span class="number">1969px</span> <span class="number">#FFF</span> , <span class="number">309px</span> <span class="number">452px</span> <span class="number">#FFF</span> , <span class="number">621px</span> <span class="number">957px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1902px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">67px</span> <span class="number">#FFF</span> , <span class="number">1157px</span> <span class="number">1374px</span> <span class="number">#FFF</span> , <span class="number">692px</span> <span class="number">366px</span> <span class="number">#FFF</span> , <span class="number">1835px</span> <span class="number">763px</span> <span class="number">#FFF</span> , <span class="number">393px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">121px</span> <span class="number">#FFF</span> , <span class="number">1653px</span> <span class="number">208px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">102px</span> <span class="number">#FFF</span> , <span class="number">411px</span> <span class="number">1511px</span> <span class="number">#FFF</span> , <span class="number">782px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">1032px</span> <span class="number">810px</span> <span class="number">#FFF</span> , <span class="number">171px</span> <span class="number">1714px</span> <span class="number">#FFF</span> , <span class="number">1943px</span> <span class="number">466px</span> <span class="number">#FFF</span> , <span class="number">463px</span> <span class="number">463px</span> <span class="number">#FFF</span> , <span class="number">881px</span> <span class="number">1706px</span> <span class="number">#FFF</span> , <span class="number">1486px</span> <span class="number">1841px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">433px</span> <span class="number">#FFF</span> , <span class="number">1676px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">419px</span> <span class="number">1767px</span> <span class="number">#FFF</span> , <span class="number">1998px</span> <span class="number">517px</span> <span class="number">#FFF</span> , <span class="number">1013px</span> <span class="number">406px</span> <span class="number">#FFF</span> , <span class="number">1207px</span> <span class="number">1036px</span> <span class="number">#FFF</span> , <span class="number">449px</span> <span class="number">1399px</span> <span class="number">#FFF</span> , <span class="number">902px</span> <span class="number">1484px</span> <span class="number">#FFF</span> , <span class="number">1105px</span> <span class="number">1930px</span> <span class="number">#FFF</span> , <span class="number">1063px</span> <span class="number">1932px</span> <span class="number">#FFF</span> , <span class="number">88px</span> <span class="number">934px</span> <span class="number">#FFF</span> , <span class="number">909px</span> <span class="number">614px</span> <span class="number">#FFF</span> , <span class="number">1725px</span> <span class="number">384px</span> <span class="number">#FFF</span> , <span class="number">1768px</span> <span class="number">1711px</span> <span class="number">#FFF</span> , <span class="number">737px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">437px</span> <span class="number">#FFF</span> , <span class="number">734px</span> <span class="number">907px</span> <span class="number">#FFF</span> , <span class="number">263px</span> <span class="number">1000px</span> <span class="number">#FFF</span> , <span class="number">361px</span> <span class="number">1216px</span> <span class="number">#FFF</span> , <span class="number">541px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">1136px</span> <span class="number">1045px</span> <span class="number">#FFF</span> , <span class="number">1420px</span> <span class="number">1341px</span> <span class="number">#FFF</span> , <span class="number">639px</span> <span class="number">1267px</span> <span class="number">#FFF</span> , <span class="number">1750px</span> <span class="number">1572px</span> <span class="number">#FFF</span> , <span class="number">1646px</span> <span class="number">1822px</span> <span class="number">#FFF</span> , <span class="number">1849px</span> <span class="number">1298px</span> <span class="number">#FFF</span> , <span class="number">1276px</span> <span class="number">780px</span> <span class="number">#FFF</span> , <span class="number">902px</span> <span class="number">1207px</span> <span class="number">#FFF</span> , <span class="number">297px</span> <span class="number">587px</span> <span class="number">#FFF</span> , <span class="number">31px</span> <span class="number">633px</span> <span class="number">#FFF</span> , <span class="number">554px</span> <span class="number">1471px</span> <span class="number">#FFF</span> , <span class="number">1909px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">679px</span> <span class="number">200px</span> <span class="number">#FFF</span> , <span class="number">1095px</span> <span class="number">788px</span> <span class="number">#FFF</span> , <span class="number">657px</span> <span class="number">600px</span> <span class="number">#FFF</span> , <span class="number">1265px</span> <span class="number">1387px</span> <span class="number">#FFF</span> , <span class="number">982px</span> <span class="number">707px</span> <span class="number">#FFF</span> , <span class="number">881px</span> <span class="number">1664px</span> <span class="number">#FFF</span> , <span class="number">618px</span> <span class="number">832px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">1975px</span> <span class="number">#FFF</span> , <span class="number">94px</span> <span class="number">1734px</span> <span class="number">#FFF</span> , <span class="number">566px</span> <span class="number">1536px</span> <span class="number">#FFF</span> , <span class="number">1183px</span> <span class="number">1180px</span> <span class="number">#FFF</span> , <span class="number">20px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">305px</span> <span class="number">1605px</span> <span class="number">#FFF</span> , <span class="number">1835px</span> <span class="number">884px</span> <span class="number">#FFF</span> , <span class="number">1591px</span> <span class="number">1415px</span> <span class="number">#FFF</span> , <span class="number">1785px</span> <span class="number">1975px</span> <span class="number">#FFF</span> , <span class="number">905px</span> <span class="number">229px</span> <span class="number">#FFF</span> , <span class="number">1115px</span> <span class="number">273px</span> <span class="number">#FFF</span> , <span class="number">1800px</span> <span class="number">1292px</span> <span class="number">#FFF</span> , <span class="number">1787px</span> <span class="number">1928px</span> <span class="number">#FFF</span> , <span class="number">895px</span> <span class="number">1561px</span> <span class="number">#FFF</span> , <span class="number">1584px</span> <span class="number">104px</span> <span class="number">#FFF</span> , <span class="number">1480px</span> <span class="number">1291px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1681px</span> <span class="number">#FFF</span> , <span class="number">1300px</span> <span class="number">1111px</span> <span class="number">#FFF</span> , <span class="number">258px</span> <span class="number">72px</span> <span class="number">#FFF</span> , <span class="number">1523px</span> <span class="number">1830px</span> <span class="number">#FFF</span> , <span class="number">1313px</span> <span class="number">920px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">1540px</span> <span class="number">#FFF</span> , <span class="number">656px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">1732px</span> <span class="number">1529px</span> <span class="number">#FFF</span> , <span class="number">792px</span> <span class="number">1084px</span> <span class="number">#FFF</span> , <span class="number">84px</span> <span class="number">803px</span> <span class="number">#FFF</span> , <span class="number">1128px</span> <span class="number">224px</span> <span class="number">#FFF</span> , <span class="number">1669px</span> <span class="number">1888px</span> <span class="number">#FFF</span> , <span class="number">626px</span> <span class="number">129px</span> <span class="number">#FFF</span> , <span class="number">1244px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">1107px</span> <span class="number">427px</span> <span class="number">#FFF</span> , <span class="number">73px</span> <span class="number">759px</span> <span class="number">#FFF</span> , <span class="number">336px</span> <span class="number">330px</span> <span class="number">#FFF</span> , <span class="number">664px</span> <span class="number">338px</span> <span class="number">#FFF</span> , <span class="number">977px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">492px</span> <span class="number">1615px</span> <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">animation</span>: animStar <span class="number">100s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stars2</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1211px</span> <span class="number">1949px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">1526px</span> <span class="number">#FFF</span> , <span class="number">499px</span> <span class="number">819px</span> <span class="number">#FFF</span> , <span class="number">237px</span> <span class="number">1431px</span> <span class="number">#FFF</span> , <span class="number">1794px</span> <span class="number">1914px</span> <span class="number">#FFF</span> , <span class="number">461px</span> <span class="number">702px</span> <span class="number">#FFF</span> , <span class="number">116px</span> <span class="number">1817px</span> <span class="number">#FFF</span> , <span class="number">194px</span> <span class="number">695px</span> <span class="number">#FFF</span> , <span class="number">1666px</span> <span class="number">172px</span> <span class="number">#FFF</span> , <span class="number">1224px</span> <span class="number">1424px</span> <span class="number">#FFF</span> , <span class="number">1823px</span> <span class="number">1249px</span> <span class="number">#FFF</span> , <span class="number">1193px</span> <span class="number">1555px</span> <span class="number">#FFF</span> , <span class="number">1922px</span> <span class="number">1440px</span> <span class="number">#FFF</span> , <span class="number">1932px</span> <span class="number">58px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">1396px</span> <span class="number">#FFF</span> , <span class="number">1179px</span> <span class="number">73px</span> <span class="number">#FFF</span> , <span class="number">761px</span> <span class="number">189px</span> <span class="number">#FFF</span> , <span class="number">1596px</span> <span class="number">703px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">290px</span> <span class="number">#FFF</span> , <span class="number">1184px</span> <span class="number">837px</span> <span class="number">#FFF</span> , <span class="number">752px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">1939px</span> <span class="number">1147px</span> <span class="number">#FFF</span> , <span class="number">970px</span> <span class="number">887px</span> <span class="number">#FFF</span> , <span class="number">37px</span> <span class="number">516px</span> <span class="number">#FFF</span> , <span class="number">976px</span> <span class="number">172px</span> <span class="number">#FFF</span> , <span class="number">801px</span> <span class="number">1813px</span> <span class="number">#FFF</span> , <span class="number">216px</span> <span class="number">1615px</span> <span class="number">#FFF</span> , <span class="number">12px</span> <span class="number">1764px</span> <span class="number">#FFF</span> , <span class="number">549px</span> <span class="number">1914px</span> <span class="number">#FFF</span> , <span class="number">958px</span> <span class="number">1200px</span> <span class="number">#FFF</span> , <span class="number">70px</span> <span class="number">888px</span> <span class="number">#FFF</span> , <span class="number">1856px</span> <span class="number">1524px</span> <span class="number">#FFF</span> , <span class="number">1061px</span> <span class="number">1809px</span> <span class="number">#FFF</span> , <span class="number">1101px</span> <span class="number">1084px</span> <span class="number">#FFF</span> , <span class="number">1322px</span> <span class="number">87px</span> <span class="number">#FFF</span> , <span class="number">344px</span> <span class="number">367px</span> <span class="number">#FFF</span> , <span class="number">1821px</span> <span class="number">22px</span> <span class="number">#FFF</span> , <span class="number">1923px</span> <span class="number">817px</span> <span class="number">#FFF</span> , <span class="number">1520px</span> <span class="number">848px</span> <span class="number">#FFF</span> , <span class="number">751px</span> <span class="number">1032px</span> <span class="number">#FFF</span> , <span class="number">1089px</span> <span class="number">169px</span> <span class="number">#FFF</span> , <span class="number">376px</span> <span class="number">381px</span> <span class="number">#FFF</span> , <span class="number">692px</span> <span class="number">991px</span> <span class="number">#FFF</span> , <span class="number">1569px</span> <span class="number">120px</span> <span class="number">#FFF</span> , <span class="number">467px</span> <span class="number">429px</span> <span class="number">#FFF</span> , <span class="number">1582px</span> <span class="number">778px</span> <span class="number">#FFF</span> , <span class="number">785px</span> <span class="number">977px</span> <span class="number">#FFF</span> , <span class="number">1744px</span> <span class="number">1519px</span> <span class="number">#FFF</span> , <span class="number">874px</span> <span class="number">777px</span> <span class="number">#FFF</span> , <span class="number">88px</span> <span class="number">1174px</span> <span class="number">#FFF</span> , <span class="number">613px</span> <span class="number">1715px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">1942px</span> <span class="number">#FFF</span> , <span class="number">547px</span> <span class="number">1002px</span> <span class="number">#FFF</span> , <span class="number">1244px</span> <span class="number">1453px</span> <span class="number">#FFF</span> , <span class="number">1359px</span> <span class="number">1344px</span> <span class="number">#FFF</span> , <span class="number">372px</span> <span class="number">421px</span> <span class="number">#FFF</span> , <span class="number">612px</span> <span class="number">1736px</span> <span class="number">#FFF</span> , <span class="number">1978px</span> <span class="number">1952px</span> <span class="number">#FFF</span> , <span class="number">1154px</span> <span class="number">1256px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1518px</span> <span class="number">#FFF</span> , <span class="number">685px</span> <span class="number">361px</span> <span class="number">#FFF</span> , <span class="number">1098px</span> <span class="number">1371px</span> <span class="number">#FFF</span> , <span class="number">1916px</span> <span class="number">152px</span> <span class="number">#FFF</span> , <span class="number">917px</span> <span class="number">700px</span> <span class="number">#FFF</span> , <span class="number">191px</span> <span class="number">1498px</span> <span class="number">#FFF</span> , <span class="number">811px</span> <span class="number">657px</span> <span class="number">#FFF</span> , <span class="number">108px</span> <span class="number">1616px</span> <span class="number">#FFF</span> , <span class="number">764px</span> <span class="number">619px</span> <span class="number">#FFF</span> , <span class="number">844px</span> <span class="number">1480px</span> <span class="number">#FFF</span> , <span class="number">1819px</span> <span class="number">626px</span> <span class="number">#FFF</span> , <span class="number">743px</span> <span class="number">7px</span> <span class="number">#FFF</span> , <span class="number">1718px</span> <span class="number">743px</span> <span class="number">#FFF</span> , <span class="number">1437px</span> <span class="number">428px</span> <span class="number">#FFF</span> , <span class="number">1935px</span> <span class="number">1865px</span> <span class="number">#FFF</span> , <span class="number">1312px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">19px</span> <span class="number">636px</span> <span class="number">#FFF</span> , <span class="number">271px</span> <span class="number">1445px</span> <span class="number">#FFF</span> , <span class="number">1610px</span> <span class="number">1600px</span> <span class="number">#FFF</span> , <span class="number">1148px</span> <span class="number">1897px</span> <span class="number">#FFF</span> , <span class="number">1656px</span> <span class="number">673px</span> <span class="number">#FFF</span> , <span class="number">814px</span> <span class="number">1143px</span> <span class="number">#FFF</span> , <span class="number">422px</span> <span class="number">61px</span> <span class="number">#FFF</span> , <span class="number">1624px</span> <span class="number">414px</span> <span class="number">#FFF</span> , <span class="number">561px</span> <span class="number">245px</span> <span class="number">#FFF</span> , <span class="number">1569px</span> <span class="number">417px</span> <span class="number">#FFF</span> , <span class="number">1141px</span> <span class="number">223px</span> <span class="number">#FFF</span> , <span class="number">971px</span> <span class="number">285px</span> <span class="number">#FFF</span> , <span class="number">1680px</span> <span class="number">1586px</span> <span class="number">#FFF</span> , <span class="number">1077px</span> <span class="number">421px</span> <span class="number">#FFF</span> , <span class="number">1949px</span> <span class="number">1009px</span> <span class="number">#FFF</span> , <span class="number">552px</span> <span class="number">561px</span> <span class="number">#FFF</span> , <span class="number">1378px</span> <span class="number">264px</span> <span class="number">#FFF</span> , <span class="number">181px</span> <span class="number">1355px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">1680px</span> <span class="number">#FFF</span> , <span class="number">896px</span> <span class="number">1650px</span> <span class="number">#FFF</span> , <span class="number">194px</span> <span class="number">1369px</span> <span class="number">#FFF</span> , <span class="number">1123px</span> <span class="number">619px</span> <span class="number">#FFF</span> , <span class="number">788px</span> <span class="number">797px</span> <span class="number">#FFF</span> , <span class="number">768px</span> <span class="number">1942px</span> <span class="number">#FFF</span> , <span class="number">1957px</span> <span class="number">1718px</span> <span class="number">#FFF</span> , <span class="number">817px</span> <span class="number">1013px</span> <span class="number">#FFF</span> , <span class="number">1278px</span> <span class="number">1152px</span> <span class="number">#FFF</span> , <span class="number">578px</span> <span class="number">1312px</span> <span class="number">#FFF</span> , <span class="number">1730px</span> <span class="number">528px</span> <span class="number">#FFF</span> , <span class="number">71px</span> <span class="number">1821px</span> <span class="number">#FFF</span> , <span class="number">262px</span> <span class="number">1969px</span> <span class="number">#FFF</span> , <span class="number">309px</span> <span class="number">452px</span> <span class="number">#FFF</span> , <span class="number">621px</span> <span class="number">957px</span> <span class="number">#FFF</span> , <span class="number">479px</span> <span class="number">1902px</span> <span class="number">#FFF</span> , <span class="number">714px</span> <span class="number">67px</span> <span class="number">#FFF</span> , <span class="number">1157px</span> <span class="number">1374px</span> <span class="number">#FFF</span> , <span class="number">692px</span> <span class="number">366px</span> <span class="number">#FFF</span> , <span class="number">1835px</span> <span class="number">763px</span> <span class="number">#FFF</span> , <span class="number">393px</span> <span class="number">1990px</span> <span class="number">#FFF</span> , <span class="number">1650px</span> <span class="number">121px</span> <span class="number">#FFF</span> , <span class="number">1653px</span> <span class="number">208px</span> <span class="number">#FFF</span> , <span class="number">700px</span> <span class="number">102px</span> <span class="number">#FFF</span> , <span class="number">411px</span> <span class="number">1511px</span> <span class="number">#FFF</span> , <span class="number">782px</span> <span class="number">1390px</span> <span class="number">#FFF</span> , <span class="number">1032px</span> <span class="number">810px</span> <span class="number">#FFF</span> , <span class="number">171px</span> <span class="number">1714px</span> <span class="number">#FFF</span> , <span class="number">1943px</span> <span class="number">466px</span> <span class="number">#FFF</span> , <span class="number">463px</span> <span class="number">463px</span> <span class="number">#FFF</span> , <span class="number">881px</span> <span class="number">1706px</span> <span class="number">#FFF</span> , <span class="number">1486px</span> <span class="number">1841px</span> <span class="number">#FFF</span> , <span class="number">993px</span> <span class="number">433px</span> <span class="number">#FFF</span> , <span class="number">1676px</span> <span class="number">1211px</span> <span class="number">#FFF</span> , <span class="number">419px</span> <span class="number">1767px</span> <span class="number">#FFF</span> , <span class="number">1998px</span> <span class="number">517px</span> <span class="number">#FFF</span> , <span class="number">1013px</span> <span class="number">406px</span> <span class="number">#FFF</span> , <span class="number">1207px</span> <span class="number">1036px</span> <span class="number">#FFF</span> , <span class="number">449px</span> <span class="number">1399px</span> <span class="number">#FFF</span> , <span class="number">902px</span> <span class="number">1484px</span> <span class="number">#FFF</span> , <span class="number">1105px</span> <span class="number">1930px</span> <span class="number">#FFF</span> , <span class="number">1063px</span> <span class="number">1932px</span> <span class="number">#FFF</span> , <span class="number">88px</span> <span class="number">934px</span> <span class="number">#FFF</span> , <span class="number">909px</span> <span class="number">614px</span> <span class="number">#FFF</span> , <span class="number">1725px</span> <span class="number">384px</span> <span class="number">#FFF</span> , <span class="number">1768px</span> <span class="number">1711px</span> <span class="number">#FFF</span> , <span class="number">737px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">222px</span> <span class="number">437px</span> <span class="number">#FFF</span> , <span class="number">734px</span> <span class="number">907px</span> <span class="number">#FFF</span> , <span class="number">263px</span> <span class="number">1000px</span> <span class="number">#FFF</span> , <span class="number">361px</span> <span class="number">1216px</span> <span class="number">#FFF</span> , <span class="number">541px</span> <span class="number">387px</span> <span class="number">#FFF</span> , <span class="number">1136px</span> <span class="number">1045px</span> <span class="number">#FFF</span> , <span class="number">1420px</span> <span class="number">1341px</span> <span class="number">#FFF</span> , <span class="number">639px</span> <span class="number">1267px</span> <span class="number">#FFF</span> , <span class="number">1750px</span> <span class="number">1572px</span> <span class="number">#FFF</span> , <span class="number">1646px</span> <span class="number">1822px</span> <span class="number">#FFF</span> , <span class="number">1849px</span> <span class="number">1298px</span> <span class="number">#FFF</span> , <span class="number">1276px</span> <span class="number">780px</span> <span class="number">#FFF</span> , <span class="number">902px</span> <span class="number">1207px</span> <span class="number">#FFF</span> , <span class="number">297px</span> <span class="number">587px</span> <span class="number">#FFF</span> , <span class="number">31px</span> <span class="number">633px</span> <span class="number">#FFF</span> , <span class="number">554px</span> <span class="number">1471px</span> <span class="number">#FFF</span> , <span class="number">1909px</span> <span class="number">729px</span> <span class="number">#FFF</span> , <span class="number">679px</span> <span class="number">200px</span> <span class="number">#FFF</span> , <span class="number">1095px</span> <span class="number">788px</span> <span class="number">#FFF</span> , <span class="number">657px</span> <span class="number">600px</span> <span class="number">#FFF</span> , <span class="number">1265px</span> <span class="number">1387px</span> <span class="number">#FFF</span> , <span class="number">982px</span> <span class="number">707px</span> <span class="number">#FFF</span> , <span class="number">881px</span> <span class="number">1664px</span> <span class="number">#FFF</span> , <span class="number">618px</span> <span class="number">832px</span> <span class="number">#FFF</span> , <span class="number">140px</span> <span class="number">1975px</span> <span class="number">#FFF</span> , <span class="number">94px</span> <span class="number">1734px</span> <span class="number">#FFF</span> , <span class="number">566px</span> <span class="number">1536px</span> <span class="number">#FFF</span> , <span class="number">1183px</span> <span class="number">1180px</span> <span class="number">#FFF</span> , <span class="number">20px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">305px</span> <span class="number">1605px</span> <span class="number">#FFF</span> , <span class="number">1835px</span> <span class="number">884px</span> <span class="number">#FFF</span> , <span class="number">1591px</span> <span class="number">1415px</span> <span class="number">#FFF</span> , <span class="number">1785px</span> <span class="number">1975px</span> <span class="number">#FFF</span> , <span class="number">905px</span> <span class="number">229px</span> <span class="number">#FFF</span> , <span class="number">1115px</span> <span class="number">273px</span> <span class="number">#FFF</span> , <span class="number">1800px</span> <span class="number">1292px</span> <span class="number">#FFF</span> , <span class="number">1787px</span> <span class="number">1928px</span> <span class="number">#FFF</span> , <span class="number">895px</span> <span class="number">1561px</span> <span class="number">#FFF</span> , <span class="number">1584px</span> <span class="number">104px</span> <span class="number">#FFF</span> , <span class="number">1480px</span> <span class="number">1291px</span> <span class="number">#FFF</span> , <span class="number">1714px</span> <span class="number">1681px</span> <span class="number">#FFF</span> , <span class="number">1300px</span> <span class="number">1111px</span> <span class="number">#FFF</span> , <span class="number">258px</span> <span class="number">72px</span> <span class="number">#FFF</span> , <span class="number">1523px</span> <span class="number">1830px</span> <span class="number">#FFF</span> , <span class="number">1313px</span> <span class="number">920px</span> <span class="number">#FFF</span> , <span class="number">819px</span> <span class="number">1540px</span> <span class="number">#FFF</span> , <span class="number">656px</span> <span class="number">260px</span> <span class="number">#FFF</span> , <span class="number">1732px</span> <span class="number">1529px</span> <span class="number">#FFF</span> , <span class="number">792px</span> <span class="number">1084px</span> <span class="number">#FFF</span> , <span class="number">84px</span> <span class="number">803px</span> <span class="number">#FFF</span> , <span class="number">1128px</span> <span class="number">224px</span> <span class="number">#FFF</span> , <span class="number">1669px</span> <span class="number">1888px</span> <span class="number">#FFF</span> , <span class="number">626px</span> <span class="number">129px</span> <span class="number">#FFF</span> , <span class="number">1244px</span> <span class="number">1781px</span> <span class="number">#FFF</span> , <span class="number">1107px</span> <span class="number">427px</span> <span class="number">#FFF</span> , <span class="number">73px</span> <span class="number">759px</span> <span class="number">#FFF</span> , <span class="number">336px</span> <span class="number">330px</span> <span class="number">#FFF</span> , <span class="number">664px</span> <span class="number">338px</span> <span class="number">#FFF</span> , <span class="number">977px</span> <span class="number">170px</span> <span class="number">#FFF</span> , <span class="number">492px</span> <span class="number">1615px</span> <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#stars3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">411px</span> <span class="number">162px</span> <span class="number">#FFF</span> , <span class="number">1021px</span> <span class="number">667px</span> <span class="number">#FFF</span> , <span class="number">904px</span> <span class="number">1844px</span> <span class="number">#FFF</span> , <span class="number">581px</span> <span class="number">324px</span> <span class="number">#FFF</span> , <span class="number">749px</span> <span class="number">1163px</span> <span class="number">#FFF</span> , <span class="number">1091px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">719px</span> <span class="number">1247px</span> <span class="number">#FFF</span> , <span class="number">1030px</span> <span class="number">1103px</span> <span class="number">#FFF</span> , <span class="number">290px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">469px</span> <span class="number">1616px</span> <span class="number">#FFF</span> , <span class="number">115px</span> <span class="number">875px</span> <span class="number">#FFF</span> , <span class="number">758px</span> <span class="number">1198px</span> <span class="number">#FFF</span> , <span class="number">535px</span> <span class="number">909px</span> <span class="number">#FFF</span> , <span class="number">422px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">820px</span> <span class="number">1579px</span> <span class="number">#FFF</span> , <span class="number">1012px</span> <span class="number">867px</span> <span class="number">#FFF</span> , <span class="number">1444px</span> <span class="number">1107px</span> <span class="number">#FFF</span> , <span class="number">1447px</span> <span class="number">1351px</span> <span class="number">#FFF</span> , <span class="number">636px</span> <span class="number">4px</span> <span class="number">#FFF</span> , <span class="number">658px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">1655px</span> <span class="number">327px</span> <span class="number">#FFF</span> , <span class="number">376px</span> <span class="number">1821px</span> <span class="number">#FFF</span> , <span class="number">1618px</span> <span class="number">1076px</span> <span class="number">#FFF</span> , <span class="number">40px</span> <span class="number">1501px</span> <span class="number">#FFF</span> , <span class="number">313px</span> <span class="number">195px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">1364px</span> <span class="number">#FFF</span> , <span class="number">887px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">101px</span> <span class="number">#FFF</span> , <span class="number">236px</span> <span class="number">1543px</span> <span class="number">#FFF</span> , <span class="number">139px</span> <span class="number">864px</span> <span class="number">#FFF</span> , <span class="number">756px</span> <span class="number">453px</span> <span class="number">#FFF</span> , <span class="number">1525px</span> <span class="number">1430px</span> <span class="number">#FFF</span> , <span class="number">1341px</span> <span class="number">1094px</span> <span class="number">#FFF</span> , <span class="number">662px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">745px</span> <span class="number">#FFF</span> , <span class="number">987px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">382px</span> <span class="number">262px</span> <span class="number">#FFF</span> , <span class="number">1055px</span> <span class="number">1641px</span> <span class="number">#FFF</span> , <span class="number">1169px</span> <span class="number">1034px</span> <span class="number">#FFF</span> , <span class="number">1095px</span> <span class="number">1022px</span> <span class="number">#FFF</span> , <span class="number">1514px</span> <span class="number">526px</span> <span class="number">#FFF</span> , <span class="number">1958px</span> <span class="number">1908px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">1925px</span> <span class="number">#FFF</span> , <span class="number">1912px</span> <span class="number">1250px</span> <span class="number">#FFF</span> , <span class="number">1598px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">335px</span> <span class="number">246px</span> <span class="number">#FFF</span> , <span class="number">1358px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">1771px</span> <span class="number">1283px</span> <span class="number">#FFF</span> , <span class="number">872px</span> <span class="number">692px</span> <span class="number">#FFF</span> , <span class="number">71px</span> <span class="number">1426px</span> <span class="number">#FFF</span> , <span class="number">1679px</span> <span class="number">1685px</span> <span class="number">#FFF</span> , <span class="number">543px</span> <span class="number">141px</span> <span class="number">#FFF</span> , <span class="number">923px</span> <span class="number">459px</span> <span class="number">#FFF</span> , <span class="number">564px</span> <span class="number">1110px</span> <span class="number">#FFF</span> , <span class="number">9px</span> <span class="number">622px</span> <span class="number">#FFF</span> , <span class="number">423px</span> <span class="number">1583px</span> <span class="number">#FFF</span> , <span class="number">1571px</span> <span class="number">555px</span> <span class="number">#FFF</span> , <span class="number">1502px</span> <span class="number">879px</span> <span class="number">#FFF</span> , <span class="number">1994px</span> <span class="number">944px</span> <span class="number">#FFF</span> , <span class="number">608px</span> <span class="number">1837px</span> <span class="number">#FFF</span> , <span class="number">1289px</span> <span class="number">1905px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1332px</span> <span class="number">#FFF</span> , <span class="number">1854px</span> <span class="number">1432px</span> <span class="number">#FFF</span> , <span class="number">1453px</span> <span class="number">1115px</span> <span class="number">#FFF</span> , <span class="number">461px</span> <span class="number">1883px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">213px</span> <span class="number">#FFF</span> , <span class="number">121px</span> <span class="number">1647px</span> <span class="number">#FFF</span> , <span class="number">797px</span> <span class="number">1523px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1534px</span> <span class="number">#FFF</span> , <span class="number">183px</span> <span class="number">1660px</span> <span class="number">#FFF</span> , <span class="number">1036px</span> <span class="number">227px</span> <span class="number">#FFF</span> , <span class="number">1699px</span> <span class="number">1099px</span> <span class="number">#FFF</span> , <span class="number">383px</span> <span class="number">1610px</span> <span class="number">#FFF</span> , <span class="number">1109px</span> <span class="number">1542px</span> <span class="number">#FFF</span> , <span class="number">1273px</span> <span class="number">582px</span> <span class="number">#FFF</span> , <span class="number">1256px</span> <span class="number">1030px</span> <span class="number">#FFF</span> , <span class="number">1897px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">1737px</span> <span class="number">742px</span> <span class="number">#FFF</span> , <span class="number">908px</span> <span class="number">1480px</span> <span class="number">#FFF</span> , <span class="number">1119px</span> <span class="number">1237px</span> <span class="number">#FFF</span> , <span class="number">1293px</span> <span class="number">1197px</span> <span class="number">#FFF</span> , <span class="number">752px</span> <span class="number">1668px</span> <span class="number">#FFF</span> , <span class="number">484px</span> <span class="number">1513px</span> <span class="number">#FFF</span> , <span class="number">560px</span> <span class="number">378px</span> <span class="number">#FFF</span> , <span class="number">1561px</span> <span class="number">373px</span> <span class="number">#FFF</span> , <span class="number">952px</span> <span class="number">1450px</span> <span class="number">#FFF</span> , <span class="number">273px</span> <span class="number">759px</span> <span class="number">#FFF</span> , <span class="number">1655px</span> <span class="number">284px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">1987px</span> <span class="number">#FFF</span> , <span class="number">833px</span> <span class="number">1900px</span> <span class="number">#FFF</span> , <span class="number">1269px</span> <span class="number">660px</span> <span class="number">#FFF</span> , <span class="number">858px</span> <span class="number">1708px</span> <span class="number">#FFF</span> , <span class="number">1863px</span> <span class="number">1595px</span> <span class="number">#FFF</span> , <span class="number">1984px</span> <span class="number">1053px</span> <span class="number">#FFF</span> , <span class="number">1659px</span> <span class="number">771px</span> <span class="number">#FFF</span> , <span class="number">1228px</span> <span class="number">1997px</span> <span class="number">#FFF</span> , <span class="number">1707px</span> <span class="number">185px</span> <span class="number">#FFF</span> , <span class="number">1634px</span> <span class="number">1153px</span> <span class="number">#FFF</span> , <span class="number">1942px</span> <span class="number">664px</span> <span class="number">#FFF</span> , <span class="number">841px</span> <span class="number">1967px</span> <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">animation</span>: animStar <span class="number">150s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#stars3</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">411px</span> <span class="number">162px</span> <span class="number">#FFF</span> , <span class="number">1021px</span> <span class="number">667px</span> <span class="number">#FFF</span> , <span class="number">904px</span> <span class="number">1844px</span> <span class="number">#FFF</span> , <span class="number">581px</span> <span class="number">324px</span> <span class="number">#FFF</span> , <span class="number">749px</span> <span class="number">1163px</span> <span class="number">#FFF</span> , <span class="number">1091px</span> <span class="number">956px</span> <span class="number">#FFF</span> , <span class="number">719px</span> <span class="number">1247px</span> <span class="number">#FFF</span> , <span class="number">1030px</span> <span class="number">1103px</span> <span class="number">#FFF</span> , <span class="number">290px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">469px</span> <span class="number">1616px</span> <span class="number">#FFF</span> , <span class="number">115px</span> <span class="number">875px</span> <span class="number">#FFF</span> , <span class="number">758px</span> <span class="number">1198px</span> <span class="number">#FFF</span> , <span class="number">535px</span> <span class="number">909px</span> <span class="number">#FFF</span> , <span class="number">422px</span> <span class="number">334px</span> <span class="number">#FFF</span> , <span class="number">820px</span> <span class="number">1579px</span> <span class="number">#FFF</span> , <span class="number">1012px</span> <span class="number">867px</span> <span class="number">#FFF</span> , <span class="number">1444px</span> <span class="number">1107px</span> <span class="number">#FFF</span> , <span class="number">1447px</span> <span class="number">1351px</span> <span class="number">#FFF</span> , <span class="number">636px</span> <span class="number">4px</span> <span class="number">#FFF</span> , <span class="number">658px</span> <span class="number">1783px</span> <span class="number">#FFF</span> , <span class="number">1655px</span> <span class="number">327px</span> <span class="number">#FFF</span> , <span class="number">376px</span> <span class="number">1821px</span> <span class="number">#FFF</span> , <span class="number">1618px</span> <span class="number">1076px</span> <span class="number">#FFF</span> , <span class="number">40px</span> <span class="number">1501px</span> <span class="number">#FFF</span> , <span class="number">313px</span> <span class="number">195px</span> <span class="number">#FFF</span> , <span class="number">939px</span> <span class="number">1364px</span> <span class="number">#FFF</span> , <span class="number">887px</span> <span class="number">1154px</span> <span class="number">#FFF</span> , <span class="number">1422px</span> <span class="number">101px</span> <span class="number">#FFF</span> , <span class="number">236px</span> <span class="number">1543px</span> <span class="number">#FFF</span> , <span class="number">139px</span> <span class="number">864px</span> <span class="number">#FFF</span> , <span class="number">756px</span> <span class="number">453px</span> <span class="number">#FFF</span> , <span class="number">1525px</span> <span class="number">1430px</span> <span class="number">#FFF</span> , <span class="number">1341px</span> <span class="number">1094px</span> <span class="number">#FFF</span> , <span class="number">662px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">544px</span> <span class="number">745px</span> <span class="number">#FFF</span> , <span class="number">987px</span> <span class="number">251px</span> <span class="number">#FFF</span> , <span class="number">382px</span> <span class="number">262px</span> <span class="number">#FFF</span> , <span class="number">1055px</span> <span class="number">1641px</span> <span class="number">#FFF</span> , <span class="number">1169px</span> <span class="number">1034px</span> <span class="number">#FFF</span> , <span class="number">1095px</span> <span class="number">1022px</span> <span class="number">#FFF</span> , <span class="number">1514px</span> <span class="number">526px</span> <span class="number">#FFF</span> , <span class="number">1958px</span> <span class="number">1908px</span> <span class="number">#FFF</span> , <span class="number">18px</span> <span class="number">1925px</span> <span class="number">#FFF</span> , <span class="number">1912px</span> <span class="number">1250px</span> <span class="number">#FFF</span> , <span class="number">1598px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">335px</span> <span class="number">246px</span> <span class="number">#FFF</span> , <span class="number">1358px</span> <span class="number">1347px</span> <span class="number">#FFF</span> , <span class="number">1771px</span> <span class="number">1283px</span> <span class="number">#FFF</span> , <span class="number">872px</span> <span class="number">692px</span> <span class="number">#FFF</span> , <span class="number">71px</span> <span class="number">1426px</span> <span class="number">#FFF</span> , <span class="number">1679px</span> <span class="number">1685px</span> <span class="number">#FFF</span> , <span class="number">543px</span> <span class="number">141px</span> <span class="number">#FFF</span> , <span class="number">923px</span> <span class="number">459px</span> <span class="number">#FFF</span> , <span class="number">564px</span> <span class="number">1110px</span> <span class="number">#FFF</span> , <span class="number">9px</span> <span class="number">622px</span> <span class="number">#FFF</span> , <span class="number">423px</span> <span class="number">1583px</span> <span class="number">#FFF</span> , <span class="number">1571px</span> <span class="number">555px</span> <span class="number">#FFF</span> , <span class="number">1502px</span> <span class="number">879px</span> <span class="number">#FFF</span> , <span class="number">1994px</span> <span class="number">944px</span> <span class="number">#FFF</span> , <span class="number">608px</span> <span class="number">1837px</span> <span class="number">#FFF</span> , <span class="number">1289px</span> <span class="number">1905px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1332px</span> <span class="number">#FFF</span> , <span class="number">1854px</span> <span class="number">1432px</span> <span class="number">#FFF</span> , <span class="number">1453px</span> <span class="number">1115px</span> <span class="number">#FFF</span> , <span class="number">461px</span> <span class="number">1883px</span> <span class="number">#FFF</span> , <span class="number">619px</span> <span class="number">213px</span> <span class="number">#FFF</span> , <span class="number">121px</span> <span class="number">1647px</span> <span class="number">#FFF</span> , <span class="number">797px</span> <span class="number">1523px</span> <span class="number">#FFF</span> , <span class="number">1885px</span> <span class="number">1534px</span> <span class="number">#FFF</span> , <span class="number">183px</span> <span class="number">1660px</span> <span class="number">#FFF</span> , <span class="number">1036px</span> <span class="number">227px</span> <span class="number">#FFF</span> , <span class="number">1699px</span> <span class="number">1099px</span> <span class="number">#FFF</span> , <span class="number">383px</span> <span class="number">1610px</span> <span class="number">#FFF</span> , <span class="number">1109px</span> <span class="number">1542px</span> <span class="number">#FFF</span> , <span class="number">1273px</span> <span class="number">582px</span> <span class="number">#FFF</span> , <span class="number">1256px</span> <span class="number">1030px</span> <span class="number">#FFF</span> , <span class="number">1897px</span> <span class="number">513px</span> <span class="number">#FFF</span> , <span class="number">1737px</span> <span class="number">742px</span> <span class="number">#FFF</span> , <span class="number">908px</span> <span class="number">1480px</span> <span class="number">#FFF</span> , <span class="number">1119px</span> <span class="number">1237px</span> <span class="number">#FFF</span> , <span class="number">1293px</span> <span class="number">1197px</span> <span class="number">#FFF</span> , <span class="number">752px</span> <span class="number">1668px</span> <span class="number">#FFF</span> , <span class="number">484px</span> <span class="number">1513px</span> <span class="number">#FFF</span> , <span class="number">560px</span> <span class="number">378px</span> <span class="number">#FFF</span> , <span class="number">1561px</span> <span class="number">373px</span> <span class="number">#FFF</span> , <span class="number">952px</span> <span class="number">1450px</span> <span class="number">#FFF</span> , <span class="number">273px</span> <span class="number">759px</span> <span class="number">#FFF</span> , <span class="number">1655px</span> <span class="number">284px</span> <span class="number">#FFF</span> , <span class="number">1536px</span> <span class="number">1987px</span> <span class="number">#FFF</span> , <span class="number">833px</span> <span class="number">1900px</span> <span class="number">#FFF</span> , <span class="number">1269px</span> <span class="number">660px</span> <span class="number">#FFF</span> , <span class="number">858px</span> <span class="number">1708px</span> <span class="number">#FFF</span> , <span class="number">1863px</span> <span class="number">1595px</span> <span class="number">#FFF</span> , <span class="number">1984px</span> <span class="number">1053px</span> <span class="number">#FFF</span> , <span class="number">1659px</span> <span class="number">771px</span> <span class="number">#FFF</span> , <span class="number">1228px</span> <span class="number">1997px</span> <span class="number">#FFF</span> , <span class="number">1707px</span> <span class="number">185px</span> <span class="number">#FFF</span> , <span class="number">1634px</span> <span class="number">1153px</span> <span class="number">#FFF</span> , <span class="number">1942px</span> <span class="number">664px</span> <span class="number">#FFF</span> , <span class="number">841px</span> <span class="number">1967px</span> <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"lato"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#title</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(white, #38495a);</span><br><span class="line">  <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">  <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> animStar &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0px);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-2000px);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
