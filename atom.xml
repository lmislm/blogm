<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>“   故不积跬步，无以至千里；不积小流，无以成江海。  -  荀子《劝学篇》”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmislm.com/"/>
  <updated>2019-07-05T13:45:02.366Z</updated>
  <id>http://lmislm.com/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day173-数组-结构转换</title>
    <link href="http://lmislm.com/2019/07/04/2019-07-05/"/>
    <id>http://lmislm.com/2019/07/04/2019-07-05/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2019-07-05T13:45:02.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>给出特定结构的数据，转换成特定的数据结构。</p><ol><li>循环</li><li>递归<a id="more"></a></li></ol><h3 id="源数组-gt-目标数组"><a href="#源数组-gt-目标数组" class="headerlink" title="源数组-&gt;目标数组"></a>源数组-&gt;目标数组</h3><blockquote><p>源数组<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'文风'</span>: &#123;</span><br><span class="line">      <span class="string">'过译'</span>: [</span><br><span class="line">        &#123; <span class="string">'errorLevel'</span>: <span class="string">'一般般'</span>, <span class="string">'count'</span>: <span class="number">5</span> &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'漏译'</span>: [</span><br><span class="line">        &#123; <span class="string">'errorLevel'</span>: <span class="string">'非常严重'</span>, <span class="string">'count'</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="string">'errorLevel'</span>: <span class="string">'一般般'</span>, <span class="string">'count'</span>: <span class="number">10</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>目标数组<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'文风'</span>, <span class="string">'过译'</span>: <span class="number">5</span>, <span class="string">'漏译'</span>: <span class="number">12</span>, <span class="string">'增译'</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'准确性'</span>, <span class="string">'过译'</span>: <span class="number">21</span>, <span class="string">'漏译'</span>: <span class="number">20</span>, <span class="string">'增译'</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'流畅性'</span>, <span class="string">'过译'</span>: <span class="number">9</span>, <span class="string">'漏译'</span>: <span class="number">12</span>, <span class="string">'增译'</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'术语'</span>,  <span class="string">'过译'</span>: <span class="number">34</span>, <span class="string">'漏译'</span>: <span class="number">24</span>, <span class="string">'增译'</span>: <span class="number">34</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.entries(...data).map(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newVal = <span class="built_in">Object</span>.entries(value).map(<span class="function">(<span class="params">[objkey, objVal]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> objVals = [...objVal].reduce(<span class="function">(<span class="params">acc, obj</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">          acc[k] = (acc[k] || <span class="number">0</span>) + obj[k]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> acc</span><br><span class="line">    &#125;, &#123;&#125;)[<span class="string">'count'</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;[objkey]: objVals&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: key, ...Object.assign(...newVal), <span class="attr">total</span>: sum &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// return [].concat(obj)</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatData</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> object) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> object[i] == <span class="keyword">typeof</span> &#123;&#125;)&#123;</span><br><span class="line">      flatData(object[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(object[i])</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(object[i])) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = object[i]</span><br><span class="line">      object[i] = tmp.reduce(<span class="function">(<span class="params">acc, obj</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">          <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">            acc[k] = (acc[k] || <span class="number">0</span>) + obj[k]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc</span><br><span class="line">      &#125;, &#123;&#125;)[<span class="string">'count'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return object</span></span><br><span class="line">&#125;</span><br><span class="line">flatData(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;p&gt;给出特定结构的数据，转换成特定的数据结构。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;循环&lt;/li&gt;
&lt;li&gt;递归
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day172-TypeScript基础小记-抽象类</title>
    <link href="http://lmislm.com/2019/07/04/2019-07-04/"/>
    <id>http://lmislm.com/2019/07/04/2019-07-04/</id>
    <published>2019-07-03T16:00:00.000Z</published>
    <updated>2019-07-04T14:32:53.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li><code>abstract</code>关键字。</li><li>抽象方法。<a id="more"></a></li></ol><h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a><code>abstract</code>关键字</h3><blockquote><p>抽象类做其他<code>派生类</code>的<code>基类</code>使用。抽象类一般不会直接被<code>实例化</code>。</p></blockquote><blockquote><p>抽象类可以包含成员的实现细节。<br><code>abstract</code>关键字是用于定义<code>抽象类</code>和在抽象类内部定义抽象方法。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  abstract makeSound(): <span class="keyword">void</span></span><br><span class="line">  move(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'到处走'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><blockquote><p><code>抽象类</code>中的<code>抽象方法</code>不包含具体实现并且必须在<code>派生类</code>中实现。<code>抽象方法</code>的语法与<code>接口方法</code>相似。</p></blockquote><blockquote><p>两者都是定义<code>方法签名</code>但不包含<code>方法体</code>。然而，<code>抽象方法</code>必须包含<code>abstract</code>关键字并且可以包含<code>访问修饰符</code>。 </p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(public name: string) &#123;&#125;</span><br><span class="line">  printName(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Department name:'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  abstract printMeeting(): <span class="keyword">void</span> <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'银行'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  printMeeting(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'银行每周一早上10点开门'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  generateReports(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'生成银行报告'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> department: Department <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line"><span class="comment">// department = new Department() // 无法创建抽象类的实例。ts(2511)</span></span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment() <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.printMeeting()</span><br><span class="line">department.printName()</span><br><span class="line">department.generateReports() <span class="comment">// 类型“Department”上不存在属性“generateReports”。ts(2339)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;关键字。&lt;/li&gt;
&lt;li&gt;抽象方法。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day171-获取图片原始长宽</title>
    <link href="http://lmislm.com/2019/07/03/2019-07-03/"/>
    <id>http://lmislm.com/2019/07/03/2019-07-03/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2019-07-03T14:27:46.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>base64图片的长宽。</li><li>图片长宽。</li><li>“src图片”的长宽。<a id="more"></a></li></ol><h3 id="base64图片"><a href="#base64图片" class="headerlink" title="base64图片"></a>base64图片</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPngDimensions</span> (<span class="params">base64</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> header = atob(base64.slice(<span class="number">0</span>, <span class="number">50</span>)).slice(<span class="number">16</span>, <span class="number">24</span>)</span><br><span class="line">  <span class="keyword">const</span> uint8 = <span class="built_in">Uint8Array</span>.from(header, c =&gt; c.charCodeAt(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(uint8.buffer)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    width: dataView.getInt32(<span class="number">0</span>),</span><br><span class="line">    height: dataView.getInt32(<span class="number">4</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片长宽"><a href="#图片长宽" class="headerlink" title="图片长宽"></a>图片长宽</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">imageElement.naturalHeight</span><br><span class="line">imageElement.naturalWidth</span><br></pre></td></tr></table></figure><h3 id="“src图片”"><a href="#“src图片”" class="headerlink" title="“src图片”"></a>“src图片”</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">'http://www.google.com/intl/en_ALL/images/logo.gif'</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.width + <span class="string">'x'</span> + <span class="keyword">this</span>.height)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/623172/how-to-get-image-size-height-width-using-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/623172/how-to-get-image-size-height-width-using-javascript</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;base64图片的长宽。&lt;/li&gt;
&lt;li&gt;图片长宽。&lt;/li&gt;
&lt;li&gt;“src图片”的长宽。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day170-TypeScript基础小记-参数属性</title>
    <link href="http://lmislm.com/2019/07/02/2019-07-02/"/>
    <id>http://lmislm.com/2019/07/02/2019-07-02/</id>
    <published>2019-07-01T16:00:00.000Z</published>
    <updated>2019-07-02T14:03:38.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>存取器。</li><li>静态属性。<a id="more"></a></li></ol><h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p>例子1</p><blockquote><p>把简单的类改写成使用<code>get</code>和<code>set</code>。<br>注意：只带<code>get</code>不带有<code>set</code>的存取器自动被推断为readonly</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随意修改全名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  fullName: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee()</span><br><span class="line">employee.fullName = <span class="string">'二柱子'</span></span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加密，不让随意修改全名</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">'secret passcode'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  private _fullName: string</span><br><span class="line">  <span class="keyword">get</span> fullName (): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> fullName (newName: string) &#123;</span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode == <span class="string">'secret passcode'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error: 认证错误！又想把人名字改成二柱子！'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee()</span><br><span class="line">employee.fullName = <span class="string">"铁蛋"</span></span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><ol><li>这些属性存在类<code>本身</code>上而不是类的<code>实例</code>上。</li><li>例子1<blockquote><p>使用<code>static</code>定义<code>origin</code>，因为<code>origin</code>是所有网格都会用到的属性。每个实例访问该属性时，都要在<code>origin</code>前面加上类名。<br>如同在<code>实例属性</code>上使用<code>this.</code>前缀来访问<code>属性</code>，本例子用<code>Grid.</code>来访问<code>静态属性</code>。</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">constructor</span> (public scale: number) &#123;&#125;</span><br><span class="line">  calculateDistanceFromOrigin (point: &#123; <span class="attr">x</span>: number, <span class="attr">y</span>: number &#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDis = (point.x - Grid.origin.x)</span><br><span class="line">    <span class="keyword">let</span> yDis = (point.y - Grid.origin.y)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDis * xDis + yDis * yDis) / <span class="keyword">this</span>.scale</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>)</span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">2.0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;))</span><br><span class="line"><span class="built_in">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;存取器。&lt;/li&gt;
&lt;li&gt;静态属性。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day169-手写debounce</title>
    <link href="http://lmislm.com/2019/07/01/2019-07-01/"/>
    <id>http://lmislm.com/2019/07/01/2019-07-01/</id>
    <published>2019-06-30T16:00:00.000Z</published>
    <updated>2019-07-02T13:57:24.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>手写防抖函数<code>debounce</code>。<br>防抖和节流的区别：<br>防抖：一定时间内只执行最后一次（非立即执行），如：<code>window</code>触发<code>resize</code>，<code>search搜索</code>联想。<br>节流：一定时间内只执行一次，如：多次连续点击按钮，防抖只执行一次；<code>rAF</code>。<br><a id="more"></a></p><h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout, args, ctx, timestamp, result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 距离上一次触发时间间隔</span></span><br><span class="line">    <span class="keyword">const</span> last = +<span class="keyword">new</span> <span class="built_in">Date</span>() - timestamp</span><br><span class="line">    <span class="comment">// wait: 当前时间间隔；lat：上次被包装函数调用的时间间隔</span></span><br><span class="line">    <span class="keyword">if</span> (wait &gt; last &amp;&amp; last &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 继续等待一定时间执行</span></span><br><span class="line">      timeout = setTimeout(later, wait - last)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 超过约定的时间</span></span><br><span class="line">      timeout = <span class="literal">null</span></span><br><span class="line">      <span class="comment">// 前提是没有设置立即执行</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">        <span class="comment">// 可以立即执行</span></span><br><span class="line">        result = func.apply(ctx, args)</span><br><span class="line">        <span class="comment">// 第一次执行完毕，重置各种条件</span></span><br><span class="line">        <span class="keyword">if</span> (!timeout) ctx = args = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    ctx = <span class="keyword">this</span></span><br><span class="line">    timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> callImmediate = immediate &amp;&amp; !timeout</span><br><span class="line">    <span class="comment">// 非立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = setTimeout(later, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (callImmediate) &#123;</span><br><span class="line">      result = func.apply(ctx, args)</span><br><span class="line">      ctx = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;手写防抖函数&lt;code&gt;debounce&lt;/code&gt;。&lt;br&gt;防抖和节流的区别：&lt;br&gt;防抖：一定时间内只执行最后一次（非立即执行），如：&lt;code&gt;window&lt;/code&gt;触发&lt;code&gt;resize&lt;/code&gt;，&lt;code&gt;search搜索&lt;/code&gt;联想。&lt;br&gt;节流：一定时间内只执行一次，如：多次连续点击按钮，防抖只执行一次；&lt;code&gt;rAF&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day168-TypeScript基础小记-private与protected</title>
    <link href="http://lmislm.com/2019/06/30/2019-06-30/"/>
    <id>http://lmislm.com/2019/06/30/2019-06-30/</id>
    <published>2019-06-29T16:00:00.000Z</published>
    <updated>2019-07-01T15:42:12.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li><code>private</code>、<code>protected</code>类型的比较。</li><li><code>private</code>、<code>protected</code>修饰符。</li><li><code>protected</code>与类。<a id="more"></a></li></ol><h3 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h3><ol><li>比较不同的类型时，如果所有成员类型都是兼容的，就认为类型是兼容的。</li><li>比较<code>private</code>或<code>protected</code>成员的类型时，只有来自<strong>同一处声明</strong>时，才认为两个类型是<strong>兼容</strong>的。</li></ol><p>例子1<br><code>Employee</code>赋值给<code>Animal</code>时，类型不兼容，因为<code>Employee</code>里也有一个<code>私有成员name</code>，但并不是<code>Animal</code>里面定义的那个。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  private name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rhino</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123; <span class="keyword">super</span>(<span class="string">'犀牛哥已提前就位'</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  private name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">'羊总'</span>)</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> Rhino()</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee(<span class="string">'护林员'</span>)</span><br><span class="line">animal = rhino</span><br><span class="line"><span class="comment">// 不能将类型“Employee”分配给类型“Animal”。类型具有私有属性“name”的单独声明。ts(2322)</span></span><br><span class="line"><span class="comment">// 注意定义的private name相同</span></span><br><span class="line">animal = employee</span><br></pre></td></tr></table></figure></p><h3 id="private、protected修饰符"><a href="#private、protected修饰符" class="headerlink" title="private、protected修饰符"></a><code>private</code>、<code>protected</code>修饰符</h3><ol><li><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为相似，但有不同，<code>protected</code> 成员在<code>派生类</code>中仍然可以访问。</p></li><li><p>例子1</p><blockquote><p>不能在<code>Person</code>类外使用<code>name</code>，但是可以通过子类<code>Employee</code>类实例方法访问，因为<code>Employee</code>是由<code>Person</code>派生而来。</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  protected name: string</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123; <span class="keyword">this</span>.name = name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  private department: string</span><br><span class="line">  <span class="keyword">constructor</span>(name: string, department: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="keyword">this</span>.department = department</span><br><span class="line">  &#125;</span><br><span class="line">  public getElevatorPitch () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，老弟。我叫 <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 在附近 <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span> 工作`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">'小刘'</span>, <span class="string">'小卖部'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(howard.getElevatorPitch())</span><br><span class="line"><span class="comment">// 属性“name”受保护，只能在类“Person”及其子类中访问。ts(2445)</span></span><br><span class="line"><span class="built_in">console</span>.log(howard.name)</span><br></pre></td></tr></table></figure><h3 id="protected与类"><a href="#protected与类" class="headerlink" title="protected与类"></a><code>protected</code>与类</h3><p><code>构造函数</code>也可以被标记成<code>protected</code>。意味着，这个类不能在包含它的类外被<code>实例化</code>，但是能被继承<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  protected name: string</span><br><span class="line">  protected <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  private department: string</span><br><span class="line">  <span class="keyword">constructor</span>(name: string, department: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">    <span class="keyword">this</span>.department = department</span><br><span class="line">  &#125;</span><br><span class="line">  public getElevatorPitch () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`你好，老哥。我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>，我家搁附近<span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>。`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">'二柱子'</span>, <span class="string">'洞拐八拐银行附近'</span>)</span><br><span class="line"><span class="comment">// 类“Person”的构造函数是受保护的，仅可在类声明中访问。ts(2674)</span></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">'铁蛋'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;类型的比较。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;修饰符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;与类。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day167-TypeScript基础小记-类（2）</title>
    <link href="http://lmislm.com/2019/06/29/2019-06-29/"/>
    <id>http://lmislm.com/2019/06/29/2019-06-29/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-06-29T13:04:53.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>类的例子</li><li>继承</li><li>公共、私有与受保护的修饰符<a id="more"></a></li></ol><h3 id="类的例子"><a href="#类的例子" class="headerlink" title="类的例子"></a>类的例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  greeting: string</span><br><span class="line">  <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message</span><br><span class="line">  &#125;</span><br><span class="line">  greet () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">'world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(greeter)</span><br></pre></td></tr></table></figure><h3 id="继承-例子1"><a href="#继承-例子1" class="headerlink" title="继承-例子1"></a>继承-例子1</h3><ul><li>例子1：</li></ul><p>类（Dog）从基类（Animal)中继承了属性和方法。<code>Dog</code>是一个<code>派生类</code>,它派生自<code>Animal`</code>基类`。</p><p>通过<code>extends</code>关键字，<code>派生类</code>通常被称作<strong>子类</strong>，<code>基类</code>通常被称作<strong>超类</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  move(distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`目标被动物吓退了 <span class="subst">$&#123;distanceInMeters&#125;</span>m`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  bark () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'汪汪汪'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog() <span class="comment">// 创建一个Dog能够`bark()`和`move()`的实例</span></span><br><span class="line">dog.bark()</span><br><span class="line">dog.move(<span class="number">10</span>)</span><br><span class="line">dog.bark()</span><br></pre></td></tr></table></figure><h3 id="继承-例子2"><a href="#继承-例子2" class="headerlink" title="继承-例子2"></a>继承-例子2</h3><p> 和例子1有点不同，这个<code>派生类（子类）</code>必须调用<code>super()</code>，它会执行<code>基类（超类）</code>的<strong>构造函数</strong>。</p><p> 且，在<strong>构造函数</strong>里访问<code>this</code>的属性之前，一定要调用<code>super()</code>（这个是TypeScript强制执行的一条规则）。</p><p> 例子2，演示了如何在子类里可以重写父类方法。Snake类和Horse类都创建了move方法，它们重写了从Animal继承来的move方法，使得move方法根据不同的类而具有不同的功能。</p><p> 例子2中<code>tom: Animal</code>，tom被声明为<code>Animal类型</code>，但因为它的值是<code>Horse</code>类型（等于号右边部分），调用<code>tom.move(90)</code>时，它会调用Horse里<strong>重写</strong>的方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">  move (distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 跑了 <span class="subst">$&#123;distanceInMeters&#125;</span>米`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123; <span class="keyword">super</span>(name) &#125;</span><br><span class="line">  move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'蛇出溜滑，遛了遛了..'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123; <span class="keyword">super</span>(name) &#125;</span><br><span class="line">  move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我老马先跑一步...'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'哟，这不是子类蛇嘛'</span>)</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">'马哥，马哥，子类马，雷吼'</span>)</span><br><span class="line">sam.move()</span><br><span class="line">tom.move(<span class="number">90</span>)</span><br></pre></td></tr></table></figure><h3 id="公共、私有与受保护的修饰符"><a href="#公共、私有与受保护的修饰符" class="headerlink" title="公共、私有与受保护的修饰符"></a>公共、私有与受保护的修饰符</h3><p>public、private</p><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  public name: string</span><br><span class="line">  public <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">  public move (distanceInMeters: number) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 移动 <span class="subst">$&#123;distanceInMeters&#125;</span>米。`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  private name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性“name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Cat'</span>).name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;类的例子&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;公共、私有与受保护的修饰符
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day166-TypeScript基础小记-继承(接口)</title>
    <link href="http://lmislm.com/2019/06/28/2019-06-28/"/>
    <id>http://lmislm.com/2019/06/28/2019-06-28/</id>
    <published>2019-06-27T16:00:00.000Z</published>
    <updated>2019-06-28T13:51:26.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>继承接口。</li><li>一个接口继承多个接口，创建出多个接口的合成接口。</li><li>接口继承类。<a id="more"></a></li></ol><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">  color: string</span><br><span class="line">&#125;</span><br><span class="line">interface Square extends Shape &#123;</span><br><span class="line">  sideLength: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;</span><br><span class="line">square.color = 'red'</span><br><span class="line">square.sideLength = 6</span><br></pre></td></tr></table></figure><h3 id="继承多接口-合成接口"><a href="#继承多接口-合成接口" class="headerlink" title="继承多接口|合成接口"></a>继承多接口|合成接口</h3><blockquote><p>一个接口继承多个接口，创建出多个接口的合成接口。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">  color: string</span><br><span class="line">&#125;</span><br><span class="line">interface PenStroke &#123;</span><br><span class="line">  penWidth: number</span><br><span class="line">&#125;</span><br><span class="line">interface Square extends Shape, PenStroke &#123;</span><br><span class="line">  sideLength: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;</span><br><span class="line">square.color = 'red'</span><br><span class="line">square.sideLength = 9</span><br><span class="line">square.penWidth = 5.0</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="对象“多类型”"><a href="#对象“多类型”" class="headerlink" title="对象“多类型”"></a>对象“多类型”</h3><blockquote><p>一个对象同时具有多种类型</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Counter &#123;</span><br><span class="line">  (start: number): string</span><br><span class="line">  interval: number</span><br><span class="line">  reset(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;function (start: number): string &#123; return '' &#125;</span><br><span class="line">  counter.interval = 123</span><br><span class="line">  counter.reset = function () &#123;&#125;</span><br><span class="line">  return counter</span><br><span class="line">&#125;</span><br><span class="line">let c = getCounter()</span><br><span class="line">c(10)</span><br><span class="line">c.reset()</span><br><span class="line">c.interval = 5.0</span><br></pre></td></tr></table></figure><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><blockquote><p>接口继承一个<code>类类型</code>时，它会继承类的成员但不包括其<code>实现</code>。（大概就是：<code>接口</code>能声明所有类中存在的成员，但是不提供<strong>具体实现</strong>）<br><code>SelectableControl</code>包含了<code>Control</code>的所有<code>成员</code>,包括<strong>私有成员</strong><code>state</code>。<br>即：当接口继承了一个拥有<code>私有成员</code>或<code>受保护成员</code>的类时，这个<code>接口类型</code>只能是被这个类或其子类所实现。</p></blockquote><blockquote><p><code>SelectableControl</code>包含了Control的所有成员,包括私有成员state<br>因为state是私有成员，只能Control的子类才能实现<code>SelectablControl</code>接口。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">  private state: any</span><br><span class="line">&#125;</span><br><span class="line">interface SelectableControl extends Control &#123;</span><br><span class="line">  select(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Control</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;继承接口。&lt;/li&gt;
&lt;li&gt;一个接口继承多个接口，创建出多个接口的合成接口。&lt;/li&gt;
&lt;li&gt;接口继承类。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day165-TypeScript基础小记-类</title>
    <link href="http://lmislm.com/2019/06/27/2019-06-27/"/>
    <id>http://lmislm.com/2019/06/27/2019-06-27/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T14:42:12.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>类类型</li><li>类静态部分和实例部分的区别</li><li>直接操作类的静态部分</li><li>使用<code>类表达式</code>直接操作类的静态部分<a id="more"></a></li></ol><h4 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h4><blockquote><p>强制一个类去符合<br>实现接口<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>接口描述类的公共部分<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  <span class="comment">// 在接口中描述一个方法，在类里实现</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类静态部分和实例部分的区别"><a href="#类静态部分和实例部分的区别" class="headerlink" title="类静态部分和实例部分的区别"></a>类静态部分和实例部分的区别</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="comment">// h: hour, m: minute</span></span><br><span class="line">  <span class="comment">/** 构造器 */</span></span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类实现接口时，只对实例部分进行类型检查。而constructor存在于类的静态部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockConstructor</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  <span class="comment">// 缺少构造函数实现。ts(2390)</span></span><br><span class="line">  <span class="comment">// constructor(h: number, m: number)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接操作类的静态部分"><a href="#直接操作类的静态部分" class="headerlink" title="直接操作类的静态部分"></a>直接操作类的静态部分</h4><blockquote><p>定义两个接口，分别为<code>构造函数</code>和<code>实例方法</code>所用</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number): ClockInterface</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  tick(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** ClockConstructor为构造函数所用 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span> (<span class="params">ctor: ClockConstructor, h: number, m: number</span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ctor(h, m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** ClockInterface为实例方法所用 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitalClock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beep'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnalogClock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'tick tock'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>)</span><br><span class="line"><span class="comment">// 检查AnalogClock是否符合构造函数签名</span></span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><h4 id="使用类表达式直接操作类的静态部分"><a href="#使用类表达式直接操作类的静态部分" class="headerlink" title="使用类表达式直接操作类的静态部分"></a>使用<code>类表达式</code>直接操作类的静态部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number)</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  tick()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Clock: ClockConstructor = <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beep'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;类类型&lt;/li&gt;
&lt;li&gt;类静态部分和实例部分的区别&lt;/li&gt;
&lt;li&gt;直接操作类的静态部分&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;类表达式&lt;/code&gt;直接操作类的静态部分
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day164-TypeScript基础小记-interface</title>
    <link href="http://lmislm.com/2019/06/26/2019-06-26/"/>
    <id>http://lmislm.com/2019/06/26/2019-06-26/</id>
    <published>2019-06-25T16:00:00.000Z</published>
    <updated>2019-06-26T14:09:07.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>接口的作用：</p><ol><li>多个属性处理类型判断</li><li>接口描述函数类型<a id="more"></a><h4 id="多个属性如何处理类型判断？"><a href="#多个属性如何处理类型判断？" class="headerlink" title="多个属性如何处理类型判断？"></a>多个属性如何处理类型判断？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span> (<span class="params">labeledObj: &#123; label: string &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labeledObj.label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'Size 10 Object'</span> &#125;</span><br><span class="line">printLabel(myObj)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以上是对象只有一个label属性，多个属性如何处理？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface LabeledValue &#123;</span><br><span class="line">  label: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labeledObj: LabeledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labeledObj.label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'Size 10 Object'</span> &#125;</span><br><span class="line">printLabel(myObj)</span><br></pre></td></tr></table></figure></li></ol><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><blockquote><p>interface里的值<strong>不是</strong>所有的都是<strong>必需</strong>的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string</span><br><span class="line">  width?: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span> (<span class="params">config: SquareConfig</span>): </span>&#123; color: string, <span class="attr">area</span>: number &#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">'white'</span>, <span class="attr">area</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;<span class="attr">color</span>: <span class="string">'black'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mySquare)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="接口描述函数类型"><a href="#接口描述函数类型" class="headerlink" title="接口描述函数类型"></a>接口描述函数类型</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, <span class="attr">subString</span>: string): boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span> (<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString)</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h4><blockquote><p>ts支持两种索引签名：字符串和数字<br><code>数字索引</code>的返回值必须是<code>字符串索引</code>返回值类型的<strong>子类型</strong><br>因为用number来索引时，JS会将它转换成string然后再去索引对象。即：用100去索引等同于用“100”去索引。<br>问题：<code>dictionary模式</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface StringArray &#123;</span><br><span class="line">  [index: number]: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray</span><br><span class="line">myArray = [<span class="string">'liu'</span>, <span class="string">'mon'</span>]</span><br><span class="line"><span class="comment">// 当用number去索引StringArray时会得到string类型的返回值</span></span><br><span class="line"><span class="keyword">let</span> myStr: string = myArray[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(myArray)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 养殖</span></span><br><span class="line">  breed: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串</span></span><br><span class="line">interface NotOkay &#123;</span><br><span class="line">  <span class="comment">// 数字索引类型“Animal”不能赋给字符串索引类型“Dog”。ts(2413)</span></span><br><span class="line">  <span class="comment">// [x: number]: Animal</span></span><br><span class="line">  [x: string]: Dog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;p&gt;接口的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多个属性处理类型判断&lt;/li&gt;
&lt;li&gt;接口描述函数类型
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day163-正则点滴</title>
    <link href="http://lmislm.com/2019/06/25/2019-06-25/"/>
    <id>http://lmislm.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-25T14:17:35.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ol><li>判断是否仅有数字或者”.”、”,”。</li><li>找出并“格式化”字符串中的所有数字。<a id="more"></a></li></ol><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><ol><li><p>判断是否仅有数字或者”.”、”,”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[<span class="number">0</span><span class="number">-9.</span>,]+$/</span><br><span class="line"><span class="comment">// 配合test用比较好。如：reg.test(str)</span></span><br></pre></td></tr></table></figure></li><li><p>找出并“格式化”字符串中的所有数字。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(str.match(<span class="regexp">/\d+/g</span>) || []).map(<span class="built_in">Number</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判断是否仅有数字或者”.”、”,”。&lt;/li&gt;
&lt;li&gt;找出并“格式化”字符串中的所有数字。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day162-键值对，以value为键的结果对象</title>
    <link href="http://lmislm.com/2019/06/24/2019-06-24/"/>
    <id>http://lmislm.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-24T13:47:57.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'a'</span>, <span class="string">'code'</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'b'</span>, <span class="string">'code'</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'c'</span>, <span class="string">'code'</span>: <span class="number">33</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以code值为key的结果对象</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>主要是<code>[]</code>的用法，灵活的很呐！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getKey = <span class="function">(<span class="params">data, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [item[key]]: item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以code值为key的结果对象&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day161-统计数组中所有对象相同属性值的总和，（假设值为整数）</title>
    <link href="http://lmislm.com/2019/06/23/2019-06-23/"/>
    <id>http://lmislm.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-23T14:07:58.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="string">'1.pdf'</span>, <span class="attr">z</span>: <span class="number">2</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="string">'2.pdf'</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="string">'3.pdf'</span>, <span class="attr">z</span>: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">x</span>: <span class="number">6</span>, <span class="attr">y</span>: <span class="string">'01.pdf2.pdf3.pdf'</span>, <span class="attr">z</span>: <span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumObjectsSameKey</span>(<span class="params">...objs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objs.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">        acc[k] = (acc[k] || <span class="number">0</span>) + obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumObjectsSameKey(...arr))</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties" target="_blank" rel="noopener">https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;输入：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;,&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;2.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;,&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;3.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;01.pdf2.pdf3.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day160-vuejs-CreateElement-children 的规范化</title>
    <link href="http://lmislm.com/2019/06/22/2019-06-22/"/>
    <id>http://lmislm.com/2019/06/22/2019-06-22/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-22T14:04:58.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="children-的规范化"><a href="#children-的规范化" class="headerlink" title="children 的规范化"></a>children 的规范化</h3><p><code>_createElement</code> 接收的第 4 个参数 children 是任意类型的,所以要规范化。<br>代码目录：&lt;src/core/vdom/helpers/normalzie-children.js&gt;<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The template compiler attempts to minimize the need for normalization by</span></span><br><span class="line"><span class="comment">// statically analyzing the template at compile time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For plain HTML markup, normalization can be completely skipped because the</span></span><br><span class="line"><span class="comment">// generated render function is guaranteed to return Array&lt;VNode&gt;. There are</span></span><br><span class="line"><span class="comment">// two cases where extra normalization is needed:</span></span><br><span class="line"><span class="comment">/* 注：functional component 函数式组件返回的是一个数组而不是一个根节点 */</span></span><br><span class="line"><span class="comment">/* 场景1 */</span></span><br><span class="line"><span class="comment">// 1. When the children contains components - because a functional component</span></span><br><span class="line"><span class="comment">// may return an Array instead of a single root. In this case, just a simple</span></span><br><span class="line"><span class="comment">// normalization is needed - if any child is an Array, we flatten the whole</span></span><br><span class="line"><span class="comment">// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep</span></span><br><span class="line"><span class="comment">// because functional components already normalize their own children.</span></span><br><span class="line"><span class="comment">/*该方法调用场景是 render 函数是编译生成的*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleNormalizeChildren</span> (<span class="params">children: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children[i])) &#123;</span><br><span class="line">      <span class="comment">/* 注：flatten 整个 Array&lt;VNode&gt; */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 场景2 */</span></span><br><span class="line"><span class="comment">// 2. When the children contains constructs that always generated nested Arrays（注：嵌套数组）,</span></span><br><span class="line"><span class="comment">// e.g. &lt;template&gt;, &lt;slot&gt;, v-for, or when the children is provided by user</span></span><br><span class="line"><span class="comment">// with hand-written render functions / JSX. In such cases a full normalization</span></span><br><span class="line"><span class="comment">// is needed to cater to all possible types of children values.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeChildren</span> (<span class="params">children: any</span>): ?<span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPrimitive(children)</span><br><span class="line">    ? [createTextVNode(children)]</span><br><span class="line">    : <span class="built_in">Array</span>.isArray(children)</span><br><span class="line">      ? normalizeArrayChildren(children)</span><br><span class="line">      : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;children-的规范化&quot;&gt;&lt;a href=&quot;#children-的规范化&quot; class=&quot;headerlink&quot; title=&quot;children 的规范化&quot;&gt;&lt;/a&gt;children 的规范化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;_createElement&lt;/code&gt; 接收的第 4 个参数 children 是任意类型的,所以要规范化。&lt;br&gt;代码目录：&amp;lt;src/core/vdom/helpers/normalzie-children.js&amp;gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day159-__.range</title>
    <link href="http://lmislm.com/2019/06/21/2019-06-21/"/>
    <id>http://lmislm.com/2019/06/21/2019-06-21/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2019-06-21T14:37:53.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求区间内所有连续数"><a href="#求区间内所有连续数" class="headerlink" title="求区间内所有连续数"></a>求区间内所有连续数</h3><p>给出整数区间和步长，求区间内连续的数字，要求正序或倒序。</p><p>例如：</p><p>输入：[1, 5]，步长为1</p><p>输出：1，2，3，4，5<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://github.com/lodash/lodash/blob/master/.internal/baseRange.js</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; start 开始值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; end 结束值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; step 步长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseRange</span>(<span class="params">start, end, step, fromRight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.ceil((end - start) / (step || <span class="number">1</span>)), <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length)</span><br><span class="line">  <span class="keyword">while</span> (length--) &#123;</span><br><span class="line">    <span class="comment">// 从大到小，或者是从小到大</span></span><br><span class="line">    result[fromRight ? length : ++index] = start</span><br><span class="line">    start += step</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;求区间内所有连续数&quot;&gt;&lt;a href=&quot;#求区间内所有连续数&quot; class=&quot;headerlink&quot; title=&quot;求区间内所有连续数&quot;&gt;&lt;/a&gt;求区间内所有连续数&lt;/h3&gt;&lt;p&gt;给出整数区间和步长，求区间内连续的数字，要求正序或倒序。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;输入：[1, 5]，步长为1&lt;/p&gt;
&lt;p&gt;输出：1，2，3，4，5&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day158-Virtual DOM 小结</title>
    <link href="http://lmislm.com/2019/06/20/2019-06-20/"/>
    <id>http://lmislm.com/2019/06/20/2019-06-20/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-06-20T15:34:12.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="createElement的定义"><a href="#createElement的定义" class="headerlink" title="createElement的定义"></a>createElement的定义</h3><p>createElement 方法创建 VNode。&lt;src/core/vdom/create-elemenet.js&gt;<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapper function for providing a more flexible interface</span></span><br><span class="line"><span class="comment">// without getting yelled at by flow</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  alwaysNormalize: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data) || isPrimitive(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isTrue(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = ALWAYS_NORMALIZE</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对_createElement的封装，配置参数更加灵活</span></span><br><span class="line">  <span class="keyword">return</span> _createElement(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="createElement"><a href="#createElement" class="headerlink" title="_createElement"></a>_createElement</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component, <span class="regexp">//</span>  VNode 的上下文</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData, <span class="regexp">//</span> &lt;flow&gt;vnode.js&gt;目录中</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any, <span class="regexp">//</span> VNode 的子节点</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef((data: any).__ob__)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">`Avoid using observed data object as vnode data: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>\n`</span> +</span><br><span class="line">      <span class="string">'Always create fresh vnode data objects in each render!'</span>,</span><br><span class="line">      context</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// object syntax in v-bind</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(data.is)) &#123;</span><br><span class="line">    tag = data.is</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="comment">// in case of component :is set to falsy value</span></span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// warn against non-primitive key</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    isDef(data) &amp;&amp; isDef(data.key) &amp;&amp; !isPrimitive(data.key)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!__WEEX__ || !(<span class="string">'@binding'</span> <span class="keyword">in</span> data.key)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Avoid using non-primitive value as key, '</span> +</span><br><span class="line">        <span class="string">'use string/number value instead.'</span>,</span><br><span class="line">        context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// support single function children as default scoped slot</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> children[<span class="number">0</span>] === <span class="string">'function'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    data = data || &#123;&#125;</span><br><span class="line">    data.scopedSlots = &#123; <span class="attr">default</span>: children[<span class="number">0</span>] &#125;</span><br><span class="line">    children.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class="line">    children = normalizeChildren(children)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class="line">    children = simpleNormalizeChildren(children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> vnode, ns</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">      <span class="comment">// platform built-in elements</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        config.parsePlatformTagName(tag), data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">      <span class="comment">// component</span></span><br><span class="line">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// unknown or unlisted namespaced elements</span></span><br><span class="line">      <span class="comment">// check at runtime because it may get assigned a namespace when its</span></span><br><span class="line">      <span class="comment">// parent normalizes children</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        tag, data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;createElement的定义&quot;&gt;&lt;a href=&quot;#createElement的定义&quot; class=&quot;headerlink&quot; title=&quot;createElement的定义&quot;&gt;&lt;/a&gt;createElement的定义&lt;/h3&gt;&lt;p&gt;createElement 方法创建 VNode。&amp;lt;src/core/vdom/create-elemenet.js&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wrapper function for providing a more flexible interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// without getting yelled at by flow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  context: Component,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  tag: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  data: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  children: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  normalizationType: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  alwaysNormalize: boolean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;VNode&lt;/span&gt; | &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;VNode&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(data) || isPrimitive(data)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    normalizationType = children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children = data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isTrue(alwaysNormalize)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    normalizationType = ALWAYS_NORMALIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 对_createElement的封装，配置参数更加灵活&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _createElement(context, tag, data, children, normalizationType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day157-Virtual DOM 小结</title>
    <link href="http://lmislm.com/2019/06/19/2019-06-19/"/>
    <id>http://lmislm.com/2019/06/19/2019-06-19/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-19T13:28:51.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><p><code>Virtual DOM</code> 就是用原生的 JS 对象去描述 DOM 节点。<br><a id="more"></a></p><p>vuejs借助了<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a>这个库。</p><p><code>Virtual DOM</code>用 <code>VNode</code> 这么一个 Class 去描述。</p><p><code>VNode</code> 也是对真实 DOM 的一种抽象描述，</p><p><code>VNode</code>的核心定义是几个关键属性，<strong>标签名</strong>、<strong>数据</strong>、<strong>子节点</strong>、<strong>键值</strong>等。</p><p>其它属性都是都是用来扩展 VNode 的灵活性以及实现一些特殊 feature。</p><p>VNode是映射到真实 DOM 的<strong>渲染</strong>，不需要操作DOM的方法。</p><blockquote><p>Vue.js 利用 createElement 方法创建 VNode，它定义在 src/core/vdom/create-elemenet.js</p></blockquote><h3 id="映射DOM"><a href="#映射DOM" class="headerlink" title="映射DOM"></a>映射DOM</h3><p>映射到真实的 DOM 实际上要经历 VNode 的 <strong>create</strong>、<strong>diff</strong>、<strong>patch</strong>等过程</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据结构的定义&quot;&gt;&lt;a href=&quot;#数据结构的定义&quot; class=&quot;headerlink&quot; title=&quot;数据结构的定义&quot;&gt;&lt;/a&gt;数据结构的定义&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Virtual DOM&lt;/code&gt; 就是用原生的 JS 对象去描述 DOM 节点。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day156-LeetCode 278. First Bad Version</title>
    <link href="http://lmislm.com/2019/06/18/2019-06-18/"/>
    <id>http://lmislm.com/2019/06/18/2019-06-18/</id>
    <published>2019-06-17T16:00:00.000Z</published>
    <updated>2019-06-18T15:37:58.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.<br>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.<br>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>直接用二分法搜索<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example：</span><br><span class="line">[1,2,3,4,5] --&gt; [1,1,1,0,0]</span><br><span class="line">max = 5, min = 1   -&gt; mid = 3   isBadVersion(3) = true</span><br><span class="line">min = mid+1 = 4    -&gt; mid = 4   isBadVersion(4) = false</span><br><span class="line">max = mid   = 4    -&gt; max &gt; min == false, end loop</span><br></pre></td></tr></table></figure></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;integer&#125; version number</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;integer&#125; n Total versions</span></span><br><span class="line"><span class="comment">   * @return &#123;integer&#125; The first bad version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max = n</span><br><span class="line">    <span class="keyword">let</span> mid</span><br><span class="line">    <span class="comment">// 二分法搜索 </span></span><br><span class="line">    <span class="keyword">while</span> (max &gt; min)&#123;</span><br><span class="line">      mid = min + <span class="built_in">parseInt</span>((max+min) / <span class="number">2</span>) </span><br><span class="line">      <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">        max = mid</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        min = mid + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.&lt;br&gt;Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.&lt;br&gt;You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day155-LeetCode 191. Number of 1 Bits</title>
    <link href="http://lmislm.com/2019/06/17/2019-06-17/"/>
    <id>http://lmislm.com/2019/06/17/2019-06-17/</id>
    <published>2019-06-16T16:00:00.000Z</published>
    <updated>2019-06-17T15:56:27.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>二分法，但要注意给出的<code>nums</code> 不是完全的升序或降序。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> search(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; nums[high]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[high])</span><br><span class="line">        <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[low] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">          <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。&lt;/p&gt;
&lt;p&gt;搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。&lt;/p&gt;
&lt;p&gt;你可以假设数组中不存在重复的元素。&lt;/p&gt;
&lt;p&gt;你的算法时间复杂度必须是 O(log n) 级别。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: nums = [4,5,6,7,0,1,2], target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例 2:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: nums = [4,5,6,7,0,1,2], target = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day154-LeetCode 191. Number of 1 Bits</title>
    <link href="http://lmislm.com/2019/06/16/2019-06-16/"/>
    <id>http://lmislm.com/2019/06/16/2019-06-16/</id>
    <published>2019-06-15T16:00:00.000Z</published>
    <updated>2019-06-17T16:09:29.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p><p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>先把数字转二进制，然后再遍历1的个数</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hammingWeight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> secondS = n.toString(<span class="number">2</span>).split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondS.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (secondS % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).&lt;/p&gt;
&lt;p&gt;For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
</feed>
