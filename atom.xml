<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Baskerville*</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.booml.cn/"/>
  <updated>2018-07-22T06:56:59.865Z</updated>
  <id>http://blog.booml.cn/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown-trick</title>
    <link href="http://blog.booml.cn/2018/07/22/markdown-trick/"/>
    <id>http://blog.booml.cn/2018/07/22/markdown-trick/</id>
    <published>2018-07-22T06:56:59.865Z</published>
    <updated>2018-07-22T06:56:59.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode-snippets"><a href="#vscode-snippets" class="headerlink" title="vscode snippets"></a>vscode snippets</h2><h3 id="Ex-markdown-snippets"><a href="#Ex-markdown-snippets" class="headerlink" title="Ex: markdown snippets"></a>Ex: markdown snippets</h3><blockquote><p>以设置 markdown 代码片段为例</p></blockquote><a id="more"></a><h4 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">开启设置</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 设置</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"[markdown]":  &#123;</span><br><span class="line">    "editor.quickSuggestions": true</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">设置模板</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 用户代码片段 &gt; markdown.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"markdown write template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"mdrt"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">      <span class="string">"--- $1"</span>,</span><br><span class="line">      <span class="string">"title: $TM_FILENAME_BASE"</span>,</span><br><span class="line">      <span class="string">"tags:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"categories:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE-$CURRENT_HOUR"</span>,</span><br><span class="line">      <span class="string">"--- "</span>,</span><br><span class="line">      <span class="string">" \n "</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">"&lt;!--more--&gt; $2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Create template for markdown write"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: md-kill</span><br><span class="line">tags:</span><br><span class="line">* xx</span><br><span class="line">categories:</span><br><span class="line">* xx</span><br><span class="line">date: 2018-03-31-20</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">Markdown Snippet Prefix Does Not Trigger Snippet #28048</a><br><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Creating your own snippets</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vscode-snippets&quot;&gt;&lt;a href=&quot;#vscode-snippets&quot; class=&quot;headerlink&quot; title=&quot;vscode snippets&quot;&gt;&lt;/a&gt;vscode snippets&lt;/h2&gt;&lt;h3 id=&quot;Ex-markdown-snippets&quot;&gt;&lt;a href=&quot;#Ex-markdown-snippets&quot; class=&quot;headerlink&quot; title=&quot;Ex: markdown snippets&quot;&gt;&lt;/a&gt;Ex: markdown snippets&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以设置 markdown 代码片段为例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常操作" scheme="http://blog.booml.cn/categories/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="小技巧" scheme="http://blog.booml.cn/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>fib</title>
    <link href="http://blog.booml.cn/2018/07/22/fib/"/>
    <id>http://blog.booml.cn/2018/07/22/fib/</id>
    <published>2018-07-22T06:56:59.853Z</published>
    <updated>2018-07-22T06:56:59.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><blockquote><p>打印斐波那契数列，递归法，迭代法，提升递归效率</p></blockquote><a id="more"></a><p>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]<br>后一位数是前两位数之和<br>(例如 fib(2) === 0 + 1) === 1;</p><p>提升递归效率，创建一个数据存储，或者一个小的缓存对象，缓存对象是数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function memoize(fn) &#123;</span><br><span class="line">  const cache = &#123;&#125;;</span><br><span class="line">  return function(...args) &#123;</span><br><span class="line">    // ...args ： 数组集</span><br><span class="line">    if (cache[args]) &#123;</span><br><span class="line">      return cache[args];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const result = fn.apply(this, args);</span><br><span class="line">    cache[args] = result;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function slowFib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return slowFib(n - 1) + slowFib(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const fib = memoize(slowFib);</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function fib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = result[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> b = result[i - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    result.push(a + b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打印斐波那契数列，递归法，迭代法，提升递归效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>A 星-wiki 部分翻译</title>
    <link href="http://blog.booml.cn/2018/07/22/A%E6%98%9F-wiki%E9%83%A8%E5%88%86%E7%BF%BB%E8%AF%91/"/>
    <id>http://blog.booml.cn/2018/07/22/A星-wiki部分翻译/</id>
    <published>2018-07-22T06:56:59.828Z</published>
    <updated>2018-07-22T06:56:59.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><blockquote><p>第三部分 Properties 开始</p></blockquote><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>Like breadth-first search, A* is complete and will always find a solution if one exists provided  for fixed  .</td><td></td></tr><tr><td></td></tr></tbody></table><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Contents&quot;&gt;&lt;a href=&quot;#Contents&quot; class=&quot;headerlink&quot; title=&quot;Contents&quot;&gt;&lt;/a&gt;Contents&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第三部分 Properties 开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Properties&quot;&gt;&lt;a href=&quot;#Properties&quot; class=&quot;headerlink&quot; title=&quot;Properties&quot;&gt;&lt;/a&gt;Properties&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原文&lt;/th&gt;
&lt;th&gt;译文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Like breadth-first search, A* is complete and will always find a solution if one exists provided  for fixed  .&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="算法" scheme="http://blog.booml.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="A\*" scheme="http://blog.booml.cn/tags/A/"/>
    
  </entry>
  
  <entry>
    <title>matrix</title>
    <link href="http://blog.booml.cn/2018/03/28/matrix/"/>
    <id>http://blog.booml.cn/2018/03/28/matrix/</id>
    <published>2018-03-27T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><blockquote><p>写一个函数，输入数字 N,返会一个 N*N 的矩阵(环序)。</p></blockquote><a id="more"></a><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// matrix(2)</span></span><br><span class="line"><span class="comment">//      [[1, 2],</span></span><br><span class="line"><span class="comment">//       [3, 4]]</span></span><br><span class="line"><span class="comment">// matrix(3)</span></span><br><span class="line"><span class="comment">//      [[1, 2, 3],</span></span><br><span class="line"><span class="comment">//       [8, 9, 4],</span></span><br><span class="line"><span class="comment">//       [7, 6, 5]]</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    results.push([]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startColumn = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endColumn = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startRow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endRow = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (startColumn &lt;= endColumn &amp;&amp; startRow &lt;= endRow) &#123;</span><br><span class="line">    <span class="comment">//顶列开头到结尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startColumn; i &lt;= endColumn; i++) &#123;</span><br><span class="line">      results[startRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startRow++;</span><br><span class="line">    <span class="comment">//最右列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startRow; i &lt;= endRow; i++) &#123;</span><br><span class="line">      results[i][endColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endColumn--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底部行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endColumn; i &gt;= startColumn; i--) &#123;</span><br><span class="line">      results[endRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endRow--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start 列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endRow; i &gt;= startRow; i--) &#123;</span><br><span class="line">      results[i][startColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startColumn++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = <span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix 函数已定义'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="keyword">typeof</span> matrix).toEqual(<span class="string">'function'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 2x2 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">2</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">2</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">4</span>, <span class="number">3</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 3x3 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">3</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 4x4 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">4</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">4</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">5</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">11</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">6</span>]);</span><br><span class="line">  expect(m[<span class="number">3</span>]).toEqual([<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;矩阵&quot;&gt;&lt;a href=&quot;#矩阵&quot; class=&quot;headerlink&quot; title=&quot;矩阵&quot;&gt;&lt;/a&gt;矩阵&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;写一个函数，输入数字 N,返会一个 N*N 的矩阵(环序)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>reversint</title>
    <link href="http://blog.booml.cn/2018/03/19/reversInt/"/>
    <id>http://blog.booml.cn/2018/03/19/reversInt/</id>
    <published>2018-03-18T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整数反转-reversint"><a href="#整数反转-reversint" class="headerlink" title="整数反转(reversint)"></a>整数反转(reversint)</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>给你一个带符号的整数，返回这些数值的倒序</p></blockquote><blockquote><p>//例如</p></blockquote><blockquote><p>// reverseint(1243) === 3421</p></blockquote><a id="more"></a><blockquote><p>// reverseint(123) === 321</p></blockquote><blockquote><p>// reverseint(-12) === -21</p></blockquote><blockquote><p>// reverseint(-10) === -1</p></blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reversed = n</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(reversed) * <span class="built_in">Math</span>.sign(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (n =</span><br><span class="line">    <span class="built_in">Math</span>.abs(n)</span><br><span class="line">      .toString()</span><br><span class="line">      .split(<span class="string">''</span>)</span><br><span class="line">      .reverse()</span><br><span class="line">      .join(<span class="string">''</span>) * <span class="built_in">Math</span>.sign(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;整数反转-reversint&quot;&gt;&lt;a href=&quot;#整数反转-reversint&quot; class=&quot;headerlink&quot; title=&quot;整数反转(reversint)&quot;&gt;&lt;/a&gt;整数反转(reversint)&lt;/h3&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个带符号的整数，返回这些数值的倒序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;//例如&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;// reverseint(1243) === 3421&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Git 仓库合并（实例）</title>
    <link href="http://blog.booml.cn/2018/03/05/git-progress/"/>
    <id>http://blog.booml.cn/2018/03/05/git-progress/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.855Z</updated>
    
    <content type="html"><![CDATA[<p>最近想着整理一下 github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地 A 仓库中 clone B 再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。</p><a id="more"></a><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>合并两个库/提交记录</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>本地环境 Windows os ,所有均在命令 git bash 中操作</li><li>远程仓库 A,如图左，远程仓库 B,如图右。</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/NWbZygn.png" alt="enter description here"></td><td><img src="https://i.imgur.com/FidxLZc.png" alt="enter description here"></td></tr></tbody></table><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li>clone 到本地<br><code>git clone https://github.com/lmislm/Code_Repository.git</code></li><li><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">添加远程仓库</a></p><ul><li><p><code>cd Code_Repository/</code></p></li><li><p><code>git remote add -f CSS_Ex git://github.com/lmislm/CSS_Ex.git</code></p><ul><li>添加一个新的远程仓库，指定一个简单的名字，以便将来引用，运行 <code>git remote add [shortname] [url]：</code></li></ul></li></ul><ul><li><p><code>git merge --strategy ours --no-commit CSS_Ex/master</code> + 可能报错<code>fatal: refusing to merge unrelated histories</code>忽略就行。 + <a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener"><strong>ours</strong></a> 选项强制冲突由‘our’版本自动解决，即：来自其他分支树不会影响到我们这边映射到合并的结果。 + &gt; 即忽略冲突只保留<strong>Code_Repository</strong>文件树并且把 <strong>CSS_Ex</strong>的历史记录合并进来。</p></li><li><p><code>git remote -v</code> + 此命令将全部列出远程仓库。检查一下是否存在</p></li><li><p><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + <code>--prefix=css/</code>：这里 Code_Repository/目录下有 css/子目录 + &gt; –prefix 用于指定文件树读取后保存的路径，相对于当前路径并且一定要追加 /<br>–no-commit 的原因，<a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">该选项会在合并解析完成后中断，停留在最后的提交步骤之前。</a></p><ul><li><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + &gt; -u 是说在读取后更新 index，使得 working tree 与 index 保持同步 + <code>git commit -m &quot;finish,迁移CSS_Ex到了Code_Repository/css/下&quot;</code> + <code>git add .</code> + <code>git commit -m &quot;迁移完成&quot;</code> + <code>git push -u origin master</code></li></ul></li></ul></li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/QNW1boS.png" alt="enter description here"></td></tr></tbody></table><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><ul><li>在操作完成之后确实实现了合并到同一个仓库，但是<strong>并没有预期的结果</strong>，没有完美的合并提交记录。多次操作之后，将一些零散的东西合并到了同一个仓库。但是原来的仓库还是存在的。如果将原来零散的仓库删除。可以看到结果中，<code>a year ago</code>，历史提交记录确实存在，但是其他<code>flex_Ex</code>显示的却是在进行这个合并操作时提交的时间。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">如何用 Git 合并两个库（合并历史记录，解决冲突／改写路径）</a><br><a href="https://mlichtenberg.wordpress.com/2015/08/28/merging-git-repositories-and-preserving-history/" target="_blank" rel="noopener">Merging Git Repositories and Preserving History</a><br><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener"> Git 基础 - 远程仓库的使用</a><br><a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener">MERGE STRATEGIES​ - ours</a><br><a href="https://git-scm.com/docs/git-read-tree" target="_blank" rel="noopener">git read-tree</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想着整理一下 github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地 A 仓库中 clone B 再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://blog.booml.cn/tags/git/"/>
    
      <category term="工具" scheme="http://blog.booml.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>undefined behavior in c</title>
    <link href="http://blog.booml.cn/2018/01/06/undefined%20behavior%20in%20c/"/>
    <id>http://blog.booml.cn/2018/01/06/undefined behavior in c/</id>
    <published>2018-01-06T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="undefined-behavior（未定义行为）"><a href="#undefined-behavior（未定义行为）" class="headerlink" title="undefined behavior（未定义行为）"></a>undefined behavior（未定义行为）</h2><ul><li>思考一下下面这段代码的输出会是什么（答案在后面）？</li><li>这段代码运行过程是怎样？</li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ(y) (y*y)  <span class="comment">//define 1</span></span></span><br><span class="line"><span class="comment">//#define SQ(y) ((y)*(y))   //define 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%-2d"</span>,SQ(i++));</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-只试了两种编译器</span></span><br><span class="line"><span class="comment"> *所用编译器：gcc</span></span><br><span class="line"><span class="comment"> *       用define  1 : 结果1  9  15</span></span><br><span class="line"><span class="comment"> *       用define 2 ：结果1  9  15</span></span><br><span class="line"><span class="comment"> *其他编辑器：</span></span><br><span class="line"><span class="comment"> *      用define  1 : 结果2  12  30</span></span><br><span class="line"><span class="comment"> *      用define  2: 结果1  9  15</span></span><br><span class="line"><span class="comment"> *      。。。。。</span></span><br></pre></td></tr></table></figure><h3 id="问题：为什么得到的结果不一样？"><a href="#问题：为什么得到的结果不一样？" class="headerlink" title="问题：为什么得到的结果不一样？"></a>问题：为什么得到的结果不一样？</h3><ul><li>看上面的对比，是因为编辑器的原因导致的??</li><li>一开始某本书上的答案是 2 12 30 ，我很纳闷，开头第一个数居然是 2，于是一番折腾查阅了一下别人的看法。</li></ul><h3 id="我认为的原因是：undefined-behavior"><a href="#我认为的原因是：undefined-behavior" class="headerlink" title="我认为的原因是：undefined behavior"></a>我认为的原因是：undefined behavior</h3><ul><li>什么是：undefined behavior（未定义行为）呢？如下。<blockquote><p>在计算机程序设计中，未定义行为（英语：undefined behavior) 是指行为不可预测的计算机代码。这是一些编程语言的一个特点，最有名的是在 C 语言中。在这些语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。……. 因此，这种未定义行为一般应被视为 bug。<br>—来源：<a href="https://zh.wikipedia.org/wiki/%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">中文维基百科</a></p></blockquote></li></ul><h3 id="还有哪些-undefined-behavior（未定义行为）"><a href="#还有哪些-undefined-behavior（未定义行为）" class="headerlink" title="还有哪些 undefined behavior（未定义行为）"></a>还有哪些 undefined behavior（未定义行为）</h3><blockquote><p>偷懒：)。此处省略一些例子，因为 wiki 上都有一些典型例子。中文访问不了的话，英文在这，<a href="https://en.wikipedia.org/wiki/Undefined_behavior" target="_blank" rel="noopener">点我</a>。</p></blockquote><h2 id="如何解释这段代码"><a href="#如何解释这段代码" class="headerlink" title="如何解释这段代码"></a>如何解释这段代码</h2><ul><li>输出 1 9 15<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，i=1，i++=2，1 _ 2 = 2， 再 i++=3<br><strong>第二次循环时</strong>，i=3，i++=4，3 _ 4 = 12，再 i++=5<br><strong>第三次循环时</strong>，i=5，i++=5, 5 * 6 = 30，再 i++=6<br>//进入 i&lt;=5 判断,值为假，退出循环</li></ul><hr><ul><li>输出 2 12 30<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，首先 i=1, 1 _ 1 = 1，i++=2，再 i++=3<br><strong>第二次循环时</strong>，首先 i=3, 3 _ 3 = 9，i++=4，再 i++=5<br><strong>第三次循环时</strong>，首先 i=5, 5 * 5 = 25, i++=6，再 i++=7<br>// i=7，所以退出循环。<blockquote><p>首先 i++是先运算，后加。对于 SQ(i++)来说，其实质是((i++)*(i++))。在后加运算符是在整个运算完成之后，才进行加 1 操作的。</p></blockquote></li></ul><p><em>多问和讨论总是有好处的，继续保持：）</em><br>参考：<br>[1]<a href="https://zhidao.baidu.com/question/561702258825816084.html" target="_blank" rel="noopener">c语言的代参宏定义，#define sq(y) ((y)*(y))….输出应该是2 12 30才对啊？？</a>[2]<a href="https://www.zhihu.com/question/36940781/answer/69683475" target="_blank" rel="noopener">int i=5 ；printf(“%d”,i++,++i)；为什么输出 6?</a></p><p>[3]<a href="http://www.cnblogs.com/yezhenhan/archive/2011/11/05/2236973.html" target="_blank" rel="noopener">c语言中define的用法</a><br>进阶（可不看）：<br><a href="https://wenku.baidu.com/view/2bd97e6bdd36a32d737581b4.html" target="_blank" rel="noopener">关于宏定义的 ppt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;undefined-behavior（未定义行为）&quot;&gt;&lt;a href=&quot;#undefined-behavior（未定义行为）&quot; class=&quot;headerlink&quot; title=&quot;undefined behavior（未定义行为）&quot;&gt;&lt;/a&gt;undefined behavior（未定义行为）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;思考一下下面这段代码的输出会是什么（答案在后面）？&lt;/li&gt;
&lt;li&gt;这段代码运行过程是怎样？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="c" scheme="http://blog.booml.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>shell的正则表达式</title>
    <link href="http://blog.booml.cn/2017/07/20/shell%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.booml.cn/2017/07/20/shell正则表达式/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.887Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><ol><li>正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据</li><li>正则表达式与通配符的区别 1.正则表达式–匹配“文件”符合条件的字符串–&gt;&gt;包含匹配 2.通配符—–匹配符合条件的“文件”名——–&gt;&gt;完全匹配 3.为什么存在，通配符、正则表达式？<a id="more"></a><ul><li>ls、find、cp（操作文件的一些命令）不支持正则表达式，只能用通配符。</li><li>grep、awk、sed（操作字符串的一些命令）支持正则表达式。</li><li>为什么所有的不都支持正则表达式？</li></ul></li><li>正则表达式<ol><li>基础正则</li></ol></li></ol><table><thead><tr><th>元<strong>字</strong>符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>.</strong></td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>^</strong></td><td>匹配行首，例：^he 匹配以 he 开头的行</td></tr><tr><td><strong>$</strong></td><td>匹配行尾，例：he$匹配以 he 为结尾的字符串</td></tr><tr><td><strong>[ ]</strong></td><td>匹配括号中指定的任意一个字符，<strong>只匹配一个</strong> 例：[a-z]匹配 a-z 中的任意一个字符，[0-9][a-z]表示“连续匹配”</td></tr><tr><td><strong>[^]</strong></td><td>匹配除中括号字符外任意一个字符，例：^[0-9]匹配任意一位非数字的字符</td></tr><tr><td>\</td><td>转义符，取消特殊字符的含义</td></tr><tr><td>\ { n\ }</td><td>表示前面字符<strong>恰好</strong>出现 n 次</td></tr><tr><td>\ { n,\ }</td><td>表示前面字符出现<strong>不小于</strong>n 次</td></tr><tr><td>\ {n,m\ }</td><td>表示其前面字符<strong>至少</strong>出现 n 次</td></tr></tbody></table><ol><li>扩展正则</li></ol><hr><h2 id="正则表达式（基础正则）"><a href="#正则表达式（基础正则）" class="headerlink" title="正则表达式（基础正则）"></a><strong>正则表达式（基础正则）</strong></h2><h3 id="“-“"><a href="#“-“" class="headerlink" title="“ * “"></a>“ * “</h3><ol><li>“<code>*</code>“星号——–不同于通配符中的匹配所有内容。<ul><li>前一个字符匹配<strong>0 次</strong>，或者任意多次。<ul><li><code>a*</code> - - 匹配<strong>所有内容</strong>，包括<strong>空白行</strong>。</li><li><code>aa*</code> - - 匹配至少包含有一个 a 的行。</li><li><code>aaa*</code> - -匹配至少包含两个连续的 a 的字符串。</li></ul></li></ul></li></ol><h3 id="“-“-1"><a href="#“-“-1" class="headerlink" title="“ . “"></a>“ . “</h3><ol><li>“<code>.</code>“——–和通配符中”?”类似。<ul><li>匹配<strong>除了换行符</strong>外任意字符<ul><li><code>s..d</code> - - 匹配之间两个字符的单词。</li><li><code>s.*d</code> - - 匹配之间的任意字符。</li><li><code>.*</code> - - 匹配所有内容。</li></ul></li></ul></li></ol><h3 id="“-“、”-“、”-“、”-“"><a href="#“-“、”-“、”-“、”-“" class="headerlink" title="“ ^ “、” $ “、” [] “、” [ ^ ] “"></a>“ ^ “、” $ “、” [] “、” [ ^ ] “</h3><ol><li>“<code>^</code>“、”<code>$</code>“、”<code>[]</code>“、”<code>[^]</code>“<ul><li><code>^</code> - - 匹配行首。</li><li><code>$</code> - - 匹配行尾。</li><li><code>[]</code> - - 匹配括号中指定字符串中的任意字符，<strong>只匹配一个</strong>。</li><li><code>[^]</code> - - 匹配除中括号的字符以外的任意一个字符。</li></ul></li></ol><h3 id="n-、-n-、-n-m"><a href="#n-、-n-、-n-m" class="headerlink" title="{n\ }、{n,\ }、{n,m\ }"></a>{n\ }、{n,\ }、{n,m\ }</h3><ol><li>“<code>\{n\}</code>”、”<code>\{n,\}</code>“、”<code>\{n,m\}</code>“<ul><li><code>\{n\}</code> - - 例：<code>a\{3\}</code> 匹配 a 字母连续出现三次的字符串（连续四次以上也会被匹配到，所以在该匹配首尾加定界符能精确匹配到）</li><li><code>\{n,\}</code> - - 例：<code>\{n,\}</code> 前面字符出现不少于 n 次</li><li><code>\{n,m\}</code> - - 例：<code>sa\{1,3}i</code> 匹配在字母 s 和字母 i 之间最少一个 a，最多三个 a</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据&lt;/li&gt;
&lt;li&gt;正则表达式与通配符的区别 1.正则表达式–匹配“文件”符合条件的字符串–&amp;gt;&amp;gt;包含匹配 2.通配符—–匹配符合条件的“文件”名——–&amp;gt;&amp;gt;完全匹配 3.为什么存在，通配符、正则表达式？
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="shell" scheme="http://blog.booml.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>question-check</title>
    <link href="http://blog.booml.cn/2017/05/27/check-question/"/>
    <id>http://blog.booml.cn/2017/05/27/check-question/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.837Z</updated>
    
    <content type="html"><![CDATA[<p>质量反馈调查展示界面</p><a id="more"></a><ul><li>编辑</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b69424e5.jpg" alt="编辑问卷" title="编辑问卷"></p><ul><li>管理</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b8f297d9.jpg" alt="问卷管理" title="问卷管理"></p><ul><li>答题<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32bfe08f31.jpg" alt="答题" title="问卷调查"></li><li>统计数据<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32c1f911b8.jpg" alt="enter description here" title="统计数据"></li><li>题库</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32c32be3ba.jpg" alt="题库" title="题库"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;质量反馈调查展示界面&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="展示" scheme="http://blog.booml.cn/tags/%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>acm基础--POJ No.1003 Hangover</title>
    <link href="http://blog.booml.cn/2017/05/25/acm00/"/>
    <id>http://blog.booml.cn/2017/05/25/acm00/</id>
    <published>2017-05-24T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于运算符号的思考（acm-热身）"><a href="#关于运算符号的思考（acm-热身）" class="headerlink" title="关于运算符号的思考（acm 热身）"></a>关于运算符号的思考（acm 热身）</h2><h3 id="POJ-No-1003-Hangover"><a href="#POJ-No-1003-Hangover" class="headerlink" title="POJ No.1003 Hangover"></a>POJ No.1003 Hangover</h3><blockquote><p>input：<br>1.00<br>3.71<br>output：<br>3 card(s)<br>61 card(s)</p></blockquote><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">float</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;b)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0.0</span>)<span class="keyword">break</span>;</span><br><span class="line">    a=<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;a&lt;b;++n) a+=<span class="number">1.0</span>/(<span class="keyword">float</span>)(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span> card(s) \n<span class="string">",n-1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="逗号运算符号"><a href="#逗号运算符号" class="headerlink" title="逗号运算符号"></a>逗号运算符号</h4><blockquote><p><strong><em>while(scanf(“%f”,&amp;b)==1)</em></strong><br>compare to<br><strong><em>while(scanf(“%f”,&amp;b),b)</em></strong><br>结束条件等价于<strong><em>b!=0</em></strong>即使 b 的值为 0.000001f,0.00001<br>f!=0 为真，也不会结束循环。所以写法(*，b）非常重要</p></blockquote><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><blockquote><p>直接用(float)转换为 int 类型，简单点就写成<br><strong><em>for(n=1;al；)</em></strong></p></blockquote><h4 id="减少变量"><a href="#减少变量" class="headerlink" title="减少变量"></a>减少变量</h4><blockquote><p>省略 int 类型将 n 写入 main（），但是有的编译器并不能通过。所以为了简单清晰，还是不要用的好。</p></blockquote><h4 id="尽量多用-for-循环"><a href="#尽量多用-for-循环" class="headerlink" title="尽量多用 for 循环"></a>尽量多用 for 循环</h4><p><strong>直接缩成一行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其中包含n省略在main</span><br><span class="line">main(n)</span><br><span class="line">&#123;</span><br><span class="line">float b;</span><br><span class="line">for(;scanf(&quot;%f&quot;,&amp;b),b;printf(&quot;%d card(s)\n&quot;,n-1))</span><br><span class="line">for(n=1;b&gt;0;)b-=1./++n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于运算符号的思考（acm-热身）&quot;&gt;&lt;a href=&quot;#关于运算符号的思考（acm-热身）&quot; class=&quot;headerlink&quot; title=&quot;关于运算符号的思考（acm 热身）&quot;&gt;&lt;/a&gt;关于运算符号的思考（acm 热身）&lt;/h2&gt;&lt;h3 id=&quot;POJ-No-1003-Hangover&quot;&gt;&lt;a href=&quot;#POJ-No-1003-Hangover&quot; class=&quot;headerlink&quot; title=&quot;POJ No.1003 Hangover&quot;&gt;&lt;/a&gt;POJ No.1003 Hangover&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;input：&lt;br&gt;1.00&lt;br&gt;3.71&lt;br&gt;output：&lt;br&gt;3 card(s)&lt;br&gt;61 card(s)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>深度优先算法-部分和问题</title>
    <link href="http://blog.booml.cn/2017/05/24/DFS-%E9%83%A8%E5%88%86%E5%92%8C/"/>
    <id>http://blog.booml.cn/2017/05/24/DFS-部分和/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。"><a href="#给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。" class="headerlink" title="给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。"></a>给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。</h3><a id="more"></a><p>限制条件</p><ul><li>1≤ n ≤20</li><li>-10^8^ ≤ a~i~ ≤ 10^8^</li><li>-10^8^ ≤ k ≤ 10^8^<br>输入</li><li>n=4</li><li>a={1,2,4,7}</li><li>k=13<br>输出<br>yes （13 = 2 + 4 + 7）</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="利用最简单的递归，可以先画出深度优先的树"><a href="#利用最简单的递归，可以先画出深度优先的树" class="headerlink" title="利用最简单的递归，可以先画出深度优先的树"></a>利用最简单的递归，可以先画出深度优先的树</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span>c++</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNUM = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">int</span> arr[MAXNUM];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_data</span><span class="params">(<span class="keyword">int</span> *n, <span class="keyword">int</span> *k, <span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"n = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a = &#123;"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; *n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"k = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//已经从前n项得到了和sum，然后对于i项之后的分支</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果前n项都计算过了，则返回sum是否与k相等</span></span><br><span class="line">    <span class="keyword">if</span> (i == n) <span class="keyword">return</span> sum == k;</span><br><span class="line"><span class="comment">//    不加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//    加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum+arr[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 无论是否加上a[i],都不能凑成k就返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dfs(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    input_data(&amp;n, &amp;k, arr);</span><br><span class="line"></span><br><span class="line">    solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。&quot;&gt;&lt;a href=&quot;#给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。&quot; class=&quot;headerlink&quot; title=&quot;给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。&quot;&gt;&lt;/a&gt;给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。&lt;/h3&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>Steps</title>
    <link href="http://blog.booml.cn/2017/05/21/poj%20No.2590/"/>
    <id>http://blog.booml.cn/2017/05/21/poj No.2590/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POj-No-2590-Steps"><a href="#POj-No-2590-Steps" class="headerlink" title="POj No.2590 Steps"></a>POj No.2590 Steps</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在数轴上的两点之间，按照下面规则移动。</p><ul><li>每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差 1。</li><li>每一步和最后一步的步幅必须是 1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。<a id="more"></a></li></ul><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>测试数据个数 n、开始地点 x 以及终点 y（0&lt;=x&lt;=y&lt;2^31^),格式如下：</p><blockquote><p>n<br>x~1~ y~1~<br>x~2~ y~2~<br>…<br>x~n~ y~n~</p></blockquote><ul><li><p>输入</p><blockquote><p>3<br>45 48<br>45 49<br>45 50</p></blockquote></li><li><p>输出</p><blockquote><p>3<br>3<br>4</p></blockquote></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> step, i,len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(step=<span class="number">0</span>;step&lt;<span class="number">20</span>;++step)&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//求得一半为止的步数</span></span><br><span class="line"><span class="comment">//步数是奇数就加1</span></span><br><span class="line"><span class="keyword">int</span> mid=step/<span class="number">2</span>+step%<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出1+2+3+...到中间地点为止的合计</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mid;++i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从中间地点开始计算...+3+2+1</span></span><br><span class="line"><span class="keyword">for</span>(i=step/<span class="number">2</span>;i&gt;<span class="number">0</span>;--i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2d step(s)...%3d\n"</span>,step,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><blockquote><p>画图找规律</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;POj-No-2590-Steps&quot;&gt;&lt;a href=&quot;#POj-No-2590-Steps&quot; class=&quot;headerlink&quot; title=&quot;POj No.2590 Steps&quot;&gt;&lt;/a&gt;POj No.2590 Steps&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在数轴上的两点之间，按照下面规则移动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差 1。&lt;/li&gt;
&lt;li&gt;每一步和最后一步的步幅必须是 1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>poj No.3062 Celebrity jeopardy</title>
    <link href="http://blog.booml.cn/2017/05/20/poj%20No.3062/"/>
    <id>http://blog.booml.cn/2017/05/20/poj No.3062/</id>
    <published>2017-05-19T16:00:00.000Z</published>
    <updated>2018-07-22T06:56:59.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Celebrity-jeopardy"><a href="#Celebrity-jeopardy" class="headerlink" title="Celebrity jeopardy"></a>Celebrity jeopardy</h2><h3 id="直接输出的数字"><a href="#直接输出的数字" class="headerlink" title="直接输出的数字"></a>直接输出的数字</h3><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;~c;)</span><br><span class="line">    &#123;</span><br><span class="line">        c = getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Celebrity-jeopardy&quot;&gt;&lt;a href=&quot;#Celebrity-jeopardy&quot; class=&quot;headerlink&quot; title=&quot;Celebrity jeopardy&quot;&gt;&lt;/a&gt;Celebrity jeopardy&lt;/h2&gt;&lt;h3 id=&quot;直接输出的数字&quot;&gt;&lt;a href=&quot;#直接输出的数字&quot; class=&quot;headerlink&quot; title=&quot;直接输出的数字&quot;&gt;&lt;/a&gt;直接输出的数字&lt;/h3&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
      <category term="poj" scheme="http://blog.booml.cn/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>codewars_Replace With Alphabet Position</title>
    <link href="http://blog.booml.cn/2017/05/07/codewars_Replace%20With%20Alphabet%20Position/"/>
    <id>http://blog.booml.cn/2017/05/07/codewars_Replace With Alphabet Position/</id>
    <published>2017-05-07T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>这是一道字符串操作的题。题目如下：</p><a id="more"></a><blockquote><p>Welcome.<br>In this kata you are required to, given a string, replace every letter with its position in the alphabet. If anything in the text isn’t a letter, ignore it and don’t return it. a being 1, b being 2, etc.<br>As an example:</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alphabet_position(&quot;The sunset sets at twelve o&apos; clock.&quot;)</span><br><span class="line"></span><br><span class="line">Should return &quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11&quot; (As a string.)</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先肯定利用方法<code>charCodeAt</code>来处理字符，其次得转化下大小写，因为每个字符都是空格隔开，那么肯定用到<code>split</code>等来“切割”。思路大概就是我代码里头描述的，但是看最佳答案的时候，有相对另外的思路，大概意思差不多但是把处理的顺序调一下，会有意想不到的作用，也是佩服那些大牛们啊，具体怎么调整才可以 →_→ 最优，聪明的你，可以想一想啊 :) 留个悬念。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function alphabetPosition(text) &#123;</span><br><span class="line">    return text.replace(/[^a-zA-Z]+/g,&apos;&apos;).toUpperCase().split(&apos;&apos;).map(</span><br><span class="line">        function (eachStr) &#123;</span><br><span class="line">            return eachStr.charCodeAt()-64;</span><br><span class="line">        &#125;).join(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(alphabetPosition(&apos;The testT&apos;))</span><br></pre></td></tr></table></figure><ul><li>那么我看到目前为止最机智中票数最高的代码下面这个，可惜这些对我来说还是很晦涩啊。但是我想大概思路是差不多的。另外看到很多用 for 循环的，感觉太麻烦，虽然代码容易读，但是我想对于一个想学习 JS 的人来说，尽量用方法应该是好的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let alphabetPosition = (text) =&gt; text</span><br><span class="line"> .toUpperCase()</span><br><span class="line"> .replace(/[^A-Z]/g, &apos;&apos;)</span><br><span class="line"> .split(&apos;&apos;)</span><br><span class="line"> .map(ch =&gt; ch.charCodeAt(0) - 64).join(&apos; &apos;);</span><br></pre></td></tr></table></figure><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p>看到 js 字符串转换为数字基本就用转换函数的比较多，</p><blockquote><p>js 字符串转换成数字<br>常用的几种方法转换函数、强制类型转换、利用 js 变量弱类型转换。</p></blockquote><ul><li>转换函数<br><code>parseInt(&quot;1234blue&quot;); // returns 1234</code></li><li>强制类型转换<br><code>Boolean(&quot;hi&quot;); //true – non-empty string</code></li><li>js 变量弱类型转换<br><code>var str = &#39;012.345 &#39;;var x = str - 0;x = x * 1;</code></li></ul><p>查资料发现，关于类型转换的还是比较多，但是我并没有感觉其中的区别和用的地方，可能是实际运用接触不多。但是关于字符和数字之间的转换在 Nodejs 中也是有体现。因此，觉得 codewars 的题目质量还真的挺不错，至少对于我这种初学者来说。每一道题目后面可能都是作者精心挑选出来的。所以，加油吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaScript 权威指南(第 6 版)(中文版)</li><li>JavaScript 语言精粹(修订版) 中文版</li><li>MDN(Mozilla Developer Network)</li><li><a href="http://www.bkjia.com/article/24233.html#top" target="_blank" rel="noopener">js 字符串转换成数字</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;这是一道字符串操作的题。题目如下：&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Vowel Counts</title>
    <link href="http://blog.booml.cn/2017/04/02/vowel%20count/"/>
    <id>http://blog.booml.cn/2017/04/02/vowel count/</id>
    <published>2017-04-02T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.894Z</updated>
    
    <content type="html"><![CDATA[<p>统计字符串中的特定字符的数量。主要是方法的优化:</p><a id="more"></a><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h2><blockquote><p>Description:</p></blockquote><blockquote><p>Return the number (count) of vowels in the given string.</p></blockquote><blockquote><p>We will consider a, e, i, o, and u as vowels for this Kata.</p></blockquote><h2 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h2><ul><li>测试数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Example test:</span><br><span class="line">describe(&quot;Case 1&quot;, function()&#123;</span><br><span class="line">    it (&quot;should be defined&quot;, function()&#123;</span><br><span class="line">        Test.assertEquals(getCount(&quot;abracadabra&quot;), 5)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h2><ul><li>第一眼就想到是可以从头依次查找的。能想到用 c，java 等都是利用 for 循环来处理。</li><li>其次，JS 中想到的是字符串匹配，利用正则表达式对特定字符串遍历。然后输出匹配字符的 length。 * 利用字符串的原型方法<code>String.prototype.match()</code>,语法<code>str.match(regxp)</code></li><li>后面再总结一下，<strong>string 类方法 match(regex)</strong> <strong>和 RegExp 类方法 exec(string)</strong></li></ul><h2 id="4-解题"><a href="#4-解题" class="headerlink" title="4. 解题"></a>4. 解题</h2><h3 id="4-1-最优化："><a href="#4-1-最优化：" class="headerlink" title="4.1 最优化："></a>4.1 最优化：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    return (str.match(/[aeiou]/ig)||[]).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-“多语言”解"><a href="#4-2-“多语言”解" class="headerlink" title="4.2 “多语言”解"></a>4.2 “多语言”解</h3><p>非常的直白啊，感觉都没有一点艺术。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelsCount = 0;</span><br><span class="line">        var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">        for(var i=0; i&lt;str.length; i++)&#123;</span><br><span class="line">            for(var j=0;j&lt;a.length; j++)&#123;</span><br><span class="line">                if(a[j]===str[i])&#123;</span><br><span class="line">                    vowelsCount ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return vowelsCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-优化"><a href="#4-3-优化" class="headerlink" title="4.3 优化"></a>4.3 优化</h3><p>用<code>indexof</code>来减少 for 循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelCount = 0;</span><br><span class="line">    var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">    for(var i=0;i&lt;str.length; i++)&#123;</span><br><span class="line">        if((a.indexOf(str[i]))!==-1)&#123;</span><br><span class="line">            vowelCount ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return vowelCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="match（regexp）和-exec"><a href="#match（regexp）和-exec" class="headerlink" title="match（regexp）和 exec()"></a>match（regexp）和 exec()</h3><ul><li>关于这两个的讨论，感觉说破天也没有 MDN 上说得好啊。:&gt;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统计字符串中的特定字符的数量。主要是方法的优化:&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t rely on luck.</title>
    <link href="http://blog.booml.cn/2017/03/30/Math.random/"/>
    <id>http://blog.booml.cn/2017/03/30/Math.random/</id>
    <published>2017-03-30T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>在 codewars 上碰到一道奇怪的题目。猜随机数。难度 6kyu，题干比以往简单。这就让人捉急了。什么都看不出来。接下来看题</p><a id="more"></a><blockquote><p>The test fixture I use for this kata is pre-populated.<br>It will compare your guess to a random number generated in Ruby by:</p></blockquote><blockquote><p>(Kernel::rand() * 100 + 1).floor<br>In Javascript/CoffeeScript by:</p></blockquote><blockquote><p>Math.floor(Math.random() * 100 + 1)<br>In Python by:<br>randint(1,100)<br>You can pass by relying on luck or skill but try not to rely on luck.</p></blockquote><blockquote><p>“The power to define the situation is the ultimate power.” - Jerry Rubin</p></blockquote><blockquote><p>Good luck!</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里，题目给出的测试是：</p><blockquote><p>Example Test:<br><code>var lucky_number = Math.floor(Math.random() * 100 + 1);</code><br><code>Test.assertEquals(guess, lucky_number, &quot;Sorry. Unlucky this time.&quot;);</code></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看到题目的时候，- - 就这么点? 然后 0.0 ，睁大眼睛看，然后 = =，这什么鬼，+.+，直接<code>Math.random()</code>?, @.@ 那怎么相等呢。？.?<br>搜了下 9.9 ，发现只有<a href="http://tao.logdown.com/posts/207117-codewarsdont-rely-on-luck" target="_blank" rel="noopener">Ruby 的答案</a>。</p><ul><li>再查了下随机数。<br>_ 随机数分为 <strong>伪随机数</strong> 和<strong> 真随机数 </strong><br>_ 正常电脑各种语言中使用的都是<strong> 伪随机数 </strong>，是由可确定的<em>函数</em>，通过种子（常用时钟），产生伪随机数，这种数字理论上存在可预测性。 * _函数_ :计算机产生随机数的方法有：<code>线性同余方法</code>(大部分采用,，即 Rand<em>Number = (Rand_Seed </em> X + Y) mod Z 那个 RandSeed 就是「种子」一般取时钟周期，也就是 GetTickCount()。），<code>平方取中法</code>，<code>M-sequence</code>，<code>梅森旋转算法</code>，还有<code>MT随机数算法</code>。<br>_ ps:这里不对 随机数的产生和随机数的计算理论做深究。具体可以看<a href="https://www.zhihu.com/question/20423025" target="_blank" rel="noopener">这里</a>，各答案较完整讲了计算机产生的是伪随机数，还有产生<strong> 真随机数 </strong> 的可行性。</li><li>那么 JavaScript 中的随机数是个什么样的存在？答案当然是伪随机数。= =<br>_ JavaScript 中并没有类似上面底层语言提供的函数,根据 panxiwu 博客中的说法，c 和 Ruby 都有底层重置 seed 方法依据不同的方法来生成种子。而，JavaScript 应该是依靠引擎使用随机函数方法，所以在安全方面，不用 Math.random 最好，替代的可以使用<code>window.crypto.getRandomValues(array);</code> &gt; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random" target="_blank" rel="noopener">MDN：</a>Math.random() does not provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the window.crypto.getRandomValues() method.<br>_ V8 引擎中实现 随机数：通过 Mathlmmul 来创造，并没有所谓的 seed 参数，所以只能重写。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// ECMA 262 - 15.8.2.14 var rngstate;</span><br><span class="line">// Initialized to a Uint32Array during genesis.</span><br><span class="line">function MathRandom() &#123;</span><br><span class="line">var r0 = (MathImul(18030, rngstate[0] &amp; 0xFFFF) + (rngstate[0] &gt;&gt;&gt; 16)) | 0;        rngstate[0] = r0; var r1 = (MathImul(36969, rngstate[1] &amp; 0xFFFF) + (rngstate[1] &gt;&gt;&gt; 16)) | 0;</span><br><span class="line">    rngstate[1] = r1; var x = ((r0 &lt;&lt; 16) + (r1 &amp; 0xFFFF)) | 0;</span><br><span class="line">// Division by 0x100000000 through multiplication by reciprocal.</span><br><span class="line">return (x &lt; 0 ? (x + 0x100000000) : x) * 2.3283064365386962890625e-10; &#125;</span><br><span class="line">// Non-standard extension.</span><br><span class="line">function MathImul(x, y) &#123;</span><br><span class="line">    return %NumberImul(TO_NUMBER_INLINE(x), TO_NUMBER_INLINE(y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><blockquote><p>from <a href="https://github.com/v8/v8/blob/dae6dfe08ba9810abbe7eee81f7c58e999ae8525/src/math.js#L144" target="_blank" rel="noopener">v8</a></p></blockquote></li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var guess = 10</span><br><span class="line">Math.floor = function(num) &#123;return guess;&#125;</span><br></pre></td></tr></table></figure><p>Accept!然后看到一堆不可描述的东西。lol</p><ul><li>这个……..</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var guess = 10;</span><br><span class="line">lucky_number = 10;</span><br></pre></td></tr></table></figure><ul><li>还有这个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.random=()=&gt;&quot;:D&quot;</span><br><span class="line">Math.floor=x=&gt;(x+&apos;&apos;).replace(/N/g,&apos;L&apos;).replace(/a/g,&quot;0&quot;)</span><br><span class="line">var guess = &quot;L0L&quot;</span><br></pre></td></tr></table></figure><p>不少都是写死了 random 的值然后钻牛角尖的。。还有令人搞笑的，可以拿来当笑话集了，这题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var guess = &quot;What a stupid kata.&quot;;</span><br><span class="line"></span><br><span class="line">Math.floor = function() &#123;</span><br><span class="line">  return &quot;What a stupid kata.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有这个，，厉害了。。。<br><img src="https://ooo.0o0.ooo/2017/03/30/58dd0d4db4e85.jpg" alt="enter description here" title="图像 14"></p><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><blockquote><p>比如我们在开发京东的 H5 活动页面的小游戏时，可能需要随机产生一些背景、随机掉落道具、小怪物；当用户中途退出(微信不小心右滑，一定有不少人被这个恶心到[当然现在已经优化])，当用户重新打开小游戏时，用户整体进度、积分我们可以很容易记录到本地或者存储到微信 ID 建立的存储机制中从而得以恢复，但是随机产生的场景、随机掉落道具、小怪物等并不是那么容易存储恢复，重新获取场景、小怪物那未免用户体验太差！！！把画布上的所有物件、怪物属性全部存储下来更是没有必要。此时我们就可以利用我们重写的 Math.random()(此时可不重写内置方法，可另起别名)。只要我们保存下来一个随机数 seed 值，利用 seed 值来恢复所有的场景就好了。<br>from <a href="http://blog.panxinwu.com/" target="_blank" rel="noopener">潘信伍</a> ,谢谢大神啊</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://tao.logdown.com/posts/207117-codewarsdont-rely-on-luck" target="_blank" rel="noopener">悟道集</a><br><a href="http://blog.panxinwu.com/2016/03/27/JavaScript%E4%B8%ADMathdotrandom%E7%9A%84%E7%A7%8D%E5%AD%90%E8%AE%BE%E5%AE%9A%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">JavaScript 中 Math.random 的种子设定方法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;在 codewars 上碰到一道奇怪的题目。猜随机数。难度 6kyu，题干比以往简单。这就让人捉急了。什么都看不出来。接下来看题&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/codewars/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>holygrail（圣杯布局）</title>
    <link href="http://blog.booml.cn/2017/03/25/holygrail/"/>
    <id>http://blog.booml.cn/2017/03/25/holygrail/</id>
    <published>2017-03-25T11:21:28.000Z</published>
    <updated>2018-07-22T06:56:59.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="圣杯布局-holygrail"><a href="#圣杯布局-holygrail" class="headerlink" title="圣杯布局(holygrail)"></a>圣杯布局(<a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">holygrail</a>)</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><blockquote><p>三列。两列固定在两边，中间是一个<strong> 流体 </strong><br>圣杯布局的原理是? 简述实现圣杯布局的步骤。双飞翼布局和圣杯布局有什么异同负 margin 的用法</p></blockquote><a id="more"></a><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li>一个简单的仿照例子实现圣杯布局</li></ul><ul><li>步骤</li></ul><h4 id="1-建立框架"><a href="#1-建立框架" class="headerlink" title="1. 建立框架"></a>1. 建立框架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--第一步 建立框架--&gt;</span><br><span class="line">&lt;div id=&quot;header&quot;&gt;&lt;h1&gt;#header&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;#container&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;footer&quot;&gt;&lt;h1&gt;#footer&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-加-column"><a href="#2-加-column" class="headerlink" title="2. 加 column"></a>2. 加 column</h4><ul><li>float 让其在 line。再清除 footer 让它在最下面。添加背景颜色和边界便于观察。中间栏要放在前面以优先渲染。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">#container &#123;</span><br><span class="line">         padding-left: 200px;</span><br><span class="line">         padding-right:150px;</span><br><span class="line">     &#125;</span><br><span class="line">     #container .column &#123;</span><br><span class="line">         float: left;</span><br><span class="line">     &#125;</span><br><span class="line">     #center &#123;</span><br><span class="line">         width:100%;</span><br><span class="line">     &#125;</span><br><span class="line">     #left &#123;</span><br><span class="line">         width:200px;</span><br><span class="line">     &#125;</span><br><span class="line">     #right &#123;</span><br><span class="line">         width: 150px;</span><br><span class="line">     &#125;</span><br><span class="line">     #footer &#123;</span><br><span class="line">         clear: both;</span><br><span class="line">     &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;#container&lt;/h1&gt;</span><br><span class="line">    &lt;div id=&quot;center&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is center&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;left&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is left&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=&quot;right&quot; class=&quot;column&quot;&gt;&lt;h1&gt;this is right&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>效果图 2.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5d72feabca.png" alt="step2"></li></ul><h4 id="3-将左栏拉到相应位置"><a href="#3-将左栏拉到相应位置" class="headerlink" title="3. 将左栏拉到相应位置"></a>3. 将左栏拉到相应位置</h4><ul><li>要让左栏和中间在一条直线上，先对左栏进行操作,分两步。margin-left:-100%跑到左上角（覆盖主栏目），再设置 position:relative,right:200px 或者 left:-200px（不覆盖主栏目）<ul><li>第一步</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#left &#123;</span><br><span class="line">width:200px;</span><br><span class="line">margin-left: -100%;</span><br><span class="line">background-color: #555555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 3.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5d8169eeaa.png" alt="step3"> * 第二步用相对定位将左栏推开，加上相对定位标志之后，记得给左栏一个<code>right:200px</code>将左栏相对右边 200px,往左推 200px。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#left &#123;</span><br><span class="line">width:200px;</span><br><span class="line">margin-left: -100%;</span><br><span class="line">right:200px;</span><br><span class="line">background-color: #555555;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 3.2<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5dae8bdfa3.png" alt="step3_2"><br>.</li></ul><h4 id="4-将右栏加入-line"><a href="#4-将右栏加入-line" class="headerlink" title="4.将右栏加入 line"></a>4.将右栏加入 line</h4><p>注意： 原作者这里用的是<code>margin-right:-150px</code>，在演示时并不能起效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#right &#123;</span><br><span class="line">width: 150px</span><br><span class="line">margin-right: -100%;</span><br><span class="line">background-color: #8cacea;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果图 4.1<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5de6bddba3.png" alt="step4_1"><br>再处理一些小细节,固定的右边栏多出的字，撑开了</li><li>效果图 4.2<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5e21d68c4d.png" alt="step4_2"></li></ul><h4 id="5-结果"><a href="#5-结果" class="headerlink" title="5.结果"></a>5.结果</h4><p><img src="https://ooo.0o0.ooo/2017/03/25/58d5e4038a31c.gif" alt="result"></p><h3 id="总结实现步骤"><a href="#总结实现步骤" class="headerlink" title="总结实现步骤"></a>总结实现步骤</h3><h4 id="1-div-框架搭建出来，"><a href="#1-div-框架搭建出来，" class="headerlink" title="1. div 框架搭建出来，"></a>1. div 框架搭建出来，</h4><ul><li>div- &gt;container，header，footer</li></ul><h4 id="2-加-column，"><a href="#2-加-column，" class="headerlink" title="2. 加 column，"></a>2. 加 column，</h4><ul><li>设置<code>float:left</code>，</li><li>设置<code>center宽度100%</code></li><li><code>清除footer浮动</code></li></ul><h4 id="3-将左栏添到-center-左边，"><a href="#3-将左栏添到-center-左边，" class="headerlink" title="3. 将左栏添到 center 左边，"></a>3. 将左栏添到 center 左边，</h4><ul><li><code>margin-left:-100%</code>到左上（覆盖主栏目），</li><li>再设置<code>position:relative</code>,<code>right:200px</code>或者<code>left:-200px</code>（不覆盖主栏目）</li></ul><h4 id="4-将右栏添右"><a href="#4-将右栏添右" class="headerlink" title="4. 将右栏添右"></a>4. 将右栏添右</h4><ul><li><code>margin-right: -100%;</code></li></ul><h3 id="圣杯布局和双飞翼布局异同"><a href="#圣杯布局和双飞翼布局异同" class="headerlink" title="圣杯布局和双飞翼布局异同"></a>圣杯布局和双飞翼布局异同</h3><ol><li>两种布局方式都是把主列放在文档流最前面，使主列优先加载</li><li>两者在实现上的相同点在于都让三列浮动，然后通过负外边距形成三列布局；</li><li>两种布局方式的不同在于如何处理中间主列的位置：圣杯布局是利用父容器的左右内边距定位；双飞翼布局是把主列嵌套在 div 后利用主列的左右外边距定位。</li></ol><h3 id="浮动元素上的负-margin"><a href="#浮动元素上的负-margin" class="headerlink" title="浮动元素上的负 margin"></a>浮动元素上的负 margin</h3><blockquote><p>给一个浮动元素加上相反方向的负 margin，则会使行间距为 0 且内容重叠。</p></blockquote><ul><li>bug 修复 * 当浮动元素使用负 margin 时，在一些旧的浏览器中可能会出现问题。用<code>position:float</code>,能解决很多问题。</li><li>具体可以参考 <a href="http://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负 margin 用法权威指南</a></li></ul><h3 id="flex-实现的“标准”圣杯布局"><a href="#flex-实现的“标准”圣杯布局" class="headerlink" title="flex 实现的“标准”圣杯布局"></a>flex 实现的“标准”圣杯布局</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">MDN</a></p><ul><li>效果图<br><img src="https://ooo.0o0.ooo/2017/03/25/58d5fa60c22ea.png" alt="step"></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>圣杯布局基本就是（适：自适应，左：左栏，右：右栏）<br>_ 左适右<br>_ 左右适<br>_ 左适、右适<br>_ 等等</li><li><p>圣杯布局还有很多的实现方法<br>_ 纯浮动实现<br>_ flex 实现可以参考，<a href="http://web.jobbole.com/84993/" target="_blank" rel="noopener">圣杯布局小结</a>，觉得这位作者对圣杯布局总结的挺好，各种小例子。其他的也可以搜一下。我这里主要是介绍下圣杯布局。</p></li><li><p>圣杯布局类似 * <a href="http://www.imooc.com/wenda/detail/254035" target="_blank" rel="noopener"> 双飞翼布局</a> 1. left 和 right 覆盖了 center 的左右两边的内容。 2. center 的外部再加一个 div 标签来包裹中间区块， 3. 宽度为 100%。然后再设置 main 的左右外边距，使它回到对应的位置。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">In Search of the Holy Grail</a> by Matthew Levine<br><a href="https://segmentfault.com/a/1190000004524159" target="_blank" rel="noopener">关于「圣杯布局」</a> by DotHide<br><a href="http://web.jobbole.com/84993/" target="_blank" rel="noopener">圣杯布局小结</a> by 流云诸葛<br><a href="http://www.jianshu.com/p/1a981df93770" target="_blank" rel="noopener">圣杯布局和双飞翼布局</a> by betterwlf<br><a href="http://blog.leanote.com/post/727600729@qq.com/CSS%E4%B9%8B%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80" target="_blank" rel="noopener">CSS 之圣杯布局和双飞翼布局</a> by 宋菲<br><a href="http://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负 margin 用法权威指南</a> by Airen 的博客</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;圣杯布局-holygrail&quot;&gt;&lt;a href=&quot;#圣杯布局-holygrail&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局(holygrail)&quot;&gt;&lt;/a&gt;圣杯布局(&lt;a href=&quot;https://alistapart.com/article/holygrail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;holygrail&lt;/a&gt;)&lt;/h2&gt;&lt;h3 id=&quot;起源&quot;&gt;&lt;a href=&quot;#起源&quot; class=&quot;headerlink&quot; title=&quot;起源&quot;&gt;&lt;/a&gt;起源&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;三列。两列固定在两边，中间是一个&lt;strong&gt; 流体 &lt;/strong&gt;&lt;br&gt;圣杯布局的原理是? 简述实现圣杯布局的步骤。双飞翼布局和圣杯布局有什么异同负 margin 的用法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="css" scheme="http://blog.booml.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法小记</title>
    <link href="http://blog.booml.cn/2017/03/20/markdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>http://blog.booml.cn/2017/03/20/markdown语法小记/</id>
    <published>2017-03-20T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.867Z</updated>
    
    <content type="html"><![CDATA[<ol><li>插入表格：<br>1.1. 表格的上下需要空行。空行的多少至关重要<ul><li>表格中文字居中 在划线部分的划线两端加上”<strong>:</strong>“<ul><li>比如”<strong>:</strong>—–<strong>:</strong> | <strong>:</strong>—-<strong>:</strong><a id="more"></a></li></ul></li></ul></li><li><code>代码块</code>:<br>2.1. 合理利用代码块有意想不到的效果。<br>3.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;插入表格：&lt;br&gt;1.1. 表格的上下需要空行。空行的多少至关重要&lt;ul&gt;
&lt;li&gt;表格中文字居中 在划线部分的划线两端加上”&lt;strong&gt;:&lt;/strong&gt;“&lt;ul&gt;
&lt;li&gt;比如”&lt;strong&gt;:&lt;/strong&gt;—–&lt;strong&gt;:&lt;/strong&gt; | &lt;strong&gt;:&lt;/strong&gt;—-&lt;strong&gt;:&lt;/strong&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.booml.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="markdown" scheme="http://blog.booml.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>codewars-count_digits</title>
    <link href="http://blog.booml.cn/2017/03/20/codewars/"/>
    <id>http://blog.booml.cn/2017/03/20/codewars/</id>
    <published>2017-03-20T13:41:18.000Z</published>
    <updated>2018-07-22T06:56:59.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>Take an integer n (n &gt;= 0) and a digit d (0 &lt;= d &lt;= 9) as an integer. Square all numbers k (0 &lt;= k &lt;= n) between 0 and n.</p></blockquote><a id="more"></a><blockquote><p>Count the numbers of digits d used in the writing of all the k* *2. Call nb_dig (or nbDig or …) the function taking n and d as parameters and returning this count.</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>n = 10, d = 1,<br>the k * k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 We are using the digit 1 in 1, 16, 81, 100.</li><li>The total count is then 4.<br>nb_dig(25, 1):<br>the numbers of interest are 1, 4, 9, 10, 11, 12, 13, 14, 19, 21<br>which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441 so there are 11 digits <code>1</code> for the squares of numbers between 0 and 25.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>给出<code>n</code>和<code>d</code>，求 0 到 n 中间的平方，再求这些平方的平方，问所得的这些数中包含多少个数字<code>d</code>。大概就是先算出这些数字的平方，然后挨个分解求出其中的值。</li></ul><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function nbDig(n,d) &#123;</span><br><span class="line">    var s = &apos;&apos;;</span><br><span class="line">    for(var i=0;i&lt;=n;i++)&#123;</span><br><span class="line">        s += Math.pow(i,2);</span><br><span class="line">    &#125;</span><br><span class="line">    return s.split(d).length-1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="牢骚篇"><a href="#牢骚篇" class="headerlink" title="牢骚篇"></a>牢骚篇</h2><p>今天，进了个群，挺多厉害的人，还私聊了一个有很多 offer 的同学。顿时觉得，自己就是渣渣啊，一点信心都没有。还是得加油吧，要学的东西还很多啊。<br><img src="https://ooo.0o0.ooo/2017/03/20/58cfd648e6d0a.jpg" alt="累啊"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Take an integer n (n &amp;gt;= 0) and a digit d (0 &amp;lt;= d &amp;lt;= 9) as an integer. Square all numbers k (0 &amp;lt;= k &amp;lt;= n) between 0 and n.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>codewars ooxx =&gt;true</title>
    <link href="http://blog.booml.cn/2017/03/17/codewars-ooxx/"/>
    <id>http://blog.booml.cn/2017/03/17/codewars-ooxx/</id>
    <published>2017-03-17T14:01:18.000Z</published>
    <updated>2018-07-22T06:56:59.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>第二关 Yeah！目标 6kyu，坚持升级~ ：）</p><ul><li>这一关，考察几个基本方法的使用，虽然单独拿出来可能难度不大，但是真正运用在工作中的时候，这些方法可能如大海捞针，不熟练是一时半会儿想不出来的。</li><li>话不多说，呀呀呀，提枪上阵，<a id="more"></a></li></ul><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Check to see if a string has the same amount of ‘x’s and ‘o’s. The method must return a boolean and be case insensitive. The string can contains any char.（0.0 看不懂？往下戳）</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XO(&quot;ooxx&quot;) =&gt; true</span><br><span class="line">XO(&quot;xooxx&quot;) =&gt; false</span><br><span class="line">XO(&quot;ooxXm&quot;) =&gt; true</span><br><span class="line">XO(&quot;zpzpzpp&quot;) =&gt; true // when no &apos;x&apos; and &apos;o&apos; is present should return true</span><br><span class="line">XO(&quot;zzoo&quot;) =&gt; false</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>题目大概意思就是： 在有限任意字符串中字符 <code>x</code> 和 <code>o</code> 存在且<strong>数量相等</strong>时 值为 <code>true</code>,否则当<code>x</code>和<code>o</code>不存在时，值为<code>flase</code>。匹配的话，首先想到正则表达式来处理。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>利用 RegExp 来匹配正则，然后再判断数量为空和数量是否相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function xo(str) &#123;</span><br><span class="line">    var numX = new RegExp(/x/gi);</span><br><span class="line">    //g 全局搜索，i 忽略大小写</span><br><span class="line">    var numO = new RegExp(/o/gi);</span><br><span class="line">    if(numX.test(str)&amp;&amp;numO.test(str))&#123;</span><br><span class="line">        if(str.match(/x/gi).length == str.match(/o/gi).length)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(xo(&apos;xxoo&apos;))</span><br><span class="line">console.log(xo(&apos;glld&apos;))</span><br></pre></td></tr></table></figure><ul><li>仔细一看，这种写法太麻烦。如何轻松取敌呢？</li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>直接返回一个 return，并在 return 中判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function xo(str) &#123;</span><br><span class="line">    var numX = str.match(/x/gi) || [];</span><br><span class="line">    var numO = str.match(/x/gi) || [];</span><br><span class="line"></span><br><span class="line">    return numO.length == numX.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析方法一方法二"><a href="#解析方法一方法二" class="headerlink" title="解析方法一方法二"></a>解析方法一方法二</h4><ul><li>什么鬼！这不同的方法有什么区别呢？？我来试着剖析下这两种方法究竟是何利器。来看看<a href="https://developer.mozilla.org" target="_blank" rel="noopener">MDN</a>是怎么说的？贴心的<a href="https://developer.mozilla.org" target="_blank" rel="noopener">MDN</a>还在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">match</a>这一篇中对两者进行了比较。</li></ul><blockquote><p>1.<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Description" target="_blank" rel="noopener"> RegExp</a> 构造函数创建了一个正则表达式对象，用于将文本与模式匹配。 2.当一个字符串与一个正则表达式匹配时， <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">match()</a>方法检索匹配项。</p></blockquote><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><blockquote><p>如果正则表达式没有 g 标志，则 str.match() 会返回和 RegExp.exec() 相同的结果。而且返回的 Array 拥有一个额外的 input 属性，该属性包含被解析的原始字符串。另外，还拥有一个 index 属性，该属性表示匹配结果在原字符串中的索引（以 0 开始）。</p></blockquote><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><blockquote><p>如果你需要知道一个字符串是否匹配一个正则表达式 RegExp ，可使用 search() 。如果你只是需要第一个匹配结果，你可能想要使用 RegExp.exec() 。如果你想要获得捕获组，并且设置了全局标志，你需要用 RegExp.exec() 。</p></blockquote><p>综上：大概就是这么吧~不用鸟我了，直接看文档吧~</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>方法三是在解答完之后查看他人的方法，大神们就是大神。对于各种用法如数家珍，信手拈来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let x = str.match(/x/gi);</span><br><span class="line">let o = str.match(/o/gi);</span><br><span class="line">return (x &amp;&amp; x.length) === (o &amp;&amp; o.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h3><ul><li>这个<code>keyword</code>变量该如何转义呢？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function addHightLight(txt,keyword) &#123;</span><br><span class="line">    return txt.replace(/+keyword+/g,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function addHightLight(txt,keyword) &#123;</span><br><span class="line">    txt = &quot;咖啡&quot; ;keyword = &quot;机器&quot;;</span><br><span class="line">    var va = new RegExp(keyword,&quot;g&quot;);</span><br><span class="line">    va = /\/咖啡\/g/&#123;lastIndex:0&#125;</span><br><span class="line">    return txt.replace(va,&quot;&lt;mark class=keyword&gt;&quot;+keyword+&quot;&lt;/mark&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就到这里了~<img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;第二关 Yeah！目标 6kyu，坚持升级~ ：）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这一关，考察几个基本方法的使用，虽然单独拿出来可能难度不大，但是真正运用在工作中的时候，这些方法可能如大海捞针，不熟练是一时半会儿想不出来的。&lt;/li&gt;
&lt;li&gt;话不多说，呀呀呀，提枪上阵，
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
</feed>
