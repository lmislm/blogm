<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>“   故不积跬步，无以至千里；不积小流，无以成江海。  -  荀子《劝学篇》”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmislm.com/"/>
  <updated>2019-02-17T13:44:44.927Z</updated>
  <id>http://lmislm.com/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day38-“摸鱼”</title>
    <link href="http://lmislm.com/2019/02/17/2019-02-17/"/>
    <id>http://lmislm.com/2019/02/17/2019-02-17/</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2019-02-17T13:44:44.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>摸了一天的鱼，昨天还是说要看书一天，结果今天中午才起来啊。然后一下午就是光玩儿了。到了晚上才看一会儿书。罪过罪过啊。看书看书！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqqe7qj20u01hcn1x.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;摸了一天的鱼，昨天还是说要看书一天，结果今天中午才起来啊。然后一下午就是光玩儿了。到了晚上才看一会儿书。罪过罪过啊。看书看书！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqqe7qj20u01hcn1x.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day37-杂谈</title>
    <link href="http://lmislm.com/2019/02/16/2019-02-16/"/>
    <id>http://lmislm.com/2019/02/16/2019-02-16/</id>
    <published>2019-02-15T16:00:00.000Z</published>
    <updated>2019-02-16T13:20:22.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>三天打鱼两天晒网，可能说的就是我写博客的状态没错了。今天是周末，待着一天，上午看电影，下午玩游戏，一点书都没看的人就是我了。明天看书！看书！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqiip3j20u01hcjw6.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;三天打鱼两天晒网，可能说的就是我写博客的状态没错了。今天是周末，待着一天，上午看电影，下午玩游戏，一点书都没看的人就是我了。明天看书！看书！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqiip3j20u01hcjw6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day36-杂谈</title>
    <link href="http://lmislm.com/2019/02/15/2019-02-15/"/>
    <id>http://lmislm.com/2019/02/15/2019-02-15/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2019-02-16T13:21:05.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天是考研成绩出来的一天。恍恍惚惚，一年前的这个时候我还在过年，恍惚间一年已经过了。早上七点就醒了，不知道这有没有什么关系，但重要的是一年前的这个时候，我一晚上没睡着，结果第二天这个时候，消息并没有那么好。这都是一年前的事情了。谈一谈吧。这两天在做移动端的支付宝支付。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aijcid1j20u01hcwhm.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天是考研成绩出来的一天。恍恍惚惚，一年前的这个时候我还在过年，恍惚间一年已经过了。早上七点就醒了，不知道这有没有什么关系，但重要的是一年前的这个时候，我一晚上没睡着，结果第二天这个时候，消息并没有那么好。这都是一年前的事情了。谈一谈吧。这两天在做移动端的支付宝支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g06aijcid1j20u01hcwhm.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day35-杂谈</title>
    <link href="http://lmislm.com/2019/02/14/2019-02-14/"/>
    <id>http://lmislm.com/2019/02/14/2019-02-14/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2019-02-14T13:50:40.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>发现要是女生和代码一样容易理解就好了，出错的几率也太大了。因为你费劲输入一大堆代码，最后错都不会报，根本不知道会不会运行。<br>衰(′д｀ )…彡…彡<br>有时候有些人你付出，更本就不会有任何反应。世事难料啊。情人节快乐！<br>祝你们原地爆炸！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg" alt=""><br>-end<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;发现要是女生和代码一样容易理解就好了，出错的几率也太大了。因为你费劲输入一大堆代码，最后错都不会报，根本不知道会不会运行。&lt;br&gt;衰(′д｀ )…彡…彡&lt;br&gt;有时候有些人你付出，更本就不会有任何反应。世事难料啊。情人节快乐！&lt;br&gt;祝你们原地爆炸！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;-end&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day34-deepClone</title>
    <link href="http://lmislm.com/2019/02/13/2019-02-13/"/>
    <id>http://lmislm.com/2019/02/13/2019-02-13/</id>
    <published>2019-02-12T16:00:00.000Z</published>
    <updated>2019-02-13T14:07:09.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>探究一下深拷贝，本文主要是浅拷贝、深拷贝的简单实现，并对循环引用就行一些了解。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0555oglhej20u01hcdkz.jpg" alt=""><br><a id="more"></a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  id: <span class="string">'1'</span>,</span><br><span class="line">  segment: &#123;</span><br><span class="line">    hitinfos: &#123;</span><br><span class="line">      <span class="comment">// 浅拷贝时rule为rule: [Object]</span></span><br><span class="line">      rule: &#123;</span><br><span class="line">        a: <span class="string">'no-placeholder'</span>,</span><br><span class="line">        b: <span class="string">'no-tag'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      level: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    atoms: [</span><br><span class="line">      &#123; <span class="attr">tgt</span>: <span class="string">'you dont know'</span>, <span class="attr">src</span>: <span class="string">'你不知道'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">tgt</span>: <span class="string">'what'</span>, <span class="attr">src</span>: <span class="string">'什么'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  arr: [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    arr: <span class="string">'arr1'</span></span><br><span class="line">  &#125;],</span><br><span class="line">  value_1: <span class="literal">undefined</span>,</span><br><span class="line">  value_2: <span class="literal">null</span>,</span><br><span class="line">  value_3: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li>简单的对象浅拷贝（只遍历一层）-拷贝引用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneShadow</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tgt = &#123;&#125;</span><br><span class="line">  <span class="comment">//  为什么不直接用“=”赋值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="comment">// 或者用if (Object.hasOwnProperty(prop)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      tgt[prop] = src[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = cloneShadow(data)</span><br><span class="line">data.id = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>递归对象深拷贝（遍历多层）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 非对象</span></span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; <span class="keyword">typeof</span> src !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line">    <span class="comment">// throw new TypeError('Except Object, got' + (typeof src))</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      <span class="comment">// value为null或者undefined则返回原值(typeof null === 'object')</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">          tgt[prop] = deepClone(src[prop])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test_1 = deepClone(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br></pre></td></tr></table></figure></li></ul><h3 id="拷贝循环引用"><a href="#拷贝循环引用" class="headerlink" title="拷贝循环引用"></a>拷贝循环引用</h3><ul><li>拷贝循环引用（JSON方法抛异常）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCloneCircle</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; src !== <span class="string">'object'</span>) <span class="keyword">return</span> src</span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, tgt)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (src[prop] &amp;&amp; src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        tgt[prop] = deepCloneCircle(src[prop])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = deepCloneCircle(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>[1]. <a href="https://segmentfault.com/a/1190000008637489" target="_blank" rel="noopener">JavaScript中的浅拷贝和深拷贝</a><br>[2]. <a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe" target="_blank" rel="noopener">【进阶4-3期】面试题之如何实现一个深拷贝</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;拷贝&quot;&gt;&lt;a href=&quot;#拷贝&quot; class=&quot;headerlink&quot; title=&quot;拷贝&quot;&gt;&lt;/a&gt;拷贝&lt;/h2&gt;&lt;p&gt;探究一下深拷贝，本文主要是浅拷贝、深拷贝的简单实现，并对循环引用就行一些了解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0555oglhej20u01hcdkz.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day33-css居中</title>
    <link href="http://lmislm.com/2019/02/12/2019-02-12/"/>
    <id>http://lmislm.com/2019/02/12/2019-02-12/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-13T14:04:17.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="居中总结"><a href="#居中总结" class="headerlink" title="居中总结"></a>居中总结</h2><p>经常会碰到一些居中的问题，这里尝试进行一些总结。分为垂直居中和水平居中。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg" alt=""><br><a id="more"></a></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>行内或类行内元素(inline/inline-block/inline-table/flex)：text-align: center;</li><li>块级元素： margin: 0 auto;</li><li><p>多个块级元素：display: inline-block;</p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3></li><li>行内或类行内元素:<ul><li>单行：padding-top与padding-bottom 等值、或line-height与height 等值</li><li>多行：单行padding等值，或display: table-cell 用vertical-align：middle;</li></ul></li><li>块级元素：</li></ol><p>– 待续</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;居中总结&quot;&gt;&lt;a href=&quot;#居中总结&quot; class=&quot;headerlink&quot; title=&quot;居中总结&quot;&gt;&lt;/a&gt;居中总结&lt;/h2&gt;&lt;p&gt;经常会碰到一些居中的问题，这里尝试进行一些总结。分为垂直居中和水平居中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第三十二天2019-02-01</title>
    <link href="http://lmislm.com/2019/02/01/2019-02-01/"/>
    <id>http://lmislm.com/2019/02/01/2019-02-01/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-01T11:21:25.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近又开始关注到Nodejs了，因为在探究js的一些原理的时候，不可避免的会注意到js的一些应用场景的不同，这两天看到了一篇很好的介绍Nodejs入门的文章，<a href="https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7" target="_blank" rel="noopener">【全文】狼叔：如何正确的学习Node.js</a>。看这篇文章还是比较有感触的，文章本身结合自身的体验从Nodejs诞生以来讲到近些年的趋势，当然我觉得最准的还是属于对于React.js和Vue.js的趋势的描述。这篇文章偏向于说教，也是说给初学Nodejs的人所听的，详细的地方在于介绍了一些该看的书本，和一些练习代码的方法，比如学会Nodejs要多看一些NPM包的源码，按作者来说就是一天5个NPM包阅读。这个对我来说感触是非常深的，本人觉得是，只有真正的上手，你才能说是真的开始去掌握这门东西。我觉得文章是真的比较详细，还提供一些资料，也提出了一些问题，比如，“在变化多端的大前端背景之下，该如何精进？”。文章本身可能探讨的比较多，也探讨了，Nodejs在各类编程语言中的比较，比如和java比较的优劣。总得来说，是一篇不可多得的好文。有幸看到这种文章。看来以后还是要多看专门的社区，去浏览一些文章，增长一些见识，拓宽一些视野。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzr55r2l7vj20u0140q8k.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;最近又开始关注到Nodejs了，因为在探究js的一些原理的时候，不可避免的会注意到js的一些应用场景的不同，这两天看到了一篇很好的介绍Nodejs入门的文章，&lt;a href=&quot;https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【全文】狼叔：如何正确的学习Node.js&lt;/a&gt;。看这篇文章还是比较有感触的，文章本身结合自身的体验从Nodejs诞生以来讲到近些年的趋势，当然我觉得最准的还是属于对于React.js和Vue.js的趋势的描述。这篇文章偏向于说教，也是说给初学Nodejs的人所听的，详细的地方在于介绍了一些该看的书本，和一些练习代码的方法，比如学会Nodejs要多看一些NPM包的源码，按作者来说就是一天5个NPM包阅读。这个对我来说感触是非常深的，本人觉得是，只有真正的上手，你才能说是真的开始去掌握这门东西。我觉得文章是真的比较详细，还提供一些资料，也提出了一些问题，比如，“在变化多端的大前端背景之下，该如何精进？”。文章本身可能探讨的比较多，也探讨了，Nodejs在各类编程语言中的比较，比如和java比较的优劣。总得来说，是一篇不可多得的好文。有幸看到这种文章。看来以后还是要多看专门的社区，去浏览一些文章，增长一些见识，拓宽一些视野。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzr55r2l7vj20u0140q8k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第三十一天2019-01-31</title>
    <link href="http://lmislm.com/2019/01/31/2019-01-31/"/>
    <id>http://lmislm.com/2019/01/31/2019-01-31/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetCode"><a href="#leetCode" class="headerlink" title="leetCode"></a>leetCode</h3><p>今天想到了Leetcode的题目，又捡起来做了一道题目。可能比较简单，就当是回忆的题目吧，以后捡起来题目都比较方便。慢慢来吧。坚持下去也好。也不是宁缺毋滥这种借口，是不存在的，还是得每天坚持写点日记，这样以后就能够进行阶段性总结，也可以看以前的东西，希望养成习惯。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b98bxyj20jg0jggml.jpg" alt=""><br><a id="more"></a></p><h3 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* [<span class="number">2</span>] Add Two Numbers</span><br><span class="line">*</span><br><span class="line">* https:<span class="comment">//leetcode.com/problems/add-two-numbers/description/</span></span><br><span class="line">*</span><br><span class="line">* algorithms</span><br><span class="line">* Medium (<span class="number">30.32</span>%)</span><br><span class="line">* Total Accepted:    <span class="number">733.3</span>K</span><br><span class="line">* Total Submissions: <span class="number">2.4</span>M</span><br><span class="line">* Testcase Example:  <span class="string">'[2,4,3]\n[5,6,4]'</span></span><br><span class="line">*</span><br><span class="line">* You are given two non-empty linked lists representing two non-negative</span><br><span class="line">* integers. The digits are stored <span class="keyword">in</span> reverse order and each <span class="keyword">of</span> their nodes</span><br><span class="line">* contain a single digit. Add the two numbers and <span class="keyword">return</span> it <span class="keyword">as</span> a linked list.</span><br><span class="line">* </span><br><span class="line">* You may assume the two numbers <span class="keyword">do</span> not contain any leading zero, except the</span><br><span class="line">* number <span class="number">0</span> itself.</span><br><span class="line">* </span><br><span class="line">* Example:</span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">* Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">* Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">* Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h3 id="题目框架"><a href="#题目框架" class="headerlink" title="题目框架"></a>题目框架</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"> *     <span class="keyword">this</span>.val = val;</span><br><span class="line"> *     <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @<span class="keyword">return</span> &#123;ListNode&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">var addTwoNumbers = function(l1, l2) &#123;</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法一</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> List = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> head = List</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> carray = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span> || sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l1.val</span><br><span class="line">      l1 = l1.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l2.val</span><br><span class="line">      l2 = l2.next</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      carray = <span class="number">1</span></span><br><span class="line">      sum = sum - <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    head.next = <span class="keyword">new</span> ListNode(sum)</span><br><span class="line">    head = head.next</span><br><span class="line">    sum = carray</span><br><span class="line">    carray = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> List.next</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法二</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// let node = null</span></span><br><span class="line">  <span class="comment">// const carray = arguments[2]</span></span><br><span class="line">  <span class="comment">// if (l1 || l2) &#123;</span></span><br><span class="line">  <span class="comment">//   // 加上进位</span></span><br><span class="line">  <span class="comment">//   const val1 = l1 ? l1.val1 : 0</span></span><br><span class="line">  <span class="comment">//   const val2 = l2 ? l2.val2 : 0</span></span><br><span class="line">  <span class="comment">//   const next1 = l1 ? l1.next : null</span></span><br><span class="line">  <span class="comment">//   const next2 = l2 ? l2.next : null</span></span><br><span class="line">  <span class="comment">//   const val = carry ? val1 + val2 + 1 : val1 + val2</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(val % 10)</span></span><br><span class="line">  <span class="comment">//   node.next = addTwoNumbers(next1, next2, val &gt;= 10)</span></span><br><span class="line">  <span class="comment">// &#125; else if (carray) &#123;</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(1)</span></span><br><span class="line">  <span class="comment">//   node.next = null</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return node</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>–end–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetCode&quot;&gt;&lt;a href=&quot;#leetCode&quot; class=&quot;headerlink&quot; title=&quot;leetCode&quot;&gt;&lt;/a&gt;leetCode&lt;/h3&gt;&lt;p&gt;今天想到了Leetcode的题目，又捡起来做了一道题目。可能比较简单，就当是回忆的题目吧，以后捡起来题目都比较方便。慢慢来吧。坚持下去也好。也不是宁缺毋滥这种借口，是不存在的，还是得每天坚持写点日记，这样以后就能够进行阶段性总结，也可以看以前的东西，希望养成习惯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b98bxyj20jg0jggml.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="练习" scheme="http://lmislm.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第三十天2019-01-30</title>
    <link href="http://lmislm.com/2019/01/30/2019-01-30/"/>
    <id>http://lmislm.com/2019/01/30/2019-01-30/</id>
    <published>2019-01-29T16:00:00.000Z</published>
    <updated>2019-02-17T13:46:09.923Z</updated>
    
    <content type="html"><![CDATA[<p>上线很晚啊，今天，有点困。还是早点睡吧，这些天。今天碰到个问题。vm.$attrs传入的不识别横线方式，爷组件传入的不会自动将驼峰转为横线模式。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b945ntj20zk0k0gnj.jpg" alt=""><br>–end–<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上线很晚啊，今天，有点困。还是早点睡吧，这些天。今天碰到个问题。vm.$attrs传入的不识别横线方式，爷组件传入的不会自动将驼峰转为横线模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b945ntj20zk0k0gnj.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十九天2019-01-29</title>
    <link href="http://lmislm.com/2019/01/29/2019-01-29/"/>
    <id>http://lmislm.com/2019/01/29/2019-01-29/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>刚看了下，搁置了四天没写技术文章了，好几篇只有上文，没有下文。这个毛病从写日志体现出来了，说明得改，这还说明了，写日志的好处啊，能够从记录中发现问题。可能这就是今天鸽的理由吧。这几天快接近年末了，又期待，又不期待，真是很纠结。我发现，什么时候都有很多事，看你怎么去对待，永远不会说等到没事的时候。要调整好情绪再说。此处，鸽。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fznt8ja8lbj20u01407wh.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;刚看了下，搁置了四天没写技术文章了，好几篇只有上文，没有下文。这个毛病从写日志体现出来了，说明得改，这还说明了，写日志的好处啊，能够从记录中发现问题。可能这就是今天鸽的理由吧。这几天快接近年末了，又期待，又不期待，真是很纠结。我发现，什么时候都有很多事，看你怎么去对待，永远不会说等到没事的时候。要调整好情绪再说。此处，鸽。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fznt8ja8lbj20u01407wh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十八天2019-01-28</title>
    <link href="http://lmislm.com/2019/01/28/2019-01-28/"/>
    <id>http://lmislm.com/2019/01/28/2019-01-28/</id>
    <published>2019-01-27T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天回来的比较晚，可能事情比较多吧。又想起了以前的事。唉，洗洗早点睡吧。几天就这几句唠唠叨叨的话了。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzmpp0a9fgj20b40b4wi4.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天回来的比较晚，可能事情比较多吧。又想起了以前的事。唉，洗洗早点睡吧。几天就这几句唠唠叨叨的话了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzmpp0a9fgj20b40b4wi4.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十七天2019-01-27</title>
    <link href="http://lmislm.com/2019/01/27/2019-01-27/"/>
    <id>http://lmislm.com/2019/01/27/2019-01-27/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-02-17T13:43:22.754Z</updated>
    
    <content type="html"><![CDATA[<p>今天上午看了一部动漫，B站Lex推荐的。看完之后感叹这两天动漫质量的提高，动漫三观简直不能再正，满满的正能量。这种动漫真是难怪不火。动漫名字叫《超能力少女》但是整个片并不是一部打斗片，而是一部以一位来自异世界超能力少女生活为主线另一位异世界超能力少女为辅，讲述了来到这个世界之后，两个少女面对不同的家庭之间各自的努力和奋斗故事，在女二号身上，看到了满满的正能量，与女一号富有的生活对比，个人感觉女二号的勤奋和人品更像是这部故事讲述的主题。同时，这个故事也对于日本的黑帮进行了一些美化。虽然故事剧情并没有像标题和开头一幕一样热血，但是剧情本身还是非常精彩！这里好像说了绕口令。但就是夸这部动漫吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzlc8bxnrgj20yi22ojyq.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天上午看了一部动漫，B站Lex推荐的。看完之后感叹这两天动漫质量的提高，动漫三观简直不能再正，满满的正能量。这种动漫真是难怪不火。动漫名字叫《超能力少女》但是整个片并不是一部打斗片，而是一部以一位来自异世界超能力少女生活为主线另一位异世界超能力少女为辅，讲述了来到这个世界之后，两个少女面对不同的家庭之间各自的努力和奋斗故事，在女二号身上，看到了满满的正能量，与女一号富有的生活对比，个人感觉女二号的勤奋和人品更像是这部故事讲述的主题。同时，这个故事也对于日本的黑帮进行了一些美化。虽然故事剧情并没有像标题和开头一幕一样热血，但是剧情本身还是非常精彩！这里好像说了绕口令。但就是夸这部动漫吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzlc8bxnrgj20yi22ojyq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十六天2019-01-26</title>
    <link href="http://lmislm.com/2019/01/26/2019-01-26/"/>
    <id>http://lmislm.com/2019/01/26/2019-01-26/</id>
    <published>2019-01-25T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.223Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天公司年会，这是个不写log的好理由，对吧？我也是这么觉得。回到家已经很晚了，晚上11点才到家，就真的不想再写日志了。就这样结束今天的日志环节吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzkehskm6qj205k05kdfw.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天公司年会，这是个不写log的好理由，对吧？我也是这么觉得。回到家已经很晚了，晚上11点才到家，就真的不想再写日志了。就这样结束今天的日志环节吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzkehskm6qj205k05kdfw.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十五天2019-01-25</title>
    <link href="http://lmislm.com/2019/01/25/2019-01-25/"/>
    <id>http://lmislm.com/2019/01/25/2019-01-25/</id>
    <published>2019-01-24T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js-常用数组方法小结-（2）"><a href="#js-常用数组方法小结-（2）" class="headerlink" title="js 常用数组方法小结 （2）"></a>js 常用数组方法小结 （2）</h3><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>有些数组方法会经常用，这里今天就介绍一下reduce()方法和find()方法。</p><h3 id="Array-protytype-reduce"><a href="#Array-protytype-reduce" class="headerlink" title="Array.protytype.reduce()"></a>Array.protytype.reduce()</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>看完一些方法，目前来说，reduce()方法，能实现的比较多，且我之前看到的文章中对其的推崇是比较多的。据说它能做很多事情。昨天看了下MDN上的介绍和几个例子，确实感觉其功能的强大。本文基于MDN上的代码以笔记的形式注释，先对功能做栗子，然后对方法进行一些描述。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzj9hyus3ij20sg0sgh3k.jpg" alt=""></p><a id="more"></a><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><h4 id="一些简单的例子"><a href="#一些简单的例子" class="headerlink" title="一些简单的例子"></a>一些简单的例子</h4><ol><li><p>累加数组中的值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [<span class="number">3</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">34</span>].reduce(<span class="function">(<span class="params">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 58</span></span><br></pre></td></tr></table></figure></li><li><p>累加对象数组中的值？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = [&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;].reduce(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 将键名为x的逐个累加到累加器中</span></span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue.x</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ol><p>initialValue 为初始值，且初始值是必须提供的</p><ol><li>二维数组转为一维数组？<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> flattened =  [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, cval, cidx, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始值为空数组，取出当前下标数组中的值，放入累加器中的空数组，逐个累加</span></span><br><span class="line">  <span class="keyword">return</span> acc.concat(cval)</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(flattened)</span><br></pre></td></tr></table></figure></li></ol><h4 id="一些稍微复杂点的"><a href="#一些稍微复杂点的" class="headerlink" title="一些稍微复杂点的"></a>一些稍微复杂点的</h4><ol><li><p>计算数组中每个元素出现的次数？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">54</span>, <span class="number">21</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> count = arr.reduce(<span class="function">(<span class="params">acc, cval</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 这里要注意是在累加器中去寻找是否存在值</span></span><br><span class="line">  <span class="keyword">if</span> (cval <span class="keyword">in</span> acc) &#123;</span><br><span class="line">   <span class="comment">// 以对象形式赋值，真个reduce过程一次次去遍历</span></span><br><span class="line">    acc[cval]++</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    acc[cval] = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// &#123; '1': 2, '3': 1, '21': 1, '54': 1 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>属性对object分类？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Alice'</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Max'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Jane'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">groupBy</span> (<span class="params">objArr, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objArr.reduce(<span class="function">(<span class="params">acc, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 键名</span></span><br><span class="line">    <span class="keyword">let</span> key = obj[property]</span><br><span class="line">    <span class="comment">// 判断累加器中是否有重复的元素</span></span><br><span class="line">    <span class="keyword">if</span>(!acc[key]) &#123;</span><br><span class="line">      acc[key] = []</span><br><span class="line">    &#125;</span><br><span class="line">    acc[key].push(obj)</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> groupedByPeople = groupBy(people, <span class="string">'age'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(groupedByPeople)</span><br></pre></td></tr></table></figure></li><li><p>使用扩展运算符和initialValue绑定包含在对象数组中的数组<br>简单点说就是取出数组集合中对象中的数组</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> friends = [&#123;</span><br><span class="line">  name: <span class="string">'Anna'</span>,</span><br><span class="line">  books: [<span class="string">'Bible'</span>, <span class="string">'Harry Potter'</span>],</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'Bob'</span>,</span><br><span class="line">  books: [<span class="string">'War and peace'</span>, <span class="string">'Romeo and Juliet'</span>],</span><br><span class="line">  age: <span class="number">26</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  name: <span class="string">'Alice'</span>,</span><br><span class="line">  books: [<span class="string">'The Lord of the Rings'</span>, <span class="string">'The Shining'</span>],</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">// 列出所有包含的书籍</span></span><br><span class="line"><span class="comment">// 题目不容易理解，好好一想，就容易的多，还得对扩展符了解的比较多点就更容易上手</span></span><br><span class="line"><span class="keyword">let</span> containerBook = friends.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [...prev, ...curr.books]</span><br><span class="line">&#125;, [])</span><br><span class="line"><span class="built_in">console</span>.log(containerBook)</span><br></pre></td></tr></table></figure></li></ol><p>然后，鸽了鸽了。先写到这里吧。时间又不够了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.prototype.reduce()</a><br>–end–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js-常用数组方法小结-（2）&quot;&gt;&lt;a href=&quot;#js-常用数组方法小结-（2）&quot; class=&quot;headerlink&quot; title=&quot;js 常用数组方法小结 （2）&quot;&gt;&lt;/a&gt;js 常用数组方法小结 （2）&lt;/h3&gt;&lt;h4 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h4&gt;&lt;p&gt;有些数组方法会经常用，这里今天就介绍一下reduce()方法和find()方法。&lt;/p&gt;
&lt;h3 id=&quot;Array-protytype-reduce&quot;&gt;&lt;a href=&quot;#Array-protytype-reduce&quot; class=&quot;headerlink&quot; title=&quot;Array.protytype.reduce()&quot;&gt;&lt;/a&gt;Array.protytype.reduce()&lt;/h3&gt;&lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;看完一些方法，目前来说，reduce()方法，能实现的比较多，且我之前看到的文章中对其的推崇是比较多的。据说它能做很多事情。昨天看了下MDN上的介绍和几个例子，确实感觉其功能的强大。本文基于MDN上的代码以笔记的形式注释，先对功能做栗子，然后对方法进行一些描述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzj9hyus3ij20sg0sgh3k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第二十四天2019-01-24</title>
    <link href="http://lmislm.com/2019/01/24/2019-01-24/"/>
    <id>http://lmislm.com/2019/01/24/2019-01-24/</id>
    <published>2019-01-23T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天一天写代码有点不在状态，可能是最近有点不太对，不是疲累也可能是心事又多了起来。原本计划今天继续上文或者上上文的。现在看来真的只能是搁了。<br>最近图片可能会风格比较和以前不一样。这是问人要的哈。嘿嘿。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzi1pivvmhj20i40i53zr.jpg" alt=""><br>–end–<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天一天写代码有点不在状态，可能是最近有点不太对，不是疲累也可能是心事又多了起来。原本计划今天继续上文或者上上文的。现在看来真的只能是搁了。&lt;br&gt;最近图片可能会风格比较和以前不一样。这是问人要的哈。嘿嘿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzi1pivvmhj20i40i53zr.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十三天2019-01-23</title>
    <link href="http://lmislm.com/2019/01/23/2019-01-23/"/>
    <id>http://lmislm.com/2019/01/23/2019-01-23/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js-常用数组方法小结"><a href="#js-常用数组方法小结" class="headerlink" title="js 常用数组方法小结"></a>js 常用数组方法小结</h3><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>今天这个数组对象操作写的有点多啊，特此来小结一下，一些常用的方法的基本操作。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzgxeniqluj20k00arjrt.jpg" alt=""><br><a id="more"></a></p><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h3><h4 id="表格过滤用的比较多"><a href="#表格过滤用的比较多" class="headerlink" title="表格过滤用的比较多"></a>表格过滤用的比较多</h4><p>大概用法就是过滤数组或者数组集合中一些不符合条件的数组元素和集合。也可以用来过滤数组中一些undefined和null。<br>例子：<sup>[1]</sup><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grapes&apos;, &apos;mango&apos;, &apos;orange&apos;];</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Array filters items based on search criteria (query)</span><br><span class="line"> */</span><br><span class="line">const filterItems = (query) =&gt; &#123;</span><br><span class="line">  return fruits.filter((el) =&gt;</span><br><span class="line">  // 过滤的条件</span><br><span class="line">    el.toLowerCase().indexOf(query.toLowerCase()) &gt; -1</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">// 根据条件过滤之后的数组</span><br><span class="line">console.log(filterItems(&apos;ap&apos;)); // [&apos;apple&apos;, &apos;grapes&apos;]</span><br><span class="line">console.log(filterItems(&apos;an&apos;)); // [&apos;banana&apos;, &apos;mango&apos;, &apos;orange&apos;]</span><br></pre></td></tr></table></figure></p><h4 id="过滤数组中空值"><a href="#过滤数组中空值" class="headerlink" title="过滤数组中空值"></a>过滤数组中空值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let newArray = oldArray.filter(s =&gt; s.value != null)</span><br></pre></td></tr></table></figure><h4 id="filter-的实现"><a href="#filter-的实现" class="headerlink" title="filter() 的实现"></a>filter() 的实现</h4><ul><li>利用for循环以及push构造数组<sup>[1]</sup><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Polyfill Array.prototype.filter()</span><br><span class="line">function newFilter() &#123;</span><br><span class="line">  if (!Array.prototype.newFilter) &#123;</span><br><span class="line">    // 可以带thisArg</span><br><span class="line">    Array.prototype.newFilter = (fun /* , thisArg*/) =&gt; &#123;</span><br><span class="line">      // void(0)（等同于void 0） 差不多等于 undefined</span><br><span class="line">      if (this === void 0 || this === null) &#123;</span><br><span class="line">        throw new TypeError()</span><br><span class="line">      &#125;</span><br><span class="line">      // Object构造函数为给定值创建一个对象包装器</span><br><span class="line">      let t = Object(this)</span><br><span class="line">      // 所有非数值转换成0, 所有大于等于 0 等数取整数部分</span><br><span class="line">      // Shifts a in binary representation b (&lt; 32) bits to the right, discarding bits shifted off, and shifting in 0s from the left.</span><br><span class="line">      let len = t.length &gt;&gt;&gt; 0</span><br><span class="line">      if (typeof fun !== &apos;function&apos;) &#123;</span><br><span class="line">        throw new TypeError()</span><br><span class="line">      &#125;</span><br><span class="line">      let res = []</span><br><span class="line">      // arguments对象不是一个 Array 。它类似于Array，但除了length属性和索引元素之外没有任何Array属性</span><br><span class="line">      // 没有 pop 方法。但是它可以被转换为一个真正的Array：args = Array.from(arguments)</span><br><span class="line">      // 所以这个地方用arguments可能有错？</span><br><span class="line">      let thisArg = arguments.length &gt;= 2 ? arguments[1] : void 0</span><br><span class="line">      // t = Object(this)</span><br><span class="line">      for (let i = 0; i&lt; len; i++) &#123;</span><br><span class="line">        // prop in object, 检查object（或其原型链）是否包含具有指定名称的属性的对象</span><br><span class="line">        if (i in t) &#123;</span><br><span class="line">          let val = t[i]</span><br><span class="line">          // NOTE: Technically this should Object.defineProperty at</span><br><span class="line">          //       the next index, as push can be affected by</span><br><span class="line">          //       properties on Object.prototype and Array.prototype.</span><br><span class="line">          //       But that method&apos;s new, and collisions should be</span><br><span class="line">          //       rare, so use the more-compatible alternative.</span><br><span class="line">          // 满足filter中的条件的话就push进数组res,filter回调函数的三个参数：元素值，元素索引，原数组</span><br><span class="line">          // thisArg: 当前在数组中处理的元素</span><br><span class="line">          // val: 正在处理元素在数组中的索引</span><br><span class="line">          if (fun.call(thisArg, val, i, t))</span><br><span class="line">            res.push(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h3><p>鸽到下期再讲吧，好像我已经鸽了很多东西了。额。<br>–end–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;js-常用数组方法小结&quot;&gt;&lt;a href=&quot;#js-常用数组方法小结&quot; class=&quot;headerlink&quot; title=&quot;js 常用数组方法小结&quot;&gt;&lt;/a&gt;js 常用数组方法小结&lt;/h3&gt;&lt;h4 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h4&gt;&lt;p&gt;今天这个数组对象操作写的有点多啊，特此来小结一下，一些常用的方法的基本操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzgxeniqluj20k00arjrt.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第二十二天2019-01-22</title>
    <link href="http://lmislm.com/2019/01/22/2019-01-22/"/>
    <id>http://lmislm.com/2019/01/22/2019-01-22/</id>
    <published>2019-01-21T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.498Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组件通信-祖孙"><a href="#组件通信-祖孙" class="headerlink" title="组件通信-祖孙"></a>组件通信-祖孙</h3><p>本文将结合例子，简单讲解下vuejs文档中的实例属性：<strong>vm.$attrs</strong>和<strong>vm.$listeners</strong>。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzfr1n65maj20b40b4dfn.jpg" alt=""><a id="more"></a></p><h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>因为项目中大多用Vuex来通信，但是用多了之后感觉简单的组件之间的通信再用构造vuex的mutation，写起来比较费，当然父子之间的通信肯定是用emit更实在。</p><h3 id="写个“栗子”"><a href="#写个“栗子”" class="headerlink" title="写个“栗子”"></a>写个“栗子”</h3><ul><li>三个组件：grandfather &gt; father &gt; son<h4 id="祖宗组件"><a href="#祖宗组件" class="headerlink" title="祖宗组件"></a>祖宗组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;grandfather&apos;, &#123;</span><br><span class="line">props: [],</span><br><span class="line">template:</span><br><span class="line">`&lt;div&gt;</span><br><span class="line">  &lt;father</span><br><span class="line">:getGrandsonData=&quot;grandfatherData&quot; // 传值</span><br><span class="line">@getGrandsonEvent=&quot;grandfatherEvent&quot; // 事件</span><br><span class="line">&gt;&lt;/father&gt; </span><br><span class="line">&lt;/div&gt; `</span><br><span class="line">data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      grandfatherData: &quot;hello, i&apos;m your grandfather&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">grandfatherEvent (val) &#123;</span><br><span class="line">// 这里接到了“hello, i&apos;m your grandson”</span><br><span class="line">console.log(val) // hello, i&apos;m your grandson</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="父亲组件"><a href="#父亲组件" class="headerlink" title="父亲组件"></a>父亲组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;father&apos;, &#123;</span><br><span class="line">props: [], // 注意这里props不需要再父组件声明</span><br><span class="line">template:\`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;grandson</span><br><span class="line">v-bind=&quot;$attrs&quot;</span><br><span class="line">v-on=&quot;$listeners&quot;</span><br><span class="line">&gt;&lt;/grandson&gt;  \`</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="孙子组件"><a href="#孙子组件" class="headerlink" title="孙子组件"></a>孙子组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;grandson&apos;, &#123;</span><br><span class="line">props: [],</span><br><span class="line">template:`</span><br><span class="line">  &lt;input</span><br><span class="line">  type=&quot;text&quot;</span><br><span class="line">  v-model=&quot;grandsonMsgToGrandfather&quot;</span><br><span class="line">@input=&quot;sendToGrandfatherEvent&quot;</span><br><span class="line">&gt;&#123;&#123;$attrs.grandfatherData&#125;&#125;&lt;/div&gt; `</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">  grandsonMsgToGrandfather: &quot;hello, i&apos;m your grandson&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">method: &#123;</span><br><span class="line">sendToGrandfatherEvent () &#123;</span><br><span class="line">this.$emit(&apos;getGrandsonEvent&apos;, sonMsgToGrandfather )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：这里的代码并没有验证过,只是大概写个简单的demo</p><h3 id="上文档"><a href="#上文档" class="headerlink" title="上文档"></a>上文档</h3><h4 id="vm-attrs"><a href="#vm-attrs" class="headerlink" title="vm.$attrs"></a>vm.$attrs</h4><blockquote><p><strong>vm.$attrs</strong><br><strong>类型：</strong><code>{ [key: string]: string }</code><br><strong>只读</strong><br><strong>详细：</strong><br>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p></blockquote><h4 id="vm-listeners"><a href="#vm-listeners" class="headerlink" title="vm.$listeners"></a>vm.$listeners</h4><blockquote><p><strong>vm.$listeners</strong><br><strong>类型：</strong><code>{ [key: string]: Function | Array&lt;Function&gt; }</code><br><strong>只读</strong><br><strong>详细：</strong><br>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://cn.vuejs.org/v2/api/#vm-attrs" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-attrs</a> 、<a href="https://cn.vuejs.org/v2/api/#vm-listeners" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#vm-listeners</a><br>[2]. <a href="https://blog.csdn.net/qq_39009348/article/details/81977468" target="_blank" rel="noopener">vue的通信方式（二）—祖父孙三个级别的之间的隔代通信</a></p><p>  —end—</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;组件通信-祖孙&quot;&gt;&lt;a href=&quot;#组件通信-祖孙&quot; class=&quot;headerlink&quot; title=&quot;组件通信-祖孙&quot;&gt;&lt;/a&gt;组件通信-祖孙&lt;/h3&gt;&lt;p&gt;本文将结合例子，简单讲解下vuejs文档中的实例属性：&lt;strong&gt;vm.$attrs&lt;/strong&gt;和&lt;strong&gt;vm.$listeners&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzfr1n65maj20b40b4dfn.jpg&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第二十一天2019-01-21</title>
    <link href="http://lmislm.com/2019/01/21/2019-01-21/"/>
    <id>http://lmislm.com/2019/01/21/2019-01-21/</id>
    <published>2019-01-20T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天又重温了一小下（事件循环）Event Loop，如何去区分MicroTask（微任务）,MacroTask（宏任务），说实话我还没有非常精确的去理解到位，做顺序题目，也会做错，理解的不充分不到位。去看了下MDN<sup><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">1</a></sup>,发现并没有解释的很详细，除了解释Nodejs中和浏览器中的EventLoop有点不同，其他简短的语言倒像是解释<code>setTimeout()</code>是“非等待一定时间之后执行”这一概念。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzelyzwwi1j20hk0b2n27.jpg" alt=""><br><a id="more"></a></p><h3 id="Event-Loop-上"><a href="#Event-Loop-上" class="headerlink" title="Event Loop - 上"></a>Event Loop - 上</h3><p>下面来稍微再温习下这个东西。承上启下，为<code>Promise()</code>的深入理解做更好的准备。</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>JavaScript这种并发模型基于“事件循环” ，是单线程的，不像是C语言任何位置被终止，它是异步而不阻塞主进程执行。Event Loop起到很重要的作用， JavaScript处理 I/O 通常通过事件和回调来执行。<br>本文简单的入门一下Event Loop这个东西，大概有个映像就行。</p><h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>js引擎的两种任务</p><ul><li>MacroTask: <strong>setTimeout</strong>, <strong>setInterval</strong>, <strong>setImmediate</strong>,<strong>I/O</strong>, <strong>UI rendering</strong></li><li>MicroTask: <strong>Promise</strong>, <strong>process.nextTick</strong>, <strong>Object.observe</strong>, <strong>MutationObserver</strong>, <strong>MutaionObserver</strong><h4 id="调度机制"><a href="#调度机制" class="headerlink" title="调度机制"></a>调度机制</h4>不同的任务行为并不一样，执行的先后顺序不一样。具体怎么个不一样，这里拿个例子<sup><a href="https://imweb.io/topic/5b148768d4c96b9b1b4c4ea1" target="_blank" rel="noopener">2</a></sup>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(4);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">var promise = new Promise(function executor(resolve) &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">  for (var i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">    i == 9999 &amp;&amp; resolve();</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">  console.log(5);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure></li></ul><p>Nodejs输出： 1 2 3 5 4<br>浏览器输出：1 2 3 5 undefined 4<br>注：这里不讨论Nodejs和浏览器的异同</p><h4 id="MicroTask-和-Macro-Task的执行顺序-描述"><a href="#MicroTask-和-Macro-Task的执行顺序-描述" class="headerlink" title="MicroTask 和 Macro Task的执行顺序 - 描述"></a>MicroTask 和 Macro Task的执行顺序 - 描述</h4><ol><li>Event Loop 开始</li><li>MicroTasks 队列开始执行至结束</li><li>检查MacroTask 队列是否有待执行，有则跳到4，无则跳到6</li><li>MacroTask队列“抽取”一个任务，执行至结束</li><li>检查MicroTasks 是否执行完毕，若有则跳到2，无则跳到3</li><li>结束Event Loop</li></ol><p><strong>以上整个过程就是Event Loop（事件循环）。</strong></p><p>这里有个疑问，就是5为什么还要检查是否执行完毕，因为2已经检查过了，是什么事件遗留到了5？</p><h4 id="MicroTask-和-Macro-Task的执行顺序-图文"><a href="#MicroTask-和-Macro-Task的执行顺序-图文" class="headerlink" title="MicroTask 和 Macro Task的执行顺序 - 图文"></a>MicroTask 和 Macro Task的执行顺序 - 图文</h4><p>一张图来解释下<sup><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">3</a></sup>（这张图是引用的，可能需要重画下，可能加上Event table会更好点）。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzellunmyaj20ux0q8472.jpg" alt=""></p><h4 id="图怎么理解呢"><a href="#图怎么理解呢" class="headerlink" title="图怎么理解呢?"></a>图怎么理解呢?</h4><p>宏任务作为入口的话，setTimeout不是第一个执行？是这么个解释的，拿调度机制中的代码说事。<br>先把两种任务再放一遍。</p><blockquote><p>MacroTask: <strong>setTimeout</strong>, <strong>setInterval</strong>, <strong>setImmediate</strong>,<strong>I/O</strong>, <strong>UI rendering</strong><br>MicroTask: <strong>Promise</strong>, <strong>process.nextTick</strong>, <strong>Object.observe</strong>, <strong>MutationObserver</strong>, <strong>MutaionObserver</strong></p><ol><li><strong>整段代码作为宏任务</strong>进入主线程。</li><li>遇到setTimeout(), 回调函数注册后分发到宏任务Event Queue。// 回调函数注册？</li><li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。// 立即执行？</li><li>遇到console.log()，立即执行。</li><li>整段代码作为一次宏任务执行结束，进入微任务判断。Event Queue里有then函数，执行。</li><li>第二轮循环，开始新的宏任务。从宏任务Event Queue中去检查。发现setTimeout回调函数，立即执行。</li></ol></blockquote><p>到这里如果还不懂的话，可以到参考资料的<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">3</a>去看看，写的比较详细，我这里只是笔记形式简单总结下。</p><h4 id="Promise-和-process-nextTick-的先后顺序？-后续"><a href="#Promise-和-process-nextTick-的先后顺序？-后续" class="headerlink" title="Promise 和 process.nextTick() 的先后顺序？- 后续"></a>Promise 和 process.nextTick() 的先后顺序？- 后续</h4><p>这里就放到下一篇Event Loop再说吧。<br>– end –</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环</a><br>[2]. <a href="https://imweb.io/topic/5b148768d4c96b9b1b4c4ea1" target="_blank" rel="noopener">理解event loop（浏览器环境与nodejs环境）</a><br>[3]. <a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天又重温了一小下（事件循环）Event Loop，如何去区分MicroTask（微任务）,MacroTask（宏任务），说实话我还没有非常精确的去理解到位，做顺序题目，也会做错，理解的不充分不到位。去看了下MDN&lt;sup&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;,发现并没有解释的很详细，除了解释Nodejs中和浏览器中的EventLoop有点不同，其他简短的语言倒像是解释&lt;code&gt;setTimeout()&lt;/code&gt;是“非等待一定时间之后执行”这一概念。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzelyzwwi1j20hk0b2n27.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第二十天2019-01-20</title>
    <link href="http://lmislm.com/2019/01/20/2019-01-20/"/>
    <id>http://lmislm.com/2019/01/20/2019-01-20/</id>
    <published>2019-01-19T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天下午就光玩游戏了~感觉需要放空自己啊，这是个玩游戏的好借口。但确实，今天下午看了一会儿电影，上午下午中间节点看完了《楚门的世界》（《The Truman Show》)。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzdce2a0h5j20ko0e9q61.jpg" alt=""><br><a id="more"></a><br>这个电影，在高中的时候就很受它影响，我指的影响，大概是你看完一部电影之后，很长时间都会去回味这部电影的味道，这部电影的含义。九九八十一难，最后的一个“释然”的态度？</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzdc9wydm5j20t00jknfv.jpg" alt=""><br>再然后看了《天气预报员》？这是部慢热的剧情，感觉还是没有看下去的劲头，挖个坑吧，改天再看。然后尝试看了部石原里美日剧，嗯，看了一部分就看不下去了。然后接着就游戏了。本来想LOL的，结果愣是没有劲头，开了一局游戏都退了，看来游戏真的是没什么好玩的。然后，玩CSGO，感觉还是比较考验临场发挥的，碰到敌我实力不相上下的时候，整个人的荷尔蒙就都上来了，感觉还是对于放空自己比较有效果的。一直玩到了，晚上8点啊。你可是也有一堆事情要做的啊，怎么玩起游戏来了。说不玩游戏的，真香。</p><p>–end–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天下午就光玩游戏了~感觉需要放空自己啊，这是个玩游戏的好借口。但确实，今天下午看了一会儿电影，上午下午中间节点看完了《楚门的世界》（《The Truman Show》)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzdce2a0h5j20ko0e9q61.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第十九天2019-01-19</title>
    <link href="http://lmislm.com/2019/01/19/2019-01-19/"/>
    <id>http://lmislm.com/2019/01/19/2019-01-19/</id>
    <published>2019-01-18T16:00:00.000Z</published>
    <updated>2019-01-31T14:07:54.488Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天碰到一个需求，就是在element-ui表格中，列表操作这一列有下载和删除按钮，需要点击某一行的下载按钮，该行下载按钮显示正在下载的loading状态。这个看了下，应该只能是通过在<code>scope.row</code>对象中加属性，比如：<code>isDownloading</code>。这个就要求新属性<code>isDownloading</code>，能够具有响应式特性。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzc6japr32j20u00u00wg.jpg" alt=""><br><a id="more"></a></p><h3 id="深入响应式原理"><a href="#深入响应式原理" class="headerlink" title="深入响应式原理"></a>深入响应式原理</h3><ul><li>追踪变化<br>下面这张图，是基于Object.defineProperty 实现响应式的关键。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzc67hrsguj20xc0kuq38.jpg" alt=""></li></ul><p>不巧的是，<strong>受现代 JavaScript 的限制 (而且 Object.observe 也已经被废弃)，Vue 不能检测到对象属性的添加或删除。</strong><sup>[1]</sup></p><blockquote><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：<sup>[1]</sup></p><ul><li>添加响应式属性<br>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象</li><li>一个已有对象添加多个属性<br>// 代替 <code>Object.assign(this.someObject, { a: 1, b: 2 })</code><br>this.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })</li></ul></blockquote><h3 id="vuejs-提供的Api"><a href="#vuejs-提供的Api" class="headerlink" title="vuejs 提供的Api"></a>vuejs 提供的Api</h3><blockquote><p>Vue.set( target, key, value )<br><strong>参数：</strong></p><p>{Object | Array} target<br>{string | number} key<br>{any} value<br><strong>返回值：</strong> 设置的值。<br><strong>用法：</strong> 向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新属性，因为 Vue 无法探测普通的新增属性 (比如 this.myObject.newProperty = ‘hi’)<br>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p></blockquote><p>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>实践了一下，响应式的对象。在拉取list的forEach里新增一个响应式属性，<code>this.$set(this.list, &#39;isDownloading&#39;, false)</code>。然后就可以在操作前置true,操作后false。在列表的地方就可以用响应式的<code>isDownloading</code>属性了！</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96</a><br>[2]. <a href="https://cn.vuejs.org/v2/api/#Vue-set" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#Vue-set</a><br>——————————————————-end———————————————————–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天碰到一个需求，就是在element-ui表格中，列表操作这一列有下载和删除按钮，需要点击某一行的下载按钮，该行下载按钮显示正在下载的loading状态。这个看了下，应该只能是通过在&lt;code&gt;scope.row&lt;/code&gt;对象中加属性，比如：&lt;code&gt;isDownloading&lt;/code&gt;。这个就要求新属性&lt;code&gt;isDownloading&lt;/code&gt;，能够具有响应式特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzc6japr32j20u00u00wg.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
