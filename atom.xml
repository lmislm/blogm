<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>“   故不积跬步，无以至千里；不积小流，无以成江海。  -  荀子《劝学篇》”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.booml.cn/"/>
  <updated>2019-01-04T15:52:25.376Z</updated>
  <id>http://blog.booml.cn/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第四天 2019-01-04</title>
    <link href="http://blog.booml.cn/2019/01/04/2019-01-04/"/>
    <id>http://blog.booml.cn/2019/01/04/2019-01-04/</id>
    <published>2019-01-03T16:00:00.000Z</published>
    <updated>2019-01-04T15:52:25.376Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h5><p>以为项目会今天上线，结果，一天提了50-60个样式问题。虽然问题都很简单，但是真的是找的要命啊！下面讲讲今天这些问题的来源，讲八卦。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuz4phl2hj20go0godg5.jpg" alt=""></p><a id="more"></a><h4 id="放图"><a href="#放图" class="headerlink" title="放图"></a>放图</h4><p>看到这奖状没？够专业了吧？</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo4h4zhj20ma0grtov.jpg" alt=""></p><p>你以为就只有奖状？！<strong>错</strong>，还有实在的<strong>礼品</strong>！<br>第三名和第二名！如图：</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo489j1j208a08dgrj.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyuyo3w6wvj208d08bq75.jpg" alt=""><br><strong>真是非常辛苦产品小姐姐了！</strong>然而，我下班还当着产品的面，抱怨加需求。也是非常可以的了。<br>第一名有两位！奖励手机壳！<br>本来想聊一聊今天看的一篇，如何优化代码的文章！明天还要早起，算了吧。聊点八卦。<br>–end</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一天&quot;&gt;&lt;a href=&quot;#一天&quot; class=&quot;headerlink&quot; title=&quot;一天&quot;&gt;&lt;/a&gt;一天&lt;/h5&gt;&lt;p&gt;以为项目会今天上线，结果，一天提了50-60个样式问题。虽然问题都很简单，但是真的是找的要命啊！下面讲讲今天这些问题的来源，讲八卦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fyuz4phl2hj20go0godg5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第三天2019-01-03</title>
    <link href="http://blog.booml.cn/2019/01/03/2019-01-03/"/>
    <id>http://blog.booml.cn/2019/01/03/2019-01-03/</id>
    <published>2019-01-02T16:00:00.000Z</published>
    <updated>2019-01-04T15:33:23.054Z</updated>
    
    <content type="html"><![CDATA[<h4 id="忙碌的一天"><a href="#忙碌的一天" class="headerlink" title="忙碌的一天"></a>忙碌的一天</h4><p>啊！国际化终于要上线了。总是改文案改样式，我都快改死了。这个译文的调整真不是改的。细化到空格，逗号，括号。<br>今天眼睛又是眯着回来的。不知道怎么了，是眼睛困了，会进行自我保护?所以眼睛会眯着？<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyts90gsxyj20k10k3gm4.jpg" alt=""><br>今天又看了原型和原型链的一片文章，发现真是永远也讲不完，<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```prototype```, 这种&quot;面向关联&quot;的模式真的是比较奇怪但是有中用。</span><br><span class="line">**列一下几个重要的等式吧。**</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">// 函数的构造器是Function</span><br><span class="line">Object.__proto__  === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// 函数字面量的__proto__ 指向Function</span><br><span class="line">(function () &#123;&#125;).__proto__ === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// 对象字面量</span><br><span class="line">(&#123;&#125;).__proto__  === Object.prototype // true</span><br><span class="line"></span><br><span class="line">// Object函数原型的__proto__指向 null</span><br><span class="line">Object.prototype.__proto__ === null</span><br><span class="line"></span><br><span class="line">// Function 函数的__proto__ 指向自身prototype</span><br><span class="line">Function.__proto__ === Function.prototype // true</span><br><span class="line"></span><br><span class="line">// Function的prototype是一个对象，所以Function.prototype.__proto__指向Object.prototype</span><br><span class="line">Function.prototype.__proto__ === Object.prototype // true</span><br></pre></td></tr></table></figure></p><h3 id="放图！"><a href="#放图！" class="headerlink" title="放图！"></a>放图！</h3><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fytrfhpdmwj20eg0gamxv.jpg" alt=""></p><h5 id="图说明"><a href="#图说明" class="headerlink" title="图说明"></a>图说明</h5><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fytrxmsbzsj20eg0gbq6u.jpg" alt=""></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li><p>对象有属性<code>__proto__</code>(又可以称为隐式原型),指向该对象的构造函数的原型对象</p></li><li><p>方法(Function)除了有属性<code>__proto__</code>,还有属性<code>prototype</code>指向该方法的原型对象（包含所有实例共享的属性和方法叫做原型对象），原型对象也有属性<code>constructor</code>指回原构造函数。</p></li><li><p>先有Object.prototype（原型链顶端），Function.prototype继承Object.prototype而产生，最后，Function和Object和其它构造函数继承Function.prototype而产生</p></li></ol><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>今天就到这吧，这是个很好的开端！！</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><code>[1]</code> <a href="https://www.zhihu.com/question/34183746" target="_blank" rel="noopener">js中<strong>proto</strong>和prototype的区别和关系？</a><br><code>[2]</code> <a href="https://juejin.im/post/5c2c211e6fb9a049a62caf30" target="_blank" rel="noopener">JavaScript原型与继承的秘密</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;忙碌的一天&quot;&gt;&lt;a href=&quot;#忙碌的一天&quot; class=&quot;headerlink&quot; title=&quot;忙碌的一天&quot;&gt;&lt;/a&gt;忙碌的一天&lt;/h4&gt;&lt;p&gt;啊！国际化终于要上线了。总是改文案改样式，我都快改死了。这个译文的调整真不是改的。细化到空格，逗号，括号。&lt;br&gt;今
      
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二天2019-01-02</title>
    <link href="http://blog.booml.cn/2019/01/02/2019-01-02/"/>
    <id>http://blog.booml.cn/2019/01/02/2019-01-02/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-01-02T14:44:31.730Z</updated>
    
    <content type="html"><![CDATA[<h4 id="谈一天感受"><a href="#谈一天感受" class="headerlink" title="谈一天感受"></a>谈一天感受</h4><p>今天早上起来，发现这几天真的好冷啊。真是降温到极点了。扫兴的是，居然还牙疼，都怪假期三天吃的太多了，这智齿问题又出来了，哪天找个机会真的把它给拔了！<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fysmf2k2xqj20k30k574t.jpg" alt=""><br><a id="more"></a><br>今天转了一篇微信文章，要集赞然后获取《经济学人》98年到18年的文章。真是幸运，前几天还念叨着，要想办法拿下经济学人的文章合集就好。真是运气啊，今天就有机会获得了。新年开始，运气都这么好的吗？<br>今天把推荐码和红包都写好了，不容易啊，断断续续一个星期，中间还惨杂这user-server的URL修改，实际工作时间真的就是三四天。剩下的还有后台管理的一小部分。其中掺杂着一些YiCAT的国际化，国际化你可快点上线吧，天天各种细节，译文修改，真是琐碎的很。还特别占时间。完全是体力活，原谅我再一次吐槽这个译文的修改。从第一次拿到译文，到现在为止，我已经数不清，改了多少次译文了。真想写个接口。让他们自己去修改。省得自己天天改译文文案。吐槽就到这里吧。<br>这些天不知道眼睛怎么了，总是表现出很困的感觉，一直不自觉眯着眼睛。可能是没有早睡的原因。真是佩服公司同事，每天熬夜到一两点，精神气还十足。<br>– end</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;谈一天感受&quot;&gt;&lt;a href=&quot;#谈一天感受&quot; class=&quot;headerlink&quot; title=&quot;谈一天感受&quot;&gt;&lt;/a&gt;谈一天感受&lt;/h4&gt;&lt;p&gt;今天早上起来，发现这几天真的好冷啊。真是降温到极点了。扫兴的是，居然还牙疼，都怪假期三天吃的太多了，这智齿问题又出来了，哪天找个机会真的把它给拔了！&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fysmf2k2xqj20k30k574t.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>新年第一天-2019-01-01</title>
    <link href="http://blog.booml.cn/2019/01/01/2019-01-01/"/>
    <id>http://blog.booml.cn/2019/01/01/2019-01-01/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-01-01T12:35:04.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h3><p>以下内容都是一些碎碎念，生活、读后感、今天生活内容。<br>ps: 附上我的“专业插画师”提供的图片。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyrcswupyxj20jg0jggmk.jpg" alt=""><br><a id="more"></a></p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>新年第一天，昨晚在群里抢红包，一直热闹到很晚才睡。今早10点才慵懒的起来，起的有点晚。中午炸鸡腿，惨不忍睹。后来玩游戏，庸庸碌碌的一天就过去了。这是假期最后一天。希望晚上的时候能收收心看点书。顺带一提昨天晚上看了组件详解。</p><h4 id="读Vue-组件基础之组件通信-《Vue-js实战》"><a href="#读Vue-组件基础之组件通信-《Vue-js实战》" class="headerlink" title="读Vue 组件基础之组件通信 -《Vue js实战》"></a>读Vue 组件基础之组件通信 -《Vue js实战》</h4><h5 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h5><p>组件的复用，复用离不开值得传递。父子组件，兄弟组件相互之间的传值。基本的有<code>props</code>，父组件传递给子组件，子组件通过<code>$emit()</code>、<code>v-on:</code> 来将值通知父组件。不太常用的有<code>$parent</code>(书中提到可以通过此通信访问父实例或组件），在组件中引用父组件，<code>$child</code>,父组件引用子组件。《Vue js实战》书中提到了，通过利用实例化一个空的<code>BUS</code>组件起到<code>总线</code>的作用，这种方法还挺新鲜。另外，组件通信时还有slot的内容分发，slot默认名称是可以和具名slot一起用的。相互之间并不影响。好吧，之前用的时候，总是会不自觉给slot取名字。理解的不够深刻。</p><h5 id="高级组件"><a href="#高级组件" class="headerlink" title="高级组件"></a>高级组件</h5><ol><li>组件可以递归自己。</li><li>异步组件。</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>总感觉这种组件通信方式还有待于改善，应该多读一下开源的一些组件是怎么写出来的。因为上次研究element-UI的时候并没有看它运用这些（指的是通信手段，也可能是我忽略？）但是表现出了很强的可扩展性。很值得学习。包括其中CSS中的书写。</p><h5 id="插播"><a href="#插播" class="headerlink" title="插播"></a>插播</h5><p>元旦放假头一天，买了100的零食，一个大箱子，有优惠。现在好像吃的牙有点疼。作啊。明明要减肥的人。</p><h5 id="发现好的视频"><a href="#发现好的视频" class="headerlink" title="发现好的视频"></a>发现好的视频</h5><p>今天看B站排行榜的时候发现一个点评动漫的UP主，LexBurner?“艺名”：蕾丝。他的视频看动漫的角度还真是蛮特别，应该是有大量的漫画番剧的基础，能有空看这么多视频和漫画，这人真是不简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;友情提示&quot;&gt;&lt;a href=&quot;#友情提示&quot; class=&quot;headerlink&quot; title=&quot;友情提示&quot;&gt;&lt;/a&gt;友情提示&lt;/h3&gt;&lt;p&gt;以下内容都是一些碎碎念，生活、读后感、今天生活内容。&lt;br&gt;ps: 附上我的“专业插画师”提供的图片。&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fyrcswupyxj20jg0jggmk.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>2018年最后一天</title>
    <link href="http://blog.booml.cn/2018/12/31/2018-%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
    <id>http://blog.booml.cn/2018/12/31/2018-最后一天/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2018-12-31T01:47:06.004Z</updated>
    
    <content type="html"><![CDATA[<p>2018年就要拜拜了。<br>早上9点起来的也不算太晚。折腾了一会儿博客样式之（发现是又拍云开启浏览器缓存的锅）。<br>今天打算看一些书度过。额，还是先玩会儿游戏放空下？不然感觉不太想看书。<br><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fypoomy5vaj20qq0cr0ub.jpg" alt=""><br>放张图片吧，可能就是需要这样来自嘲。<br>– end<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年就要拜拜了。&lt;br&gt;早上9点起来的也不算太晚。折腾了一会儿博客样式之（发现是又拍云开启浏览器缓存的锅）。&lt;br&gt;今天打算看一些书度过。额，还是先玩会儿游戏放空下？不然感觉不太想看书。&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fypoomy5vaj20qq0cr0ub.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;放张图片吧，可能就是需要这样来自嘲。&lt;br&gt;– end&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>markdown-trick</title>
    <link href="http://blog.booml.cn/2018/12/30/markdown-trick/"/>
    <id>http://blog.booml.cn/2018/12/30/markdown-trick/</id>
    <published>2018-12-30T11:20:04.493Z</published>
    <updated>2018-12-30T11:20:04.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode-snippets"><a href="#vscode-snippets" class="headerlink" title="vscode snippets"></a>vscode snippets</h2><blockquote><p>以设置 markdown 代码片段为例</p></blockquote><a id="more"></a><h4 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">开启设置</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 设置</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"[markdown]":  &#123;</span><br><span class="line">    "editor.quickSuggestions": true</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">设置模板</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 用户代码片段 &gt; markdown.json</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"markdown write template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"mdrt"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">      <span class="string">"--- $1"</span>,</span><br><span class="line">      <span class="string">"title: $TM_FILENAME_BASE"</span>,</span><br><span class="line">      <span class="string">"tags:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"categories:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE-$CURRENT_HOUR"</span>,</span><br><span class="line">      <span class="string">"--- "</span>,</span><br><span class="line">      <span class="string">" \n "</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">"&lt;!--more--&gt; $2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Create template for markdown write"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: md-kill</span><br><span class="line">tags:</span><br><span class="line">* xx</span><br><span class="line">categories:</span><br><span class="line">* xx</span><br><span class="line">date: 2018-03-31-20</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">Markdown Snippet Prefix Does Not Trigger Snippet #28048</a><br><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Creating your own snippets</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vscode-snippets&quot;&gt;&lt;a href=&quot;#vscode-snippets&quot; class=&quot;headerlink&quot; title=&quot;vscode snippets&quot;&gt;&lt;/a&gt;vscode snippets&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以设置 markdown 代码片段为例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常操作" scheme="http://blog.booml.cn/categories/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="小技巧" scheme="http://blog.booml.cn/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>fib</title>
    <link href="http://blog.booml.cn/2018/12/30/fib/"/>
    <id>http://blog.booml.cn/2018/12/30/fib/</id>
    <published>2018-12-30T11:20:04.473Z</published>
    <updated>2018-12-30T11:20:04.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><blockquote><p>打印斐波那契数列，递归法，迭代法，提升递归效率</p></blockquote><a id="more"></a><p>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]<br>后一位数是前两位数之和<br>(例如 fib(2) === 0 + 1) === 1;</p><p>提升递归效率，创建一个数据存储，或者一个小的缓存对象，缓存对象是数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function memoize(fn) &#123;</span><br><span class="line">  const cache = &#123;&#125;;</span><br><span class="line">  return function(...args) &#123;</span><br><span class="line">    // ...args ： 数组集</span><br><span class="line">    if (cache[args]) &#123;</span><br><span class="line">      return cache[args];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const result = fn.apply(this, args);</span><br><span class="line">    cache[args] = result;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function slowFib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return slowFib(n - 1) + slowFib(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const fib = memoize(slowFib);</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = result[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> b = result[i - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    result.push(a + b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打印斐波那契数列，递归法，迭代法，提升递归效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>2019--启程</title>
    <link href="http://blog.booml.cn/2018/12/30/2019-%E5%90%AF%E7%A8%8B/"/>
    <id>http://blog.booml.cn/2018/12/30/2019-启程/</id>
    <published>2018-12-30T11:20:04.437Z</published>
    <updated>2018-12-30T11:20:04.438Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyonjtz2hlj20c80qdwen.jpg" alt=""><br>即将告别2018年，这个对于我来说，<strong>多灾多难</strong>的一年。<br>这一年发生了太多的事，每一年也都会发生很多事，但从来没有哪一年能够像2018年这样让人印象深刻。<br><strong>考研结束。</strong><br><strong>毕业。</strong><br><strong>工作。</strong><br><strong>最悲痛的莫过于最亲的人去世。</strong><br>事业也刚刚起步，爱情失去了方向。<br>真是让人印象深刻的一年。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fyonjtz2hlj20c80qdwen.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;即将告别2018年，这个对于我来说，&lt;strong&gt;多灾多难&lt;/strong&gt;的一年。&lt;br&gt;这一年发生了太多的事，每一年也都会发生很多事，但从来没有哪一年能够像2018年这样让人印象深刻。&lt;br&gt;&lt;strong&gt;考研结束。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;毕业。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;工作。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;最悲痛的莫过于最亲的人去世。&lt;/strong&gt;&lt;br&gt;事业也刚刚起步，爱情失去了方向。&lt;br&gt;真是让人印象深刻的一年。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.booml.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://blog.booml.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>matrix</title>
    <link href="http://blog.booml.cn/2018/03/28/matrix/"/>
    <id>http://blog.booml.cn/2018/03/28/matrix/</id>
    <published>2018-03-27T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><blockquote><p>写一个函数，输入数字 N,返会一个 N*N 的矩阵(环序)。</p></blockquote><a id="more"></a><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// matrix(2)</span></span><br><span class="line"><span class="comment">//      [[1, 2],</span></span><br><span class="line"><span class="comment">//       [3, 4]]</span></span><br><span class="line"><span class="comment">// matrix(3)</span></span><br><span class="line"><span class="comment">//      [[1, 2, 3],</span></span><br><span class="line"><span class="comment">//       [8, 9, 4],</span></span><br><span class="line"><span class="comment">//       [7, 6, 5]]</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matrix</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    results.push([]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startColumn = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endColumn = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> startRow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> endRow = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (startColumn &lt;= endColumn &amp;&amp; startRow &lt;= endRow) &#123;</span><br><span class="line">    <span class="comment">//顶列开头到结尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startColumn; i &lt;= endColumn; i++) &#123;</span><br><span class="line">      results[startRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startRow++;</span><br><span class="line">    <span class="comment">//最右列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startRow; i &lt;= endRow; i++) &#123;</span><br><span class="line">      results[i][endColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endColumn--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底部行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endColumn; i &gt;= startColumn; i--) &#123;</span><br><span class="line">      results[endRow][i] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    endRow--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start 列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = endRow; i &gt;= startRow; i--) &#123;</span><br><span class="line">      results[i][startColumn] = counter;</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    startColumn++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = <span class="built_in">require</span>(<span class="string">'./index'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix 函数已定义'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="keyword">typeof</span> matrix).toEqual(<span class="string">'function'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 2x2 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">2</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">2</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">4</span>, <span class="number">3</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 3x3 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">3</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'matrix produces a 4x4 array'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> m = matrix(<span class="number">4</span>);</span><br><span class="line">  expect(m.length).toEqual(<span class="number">4</span>);</span><br><span class="line">  expect(m[<span class="number">0</span>]).toEqual([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line">  expect(m[<span class="number">1</span>]).toEqual([<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">5</span>]);</span><br><span class="line">  expect(m[<span class="number">2</span>]).toEqual([<span class="number">11</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">6</span>]);</span><br><span class="line">  expect(m[<span class="number">3</span>]).toEqual([<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;矩阵&quot;&gt;&lt;a href=&quot;#矩阵&quot; class=&quot;headerlink&quot; title=&quot;矩阵&quot;&gt;&lt;/a&gt;矩阵&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;写一个函数，输入数字 N,返会一个 N*N 的矩阵(环序)。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>reversint</title>
    <link href="http://blog.booml.cn/2018/03/19/reversInt/"/>
    <id>http://blog.booml.cn/2018/03/19/reversInt/</id>
    <published>2018-03-18T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="整数反转-reversint"><a href="#整数反转-reversint" class="headerlink" title="整数反转(reversint)"></a>整数反转(reversint)</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>给你一个带符号的整数，返回这些数值的倒序</p></blockquote><blockquote><p>//例如</p></blockquote><blockquote><p>// reverseint(1243) === 3421</p></blockquote><a id="more"></a><blockquote><p>// reverseint(123) === 321</p></blockquote><blockquote><p>// reverseint(-12) === -21</p></blockquote><blockquote><p>// reverseint(-10) === -1</p></blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reversed = n</span><br><span class="line">    .toString()</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(reversed) * <span class="built_in">Math</span>.sign(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseint</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (n =</span><br><span class="line">    <span class="built_in">Math</span>.abs(n)</span><br><span class="line">      .toString()</span><br><span class="line">      .split(<span class="string">''</span>)</span><br><span class="line">      .reverse()</span><br><span class="line">      .join(<span class="string">''</span>) * <span class="built_in">Math</span>.sign(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;整数反转-reversint&quot;&gt;&lt;a href=&quot;#整数反转-reversint&quot; class=&quot;headerlink&quot; title=&quot;整数反转(reversint)&quot;&gt;&lt;/a&gt;整数反转(reversint)&lt;/h3&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;给你一个带符号的整数，返回这些数值的倒序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;//例如&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;// reverseint(1243) === 3421&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JS" scheme="http://blog.booml.cn/tags/JS/"/>
    
      <category term="Interview" scheme="http://blog.booml.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Git 仓库合并（实例）</title>
    <link href="http://blog.booml.cn/2018/03/05/git-progress/"/>
    <id>http://blog.booml.cn/2018/03/05/git-progress/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.477Z</updated>
    
    <content type="html"><![CDATA[<p>最近想着整理一下 github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地 A 仓库中 clone B 再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。</p><a id="more"></a><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><ul><li>合并两个库/提交记录</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>本地环境 Windows os ,所有均在命令 git bash 中操作</li><li>远程仓库 A,如图左，远程仓库 B,如图右。</li></ul><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/NWbZygn.png" alt="enter description here"></td><td><img src="https://i.imgur.com/FidxLZc.png" alt="enter description here"></td></tr></tbody></table><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><ul><li>clone 到本地<br><code>git clone https://github.com/lmislm/Code_Repository.git</code></li><li><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">添加远程仓库</a></p><ul><li><p><code>cd Code_Repository/</code></p></li><li><p><code>git remote add -f CSS_Ex git://github.com/lmislm/CSS_Ex.git</code></p><ul><li>添加一个新的远程仓库，指定一个简单的名字，以便将来引用，运行 <code>git remote add [shortname] [url]：</code></li></ul></li></ul><ul><li><p><code>git merge --strategy ours --no-commit CSS_Ex/master</code> + 可能报错<code>fatal: refusing to merge unrelated histories</code>忽略就行。 + <a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener"><strong>ours</strong></a> 选项强制冲突由‘our’版本自动解决，即：来自其他分支树不会影响到我们这边映射到合并的结果。 + &gt; 即忽略冲突只保留<strong>Code_Repository</strong>文件树并且把 <strong>CSS_Ex</strong>的历史记录合并进来。</p></li><li><p><code>git remote -v</code> + 此命令将全部列出远程仓库。检查一下是否存在</p></li><li><p><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + <code>--prefix=css/</code>：这里 Code_Repository/目录下有 css/子目录 + &gt; –prefix 用于指定文件树读取后保存的路径，相对于当前路径并且一定要追加 /<br>–no-commit 的原因，<a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">该选项会在合并解析完成后中断，停留在最后的提交步骤之前。</a></p><ul><li><code>git read-tree --prefix=css/ -u CSS_Ex/master</code> + &gt; -u 是说在读取后更新 index，使得 working tree 与 index 保持同步 + <code>git commit -m &quot;finish,迁移CSS_Ex到了Code_Repository/css/下&quot;</code> + <code>git add .</code> + <code>git commit -m &quot;迁移完成&quot;</code> + <code>git push -u origin master</code></li></ul></li></ul></li></ul><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><table><thead><tr><th></th></tr></thead><tbody><tr><td><img src="https://i.imgur.com/QNW1boS.png" alt="enter description here"></td></tr></tbody></table><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><ul><li>在操作完成之后确实实现了合并到同一个仓库，但是<strong>并没有预期的结果</strong>，没有完美的合并提交记录。多次操作之后，将一些零散的东西合并到了同一个仓库。但是原来的仓库还是存在的。如果将原来零散的仓库删除。可以看到结果中，<code>a year ago</code>，历史提交记录确实存在，但是其他<code>flex_Ex</code>显示的却是在进行这个合并操作时提交的时间。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://segmentfault.com/a/1190000000678808" target="_blank" rel="noopener">如何用 Git 合并两个库（合并历史记录，解决冲突／改写路径）</a><br><a href="https://mlichtenberg.wordpress.com/2015/08/28/merging-git-repositories-and-preserving-history/" target="_blank" rel="noopener">Merging Git Repositories and Preserving History</a><br><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener"> Git 基础 - 远程仓库的使用</a><br><a href="https://git-scm.com/docs/merge-strategies#merge-strategies-ours" target="_blank" rel="noopener">MERGE STRATEGIES​ - ours</a><br><a href="https://git-scm.com/docs/git-read-tree" target="_blank" rel="noopener">git read-tree</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想着整理一下 github 上一些零散的代码到同一个库中，问题是如何合并两个仓库并且保留每个文件的提交记录？如果只是两个目录并为一个，不需保留每个库的提交的记录，你只要在本地 A 仓库中 clone B 再提交就行，而本文所做的就是实践这个过程，参考的博客在文末。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="git" scheme="http://blog.booml.cn/tags/git/"/>
    
      <category term="工具" scheme="http://blog.booml.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>undefined behavior in c</title>
    <link href="http://blog.booml.cn/2018/01/06/undefined%20behavior%20in%20c/"/>
    <id>http://blog.booml.cn/2018/01/06/undefined behavior in c/</id>
    <published>2018-01-06T13:41:18.000Z</published>
    <updated>2018-12-30T11:20:04.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="undefined-behavior（未定义行为）"><a href="#undefined-behavior（未定义行为）" class="headerlink" title="undefined behavior（未定义行为）"></a>undefined behavior（未定义行为）</h2><ul><li>思考一下下面这段代码的输出会是什么（答案在后面）？</li><li>这段代码运行过程是怎样？</li></ul><a id="more"></a><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQ(y) (y*y)  <span class="comment">//define 1</span></span></span><br><span class="line"><span class="comment">//#define SQ(y) ((y)*(y))   //define 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%-2d"</span>,SQ(i++));</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-只试了两种编译器</span></span><br><span class="line"><span class="comment"> *所用编译器：gcc</span></span><br><span class="line"><span class="comment"> *       用define  1 : 结果1  9  15</span></span><br><span class="line"><span class="comment"> *       用define 2 ：结果1  9  15</span></span><br><span class="line"><span class="comment"> *其他编辑器：</span></span><br><span class="line"><span class="comment"> *      用define  1 : 结果2  12  30</span></span><br><span class="line"><span class="comment"> *      用define  2: 结果1  9  15</span></span><br><span class="line"><span class="comment"> *      。。。。。</span></span><br></pre></td></tr></table></figure><h3 id="问题：为什么得到的结果不一样？"><a href="#问题：为什么得到的结果不一样？" class="headerlink" title="问题：为什么得到的结果不一样？"></a>问题：为什么得到的结果不一样？</h3><ul><li>看上面的对比，是因为编辑器的原因导致的??</li><li>一开始某本书上的答案是 2 12 30 ，我很纳闷，开头第一个数居然是 2，于是一番折腾查阅了一下别人的看法。</li></ul><h3 id="我认为的原因是：undefined-behavior"><a href="#我认为的原因是：undefined-behavior" class="headerlink" title="我认为的原因是：undefined behavior"></a>我认为的原因是：undefined behavior</h3><ul><li>什么是：undefined behavior（未定义行为）呢？如下。<blockquote><p>在计算机程序设计中，未定义行为（英语：undefined behavior) 是指行为不可预测的计算机代码。这是一些编程语言的一个特点，最有名的是在 C 语言中。在这些语言中，为了简化标准，并给予实现一定的灵活性，标准特别地规定某些操作的结果是未定义的，这意味着程序员不能预测会发生什么事。……. 因此，这种未定义行为一般应被视为 bug。<br>—来源：<a href="https://zh.wikipedia.org/wiki/%E6%9C%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">中文维基百科</a></p></blockquote></li></ul><h3 id="还有哪些-undefined-behavior（未定义行为）"><a href="#还有哪些-undefined-behavior（未定义行为）" class="headerlink" title="还有哪些 undefined behavior（未定义行为）"></a>还有哪些 undefined behavior（未定义行为）</h3><blockquote><p>偷懒：)。此处省略一些例子，因为 wiki 上都有一些典型例子。中文访问不了的话，英文在这，<a href="https://en.wikipedia.org/wiki/Undefined_behavior" target="_blank" rel="noopener">点我</a>。</p></blockquote><h2 id="如何解释这段代码"><a href="#如何解释这段代码" class="headerlink" title="如何解释这段代码"></a>如何解释这段代码</h2><ul><li>输出 1 9 15<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，i=1，i++=2，1 _ 2 = 2， 再 i++=3<br><strong>第二次循环时</strong>，i=3，i++=4，3 _ 4 = 12，再 i++=5<br><strong>第三次循环时</strong>，i=5，i++=5, 5 * 6 = 30，再 i++=6<br>//进入 i&lt;=5 判断,值为假，退出循环</li></ul><hr><ul><li>输出 2 12 30<br>++ 其计算过程可能为：<br><strong>第一次循环时</strong>，首先 i=1, 1 _ 1 = 1，i++=2，再 i++=3<br><strong>第二次循环时</strong>，首先 i=3, 3 _ 3 = 9，i++=4，再 i++=5<br><strong>第三次循环时</strong>，首先 i=5, 5 * 5 = 25, i++=6，再 i++=7<br>// i=7，所以退出循环。<blockquote><p>首先 i++是先运算，后加。对于 SQ(i++)来说，其实质是((i++)*(i++))。在后加运算符是在整个运算完成之后，才进行加 1 操作的。</p></blockquote></li></ul><p><em>多问和讨论总是有好处的，继续保持：）</em><br>参考：<br>[1]<a href="https://zhidao.baidu.com/question/561702258825816084.html" target="_blank" rel="noopener">c语言的代参宏定义，#define sq(y) ((y)*(y))….输出应该是2 12 30才对啊？？</a>[2]<a href="https://www.zhihu.com/question/36940781/answer/69683475" target="_blank" rel="noopener">int i=5 ；printf(“%d”,i++,++i)；为什么输出 6?</a></p><p>[3]<a href="http://www.cnblogs.com/yezhenhan/archive/2011/11/05/2236973.html" target="_blank" rel="noopener">c语言中define的用法</a><br>进阶（可不看）：<br><a href="https://wenku.baidu.com/view/2bd97e6bdd36a32d737581b4.html" target="_blank" rel="noopener">关于宏定义的 ppt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;undefined-behavior（未定义行为）&quot;&gt;&lt;a href=&quot;#undefined-behavior（未定义行为）&quot; class=&quot;headerlink&quot; title=&quot;undefined behavior（未定义行为）&quot;&gt;&lt;/a&gt;undefined behavior（未定义行为）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;思考一下下面这段代码的输出会是什么（答案在后面）？&lt;/li&gt;
&lt;li&gt;这段代码运行过程是怎样？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="c" scheme="http://blog.booml.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>shell的正则表达式</title>
    <link href="http://blog.booml.cn/2017/07/20/shell%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.booml.cn/2017/07/20/shell正则表达式/</id>
    <published>2017-07-19T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.535Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><ol><li>正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据</li><li>正则表达式与通配符的区别 1.正则表达式–匹配“文件”符合条件的字符串–&gt;&gt;包含匹配 2.通配符—–匹配符合条件的“文件”名——–&gt;&gt;完全匹配 3.为什么存在，通配符、正则表达式？<a id="more"></a><ul><li>ls、find、cp（操作文件的一些命令）不支持正则表达式，只能用通配符。</li><li>grep、awk、sed（操作字符串的一些命令）支持正则表达式。</li><li>为什么所有的不都支持正则表达式？</li></ul></li><li>正则表达式<ol><li>基础正则</li></ol></li></ol><table><thead><tr><th>元<strong>字</strong>符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>.</strong></td><td>前一个字符匹配<strong>0 次</strong>或任意多次</td></tr><tr><td><strong>^</strong></td><td>匹配行首，例：^he 匹配以 he 开头的行</td></tr><tr><td><strong>$</strong></td><td>匹配行尾，例：he$匹配以 he 为结尾的字符串</td></tr><tr><td><strong>[ ]</strong></td><td>匹配括号中指定的任意一个字符，<strong>只匹配一个</strong> 例：[a-z]匹配 a-z 中的任意一个字符，[0-9][a-z]表示“连续匹配”</td></tr><tr><td><strong>[^]</strong></td><td>匹配除中括号字符外任意一个字符，例：^[0-9]匹配任意一位非数字的字符</td></tr><tr><td>\</td><td>转义符，取消特殊字符的含义</td></tr><tr><td>\ { n\ }</td><td>表示前面字符<strong>恰好</strong>出现 n 次</td></tr><tr><td>\ { n,\ }</td><td>表示前面字符出现<strong>不小于</strong>n 次</td></tr><tr><td>\ {n,m\ }</td><td>表示其前面字符<strong>至少</strong>出现 n 次</td></tr></tbody></table><ol><li>扩展正则</li></ol><hr><h2 id="正则表达式（基础正则）"><a href="#正则表达式（基础正则）" class="headerlink" title="正则表达式（基础正则）"></a><strong>正则表达式（基础正则）</strong></h2><h3 id="“-“"><a href="#“-“" class="headerlink" title="“ * “"></a>“ * “</h3><ol><li>“<code>*</code>“星号——–不同于通配符中的匹配所有内容。<ul><li>前一个字符匹配<strong>0 次</strong>，或者任意多次。<ul><li><code>a*</code> - - 匹配<strong>所有内容</strong>，包括<strong>空白行</strong>。</li><li><code>aa*</code> - - 匹配至少包含有一个 a 的行。</li><li><code>aaa*</code> - -匹配至少包含两个连续的 a 的字符串。</li></ul></li></ul></li></ol><h3 id="“-“-1"><a href="#“-“-1" class="headerlink" title="“ . “"></a>“ . “</h3><ol><li>“<code>.</code>“——–和通配符中”?”类似。<ul><li>匹配<strong>除了换行符</strong>外任意字符<ul><li><code>s..d</code> - - 匹配之间两个字符的单词。</li><li><code>s.*d</code> - - 匹配之间的任意字符。</li><li><code>.*</code> - - 匹配所有内容。</li></ul></li></ul></li></ol><h3 id="“-“、”-“、”-“、”-“"><a href="#“-“、”-“、”-“、”-“" class="headerlink" title="“ ^ “、” $ “、” [] “、” [ ^ ] “"></a>“ ^ “、” $ “、” [] “、” [ ^ ] “</h3><ol><li>“<code>^</code>“、”<code>$</code>“、”<code>[]</code>“、”<code>[^]</code>“<ul><li><code>^</code> - - 匹配行首。</li><li><code>$</code> - - 匹配行尾。</li><li><code>[]</code> - - 匹配括号中指定字符串中的任意字符，<strong>只匹配一个</strong>。</li><li><code>[^]</code> - - 匹配除中括号的字符以外的任意一个字符。</li></ul></li></ol><h3 id="n-、-n-、-n-m"><a href="#n-、-n-、-n-m" class="headerlink" title="{n\ }、{n,\ }、{n,m\ }"></a>{n\ }、{n,\ }、{n,m\ }</h3><ol><li>“<code>\{n\}</code>”、”<code>\{n,\}</code>“、”<code>\{n,m\}</code>“<ul><li><code>\{n\}</code> - - 例：<code>a\{3\}</code> 匹配 a 字母连续出现三次的字符串（连续四次以上也会被匹配到，所以在该匹配首尾加定界符能精确匹配到）</li><li><code>\{n,\}</code> - - 例：<code>\{n,\}</code> 前面字符出现不少于 n 次</li><li><code>\{n,m\}</code> - - 例：<code>sa\{1,3}i</code> 匹配在字母 s 和字母 i 之间最少一个 a，最多三个 a</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;正则表达式用于描述字符排列和匹配模式的一种语法规则。—-用来筛选数据&lt;/li&gt;
&lt;li&gt;正则表达式与通配符的区别 1.正则表达式–匹配“文件”符合条件的字符串–&amp;gt;&amp;gt;包含匹配 2.通配符—–匹配符合条件的“文件”名——–&amp;gt;&amp;gt;完全匹配 3.为什么存在，通配符、正则表达式？
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="shell" scheme="http://blog.booml.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>question-check</title>
    <link href="http://blog.booml.cn/2017/05/27/check-question/"/>
    <id>http://blog.booml.cn/2017/05/27/check-question/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.454Z</updated>
    
    <content type="html"><![CDATA[<p>质量反馈调查展示界面</p><a id="more"></a><ul><li>编辑</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b69424e5.jpg" alt="编辑问卷" title="编辑问卷"></p><ul><li>管理</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32b8f297d9.jpg" alt="问卷管理" title="问卷管理"></p><ul><li>答题<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32bfe08f31.jpg" alt="答题" title="问卷调查"></li><li>统计数据<br><img src="https://ooo.0o0.ooo/2017/04/04/58e32c1f911b8.jpg" alt="enter description here" title="统计数据"></li><li>题库</li></ul><p><img src="https://ooo.0o0.ooo/2017/04/04/58e32c32be3ba.jpg" alt="题库" title="题库"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;质量反馈调查展示界面&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="展示" scheme="http://blog.booml.cn/tags/%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>acm基础--POJ No.1003 Hangover</title>
    <link href="http://blog.booml.cn/2017/05/25/acm00/"/>
    <id>http://blog.booml.cn/2017/05/25/acm00/</id>
    <published>2017-05-24T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于运算符号的思考（acm-热身）"><a href="#关于运算符号的思考（acm-热身）" class="headerlink" title="关于运算符号的思考（acm 热身）"></a>关于运算符号的思考（acm 热身）</h2><h3 id="POJ-No-1003-Hangover"><a href="#POJ-No-1003-Hangover" class="headerlink" title="POJ No.1003 Hangover"></a>POJ No.1003 Hangover</h3><blockquote><p>input：<br>1.00<br>3.71<br>output：<br>3 card(s)<br>61 card(s)</p></blockquote><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">float</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;b)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0.0</span>)<span class="keyword">break</span>;</span><br><span class="line">    a=<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;a&lt;b;++n) a+=<span class="number">1.0</span>/(<span class="keyword">float</span>)(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span> card(s) \n<span class="string">",n-1);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="逗号运算符号"><a href="#逗号运算符号" class="headerlink" title="逗号运算符号"></a>逗号运算符号</h4><blockquote><p><strong><em>while(scanf(“%f”,&amp;b)==1)</em></strong><br>compare to<br><strong><em>while(scanf(“%f”,&amp;b),b)</em></strong><br>结束条件等价于<strong><em>b!=0</em></strong>即使 b 的值为 0.000001f,0.00001<br>f!=0 为真，也不会结束循环。所以写法(*，b）非常重要</p></blockquote><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><blockquote><p>直接用(float)转换为 int 类型，简单点就写成<br><strong><em>for(n=1;al；)</em></strong></p></blockquote><h4 id="减少变量"><a href="#减少变量" class="headerlink" title="减少变量"></a>减少变量</h4><blockquote><p>省略 int 类型将 n 写入 main（），但是有的编译器并不能通过。所以为了简单清晰，还是不要用的好。</p></blockquote><h4 id="尽量多用-for-循环"><a href="#尽量多用-for-循环" class="headerlink" title="尽量多用 for 循环"></a>尽量多用 for 循环</h4><p><strong>直接缩成一行</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中包含n省略在main</span><br><span class="line">main(n)</span><br><span class="line">&#123;</span><br><span class="line">float b;</span><br><span class="line">for(;scanf(&quot;%f&quot;,&amp;b),b;printf(&quot;%d card(s)\n&quot;,n-1))</span><br><span class="line">for(n=1;b&gt;0;)b-=1./++n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于运算符号的思考（acm-热身）&quot;&gt;&lt;a href=&quot;#关于运算符号的思考（acm-热身）&quot; class=&quot;headerlink&quot; title=&quot;关于运算符号的思考（acm 热身）&quot;&gt;&lt;/a&gt;关于运算符号的思考（acm 热身）&lt;/h2&gt;&lt;h3 id=&quot;POJ-No-1003-Hangover&quot;&gt;&lt;a href=&quot;#POJ-No-1003-Hangover&quot; class=&quot;headerlink&quot; title=&quot;POJ No.1003 Hangover&quot;&gt;&lt;/a&gt;POJ No.1003 Hangover&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;input：&lt;br&gt;1.00&lt;br&gt;3.71&lt;br&gt;output：&lt;br&gt;3 card(s)&lt;br&gt;61 card(s)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>深度优先算法-部分和问题</title>
    <link href="http://blog.booml.cn/2017/05/24/DFS-%E9%83%A8%E5%88%86%E5%92%8C/"/>
    <id>http://blog.booml.cn/2017/05/24/DFS-部分和/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。"><a href="#给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。" class="headerlink" title="给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。"></a>给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。</h3><a id="more"></a><p>限制条件</p><ul><li>1≤ n ≤20</li><li>-10^8^ ≤ a~i~ ≤ 10^8^</li><li>-10^8^ ≤ k ≤ 10^8^<br>输入</li><li>n=4</li><li>a={1,2,4,7}</li><li>k=13<br>输出<br>yes （13 = 2 + 4 + 7）</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="利用最简单的递归，可以先画出深度优先的树"><a href="#利用最简单的递归，可以先画出深度优先的树" class="headerlink" title="利用最简单的递归，可以先画出深度优先的树"></a>利用最简单的递归，可以先画出深度优先的树</h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><figcaption><span>c++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNUM = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">int</span> arr[MAXNUM];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_data</span><span class="params">(<span class="keyword">int</span> *n, <span class="keyword">int</span> *k, <span class="keyword">int</span> *arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"n = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a = &#123;"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; *n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"k = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; *k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//已经从前n项得到了和sum，然后对于i项之后的分支</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果前n项都计算过了，则返回sum是否与k相等</span></span><br><span class="line">    <span class="keyword">if</span> (i == n) <span class="keyword">return</span> sum == k;</span><br><span class="line"><span class="comment">//    不加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//    加上a[i]的情况</span></span><br><span class="line">    <span class="keyword">if</span> (dfs(i+<span class="number">1</span>, sum+arr[i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 无论是否加上a[i],都不能凑成k就返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dfs(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    input_data(&amp;n, &amp;k, arr);</span><br><span class="line"></span><br><span class="line">    solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。&quot;&gt;&lt;a href=&quot;#给定整数-a-1-a-2-…-a-n-，判断是否可以从中选出若干数，使他们的和恰好为-k。&quot; class=&quot;headerlink&quot; title=&quot;给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。&quot;&gt;&lt;/a&gt;给定整数 a~1~,a~2~ ,…,a~n~，判断是否可以从中选出若干数，使他们的和恰好为 k。&lt;/h3&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>Steps</title>
    <link href="http://blog.booml.cn/2017/05/21/poj%20No.2590/"/>
    <id>http://blog.booml.cn/2017/05/21/poj No.2590/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POj-No-2590-Steps"><a href="#POj-No-2590-Steps" class="headerlink" title="POj No.2590 Steps"></a>POj No.2590 Steps</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在数轴上的两点之间，按照下面规则移动。</p><ul><li>每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差 1。</li><li>每一步和最后一步的步幅必须是 1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。<a id="more"></a></li></ul><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>测试数据个数 n、开始地点 x 以及终点 y（0&lt;=x&lt;=y&lt;2^31^),格式如下：</p><blockquote><p>n<br>x~1~ y~1~<br>x~2~ y~2~<br>…<br>x~n~ y~n~</p></blockquote><ul><li><p>输入</p><blockquote><p>3<br>45 48<br>45 49<br>45 50</p></blockquote></li><li><p>输出</p><blockquote><p>3<br>3<br>4</p></blockquote></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> step, i,len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(step=<span class="number">0</span>;step&lt;<span class="number">20</span>;++step)&#123;</span><br><span class="line">len=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//求得一半为止的步数</span></span><br><span class="line"><span class="comment">//步数是奇数就加1</span></span><br><span class="line"><span class="keyword">int</span> mid=step/<span class="number">2</span>+step%<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求出1+2+3+...到中间地点为止的合计</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mid;++i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从中间地点开始计算...+3+2+1</span></span><br><span class="line"><span class="keyword">for</span>(i=step/<span class="number">2</span>;i&gt;<span class="number">0</span>;--i) len+=i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%2d step(s)...%3d\n"</span>,step,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><blockquote><p>画图找规律</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;POj-No-2590-Steps&quot;&gt;&lt;a href=&quot;#POj-No-2590-Steps&quot; class=&quot;headerlink&quot; title=&quot;POj No.2590 Steps&quot;&gt;&lt;/a&gt;POj No.2590 Steps&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;在数轴上的两点之间，按照下面规则移动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一步的步幅都要是自然数，同时必须与前一步幅相同或者是差 1。&lt;/li&gt;
&lt;li&gt;每一步和最后一步的步幅必须是 1。当给出两点位置的时候，请回答从第一个点移动到第二点需要的最小步数。
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>poj No.3062 Celebrity jeopardy</title>
    <link href="http://blog.booml.cn/2017/05/20/poj%20No.3062/"/>
    <id>http://blog.booml.cn/2017/05/20/poj No.3062/</id>
    <published>2017-05-19T16:00:00.000Z</published>
    <updated>2018-12-30T11:20:04.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Celebrity-jeopardy"><a href="#Celebrity-jeopardy" class="headerlink" title="Celebrity jeopardy"></a>Celebrity jeopardy</h2><h3 id="直接输出的数字"><a href="#直接输出的数字" class="headerlink" title="直接输出的数字"></a>直接输出的数字</h3><a id="more"></a><figure class="highlight cpp"><figcaption><span>c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;~c;)</span><br><span class="line">    &#123;</span><br><span class="line">        c = getchar();</span><br><span class="line">        <span class="built_in">putchar</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Celebrity-jeopardy&quot;&gt;&lt;a href=&quot;#Celebrity-jeopardy&quot; class=&quot;headerlink&quot; title=&quot;Celebrity jeopardy&quot;&gt;&lt;/a&gt;Celebrity jeopardy&lt;/h2&gt;&lt;h3 id=&quot;直接输出的数字&quot;&gt;&lt;a href=&quot;#直接输出的数字&quot; class=&quot;headerlink&quot; title=&quot;直接输出的数字&quot;&gt;&lt;/a&gt;直接输出的数字&lt;/h3&gt;
    
    </summary>
    
      <category term="学习" scheme="http://blog.booml.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="acm" scheme="http://blog.booml.cn/tags/acm/"/>
    
      <category term="poj" scheme="http://blog.booml.cn/tags/poj/"/>
    
  </entry>
  
  <entry>
    <title>codewars_Replace With Alphabet Position</title>
    <link href="http://blog.booml.cn/2017/05/07/codewars_Replace%20With%20Alphabet%20Position/"/>
    <id>http://blog.booml.cn/2017/05/07/codewars_Replace With Alphabet Position/</id>
    <published>2017-05-07T13:41:18.000Z</published>
    <updated>2018-12-30T11:20:04.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>这是一道字符串操作的题。题目如下：</p><a id="more"></a><blockquote><p>Welcome.<br>In this kata you are required to, given a string, replace every letter with its position in the alphabet. If anything in the text isn’t a letter, ignore it and don’t return it. a being 1, b being 2, etc.<br>As an example:</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alphabet_position(&quot;The sunset sets at twelve o&apos; clock.&quot;)</span><br><span class="line"></span><br><span class="line">Should return &quot;20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11&quot; (As a string.)</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先肯定利用方法<code>charCodeAt</code>来处理字符，其次得转化下大小写，因为每个字符都是空格隔开，那么肯定用到<code>split</code>等来“切割”。思路大概就是我代码里头描述的，但是看最佳答案的时候，有相对另外的思路，大概意思差不多但是把处理的顺序调一下，会有意想不到的作用，也是佩服那些大牛们啊，具体怎么调整才可以 →_→ 最优，聪明的你，可以想一想啊 :) 留个悬念。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function alphabetPosition(text) &#123;</span><br><span class="line">    return text.replace(/[^a-zA-Z]+/g,&apos;&apos;).toUpperCase().split(&apos;&apos;).map(</span><br><span class="line">        function (eachStr) &#123;</span><br><span class="line">            return eachStr.charCodeAt()-64;</span><br><span class="line">        &#125;).join(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(alphabetPosition(&apos;The testT&apos;))</span><br></pre></td></tr></table></figure><ul><li>那么我看到目前为止最机智中票数最高的代码下面这个，可惜这些对我来说还是很晦涩啊。但是我想大概思路是差不多的。另外看到很多用 for 循环的，感觉太麻烦，虽然代码容易读，但是我想对于一个想学习 JS 的人来说，尽量用方法应该是好的。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let alphabetPosition = (text) =&gt; text</span><br><span class="line"> .toUpperCase()</span><br><span class="line"> .replace(/[^A-Z]/g, &apos;&apos;)</span><br><span class="line"> .split(&apos;&apos;)</span><br><span class="line"> .map(ch =&gt; ch.charCodeAt(0) - 64).join(&apos; &apos;);</span><br></pre></td></tr></table></figure><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p>看到 js 字符串转换为数字基本就用转换函数的比较多，</p><blockquote><p>js 字符串转换成数字<br>常用的几种方法转换函数、强制类型转换、利用 js 变量弱类型转换。</p></blockquote><ul><li>转换函数<br><code>parseInt(&quot;1234blue&quot;); // returns 1234</code></li><li>强制类型转换<br><code>Boolean(&quot;hi&quot;); //true – non-empty string</code></li><li>js 变量弱类型转换<br><code>var str = &#39;012.345 &#39;;var x = str - 0;x = x * 1;</code></li></ul><p>查资料发现，关于类型转换的还是比较多，但是我并没有感觉其中的区别和用的地方，可能是实际运用接触不多。但是关于字符和数字之间的转换在 Nodejs 中也是有体现。因此，觉得 codewars 的题目质量还真的挺不错，至少对于我这种初学者来说。每一道题目后面可能都是作者精心挑选出来的。所以，加油吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>JavaScript 权威指南(第 6 版)(中文版)</li><li>JavaScript 语言精粹(修订版) 中文版</li><li>MDN(Mozilla Developer Network)</li><li><a href="http://www.bkjia.com/article/24233.html#top" target="_blank" rel="noopener">js 字符串转换成数字</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;这是一道字符串操作的题。题目如下：&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Vowel Counts</title>
    <link href="http://blog.booml.cn/2017/04/02/vowel%20count/"/>
    <id>http://blog.booml.cn/2017/04/02/vowel count/</id>
    <published>2017-04-02T13:41:18.000Z</published>
    <updated>2018-12-30T11:20:04.543Z</updated>
    
    <content type="html"><![CDATA[<p>统计字符串中的特定字符的数量。主要是方法的优化:</p><a id="more"></a><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h2><blockquote><p>Description:</p></blockquote><blockquote><p>Return the number (count) of vowels in the given string.</p></blockquote><blockquote><p>We will consider a, e, i, o, and u as vowels for this Kata.</p></blockquote><h2 id="2-例子"><a href="#2-例子" class="headerlink" title="2. 例子"></a>2. 例子</h2><ul><li>测试数据</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//Example test:</span><br><span class="line">describe(&quot;Case 1&quot;, function()&#123;</span><br><span class="line">    it (&quot;should be defined&quot;, function()&#123;</span><br><span class="line">        Test.assertEquals(getCount(&quot;abracadabra&quot;), 5)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h2><ul><li>第一眼就想到是可以从头依次查找的。能想到用 c，java 等都是利用 for 循环来处理。</li><li>其次，JS 中想到的是字符串匹配，利用正则表达式对特定字符串遍历。然后输出匹配字符的 length。 * 利用字符串的原型方法<code>String.prototype.match()</code>,语法<code>str.match(regxp)</code></li><li>后面再总结一下，<strong>string 类方法 match(regex)</strong> <strong>和 RegExp 类方法 exec(string)</strong></li></ul><h2 id="4-解题"><a href="#4-解题" class="headerlink" title="4. 解题"></a>4. 解题</h2><h3 id="4-1-最优化："><a href="#4-1-最优化：" class="headerlink" title="4.1 最优化："></a>4.1 最优化：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    return (str.match(/[aeiou]/ig)||[]).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-“多语言”解"><a href="#4-2-“多语言”解" class="headerlink" title="4.2 “多语言”解"></a>4.2 “多语言”解</h3><p>非常的直白啊，感觉都没有一点艺术。。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelsCount = 0;</span><br><span class="line">        var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">        for(var i=0; i&lt;str.length; i++)&#123;</span><br><span class="line">            for(var j=0;j&lt;a.length; j++)&#123;</span><br><span class="line">                if(a[j]===str[i])&#123;</span><br><span class="line">                    vowelsCount ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return vowelsCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-优化"><a href="#4-3-优化" class="headerlink" title="4.3 优化"></a>4.3 优化</h3><p>用<code>indexof</code>来减少 for 循环。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getCount(str) &#123;</span><br><span class="line">    var vowelCount = 0;</span><br><span class="line">    var a = [&apos;a&apos;,&apos;e&apos;,&apos;i&apos;,&apos;o&apos;,&apos;u&apos;];</span><br><span class="line">    for(var i=0;i&lt;str.length; i++)&#123;</span><br><span class="line">        if((a.indexOf(str[i]))!==-1)&#123;</span><br><span class="line">            vowelCount ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return vowelCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="match（regexp）和-exec"><a href="#match（regexp）和-exec" class="headerlink" title="match（regexp）和 exec()"></a>match（regexp）和 exec()</h3><ul><li>关于这两个的讨论，感觉说破天也没有 MDN 上说得好啊。:&gt;</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;统计字符串中的特定字符的数量。主要是方法的优化:&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://blog.booml.cn/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="编程" scheme="http://blog.booml.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="js" scheme="http://blog.booml.cn/tags/js/"/>
    
      <category term="codewars" scheme="http://blog.booml.cn/tags/codewars/"/>
    
  </entry>
  
</feed>
