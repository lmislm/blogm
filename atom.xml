<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>不积小流，无以成江海。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmislm.com/"/>
  <updated>2019-03-14T14:18:40.344Z</updated>
  <id>http://lmislm.com/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day62-理由-感悟</title>
    <link href="http://lmislm.com/2019/03/14/2019-03-14/"/>
    <id>http://lmislm.com/2019/03/14/2019-03-14/</id>
    <published>2019-03-13T16:00:00.000Z</published>
    <updated>2019-03-14T14:18:40.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天本来想优化代码的，看了很久的代码，最后还是没有优化，代码还是和原来一样。崩溃啊。实在是不愿意写下一些重复的代码，尤其是面条代码。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g12oocb8g8j20e609gt9l.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天本来想优化代码的，看了很久的代码，最后还是没有优化，代码还是和原来一样。崩溃啊。实在是不愿意写下一些重复的代码，尤其是面条代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g12oocb8g8j20e609gt9l.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day61-理由-忙碌</title>
    <link href="http://lmislm.com/2019/03/13/2019-03-13/"/>
    <id>http://lmislm.com/2019/03/13/2019-03-13/</id>
    <published>2019-03-12T16:00:00.000Z</published>
    <updated>2019-03-13T14:45:30.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天把昨天的问题解决了，业务上还有很多细节没有去处理。今天早点睡吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g11jub5lzzj20ea09ggmo.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天把昨天的问题解决了，业务上还有很多细节没有去处理。今天早点睡吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g11jub5lzzj20ea09ggmo.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day60-理由-头疼</title>
    <link href="http://lmislm.com/2019/03/12/2019-03-12/"/>
    <id>http://lmislm.com/2019/03/12/2019-03-12/</id>
    <published>2019-03-11T16:00:00.000Z</published>
    <updated>2019-03-12T14:25:58.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天下午居然碰到一个问题卡了一整个下午！关键是我现在都还没有解决。是有关vuejs中computed的getter、settter问题。头疼头疼。明天早上再去解决吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g10dnl5cn5j20dw099dfw.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天下午居然碰到一个问题卡了一整个下午！关键是我现在都还没有解决。是有关vuejs中computed的getter、settter问题。头疼头疼。明天早上再去解决吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g10dnl5cn5j20dw099dfw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day59-理由-繁忙</title>
    <link href="http://lmislm.com/2019/03/11/2019-03-11/"/>
    <id>http://lmislm.com/2019/03/11/2019-03-11/</id>
    <published>2019-03-10T16:00:00.000Z</published>
    <updated>2019-03-11T14:51:46.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>写了一整天的业务代码啊！！这种情况基本是腾不出时间来，写一些小累积。今天就到这吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0z8s0rj9ij211i0p0wg0.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;写了一整天的业务代码啊！！这种情况基本是腾不出时间来，写一些小累积。今天就到这吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0z8s0rj9ij211i0p0wg0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day58-理由-吃撑</title>
    <link href="http://lmislm.com/2019/03/10/2019-03-10/"/>
    <id>http://lmislm.com/2019/03/10/2019-03-10/</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-03-10T14:54:30.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天真的是看书了！看的设计模式。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0y38l5k1oj20dw09975e.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天真的是看书了！看的设计模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0y38l5k1oj20dw09975e.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day57-理由-懒惰</title>
    <link href="http://lmislm.com/2019/03/09/2019-03-09/"/>
    <id>http://lmislm.com/2019/03/09/2019-03-09/</id>
    <published>2019-03-08T16:00:00.000Z</published>
    <updated>2019-03-09T13:12:42.582Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近感觉有点累！还是早点睡觉吧！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0wuoheyspj20dw099t98.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;最近感觉有点累！还是早点睡觉吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0wuoheyspj20dw099t98.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day56-理由-拖延</title>
    <link href="http://lmislm.com/2019/03/08/2019-03-08/"/>
    <id>http://lmislm.com/2019/03/08/2019-03-08/</id>
    <published>2019-03-07T16:00:00.000Z</published>
    <updated>2019-03-08T15:14:51.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天身边头号新闻，公司获得了1800万投资啊！嗯，有点兴奋！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0vskcwqtkj20dw09a758.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天身边头号新闻，公司获得了1800万投资啊！嗯，有点兴奋！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0vskcwqtkj20dw09a758.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day55-uncurrying</title>
    <link href="http://lmislm.com/2019/03/07/2019-03-07/"/>
    <id>http://lmislm.com/2019/03/07/2019-03-07/</id>
    <published>2019-03-06T16:00:00.000Z</published>
    <updated>2019-03-07T15:03:28.143Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>让对象借用原本不属于他的方法，我们可以用call,apply把任意对象当做this传入某个方法。有没有能够把this提取出来，并得到更广的适用性？</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0umna40mhj20dw099wf6.jpg" alt=""><br><a id="more"></a></p><h3 id="uncurrying-实现"><a href="#uncurrying-实现" class="headerlink" title="uncurrying 实现"></a>uncurrying 实现</h3><ul><li><p>实现方式之一</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现方法二</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Function</span>.prototype.call.apply(self, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="uncurrying应用"><a href="#uncurrying应用" class="headerlink" title="uncurrying应用"></a>uncurrying应用</h3><p>通过uncurrying方式，push 函数的作用和Array.prototype.push.call()一样</p><ul><li><p>方法一的应用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> push = <span class="built_in">Array</span>.prototype.push.uncurrying()</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="string">'length'</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'0'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">push(obj, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></li><li><p>发生了什么？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span> <span class="comment">// self 此时是Array.prototype.push()</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * obj是&#123;</span></span><br><span class="line"><span class="comment">     *    'length': 1,</span></span><br><span class="line"><span class="comment">     *    '0': 1</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * argument 对象的第一个元素被截去，剩下[2]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1].《JavaScript设计模式与开发实践》- 曾探</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;让对象借用原本不属于他的方法，我们可以用call,apply把任意对象当做this传入某个方法。有没有能够把this提取出来，并得到更广的适用性？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0umna40mhj20dw099wf6.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day54-理由-ss挂了</title>
    <link href="http://lmislm.com/2019/03/06/2019-03-06/"/>
    <id>http://lmislm.com/2019/03/06/2019-03-06/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-03-06T15:41:56.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>下午突然不能google了，Ping一下我服务器地址，是可以的，端口被封了！于是开始折腾了。可能是最近两会吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0ti4vp7frj20dw099gly.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;下午突然不能google了，Ping一下我服务器地址，是可以的，端口被封了！于是开始折腾了。可能是最近两会吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0ti4vp7frj20dw099gly.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day53-两数组-集合运算</title>
    <link href="http://lmislm.com/2019/03/05/2019-03-05/"/>
    <id>http://lmislm.com/2019/03/05/2019-03-05/</id>
    <published>2019-03-04T16:00:00.000Z</published>
    <updated>2019-03-05T15:25:49.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>选择语言对的时候，源语言和目标语言选项要互斥。由此联想到交集、差集、补集、并集的JS如何实现。本文小结ES5和ES6的一些实现方法。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0sbwcn19kj20dw07tab1.jpg" alt="Photo by Ant Rozetsky on Unsplash"><br>[Photo by Ant Rozetsky on Unsplash]<br><a id="more"></a></p><h3 id="ES5实现"><a href="#ES5实现" class="headerlink" title="ES5实现"></a>ES5实现</h3><ul><li>数据<br>let arrA = [‘a’, 3, 5, ‘d’, ‘o’]<br>let arrB = [‘b’, 5, ‘o’, ‘x’, ‘g’, ‘b’]<h4 id="filter-indexOf-concat"><a href="#filter-indexOf-concat" class="headerlink" title="filter+indexOf+concat"></a>filter+indexOf+concat</h4></li><li><p>交集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> intersection = arrA.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arrB.indexOf(v) &gt; <span class="number">-1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(intersection)</span><br><span class="line"><span class="comment">// [ 5, 'o' ]</span></span><br></pre></td></tr></table></figure></li><li><p>差集</p><blockquote><p>arrA与arrB的差集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> r = arrA.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arrB.indexOf(v) &gt; <span class="number">-1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br><span class="line"><span class="comment">// [ 'a', 3, 'd' ]</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>补集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> complementarySet = arrA</span><br><span class="line">.filter(<span class="function"><span class="params">v</span> =&gt;</span> !(arrB.indexOf(v) &gt; <span class="number">-1</span>))</span><br><span class="line">.concat(arrB.filter(<span class="function"><span class="params">v</span> =&gt;</span> !(arrA.indexOf(v) &gt; <span class="number">-1</span>)))</span><br><span class="line"><span class="built_in">console</span>.log(complementarySet) </span><br><span class="line"><span class="comment">// [ 'a', 3, 'd', 'b', 'x', 'g', 'b' ]</span></span><br></pre></td></tr></table></figure></li><li><p>并集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unionSet = arrA.concat(arrB.filter(<span class="function"><span class="params">v</span> =&gt;</span> !(arrA.indexOf(v) &gt; <span class="number">-1</span>)))</span><br><span class="line"><span class="built_in">console</span>.log(unionSet)</span><br><span class="line"><span class="comment">// [ 'a', 3, 5, 'd', 'o', 'b', 'x', 'g', 'b' ]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><ul><li>数据<br>let arrA = [‘a’, 3, 5, ‘d’, ‘o’]<br>let arrB = [‘b’, 5, ‘o’, ‘x’, ‘g’, ‘b’]<h4 id="filter-Set-has"><a href="#filter-Set-has" class="headerlink" title="filter+Set+has"></a>filter+Set+has</h4></li><li><p>交集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> intersection = arrA.filter(<span class="function"><span class="params">x</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(arrB).has(x))</span><br><span class="line"><span class="built_in">console</span>.log(intersection)</span><br><span class="line"><span class="comment">// [ 5, 'o' ]</span></span><br></pre></td></tr></table></figure></li><li><p>差集</p><blockquote><p>arrA与arrB的差集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> diffSet = arrA.filter(<span class="function"><span class="params">x</span> =&gt;</span> !<span class="keyword">new</span> <span class="built_in">Set</span>(arrB).has(x))</span><br><span class="line"><span class="built_in">console</span>.log(diffSet)</span><br><span class="line"><span class="comment">// [ 'a', 3, 'd' ]</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>补集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> complementarySet = [...arrA.filter(<span class="function"><span class="params">x</span> =&gt;</span> !<span class="keyword">new</span> <span class="built_in">Set</span>(arrB).has(x)), ...arrB.filter(<span class="function"><span class="params">x</span> =&gt;</span> !<span class="keyword">new</span> <span class="built_in">Set</span>(arrA).has(x))]</span><br><span class="line"><span class="built_in">console</span>.log(complementarySet)</span><br><span class="line"><span class="comment">// [ 'a', 3, 'd', 'b', 'x', 'g', 'b' ]</span></span><br></pre></td></tr></table></figure></li><li><p>并集</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unionSet = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...arrA, ...arrB]))</span><br><span class="line"><span class="built_in">console</span>.log(unionSet)</span><br><span class="line"><span class="comment">// [ 'a', 3, 5, 'd', 'o', 'b', 'x', 'g' ]</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;选择语言对的时候，源语言和目标语言选项要互斥。由此联想到交集、差集、补集、并集的JS如何实现。本文小结ES5和ES6的一些实现方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0sbwcn19kj20dw07tab1.jpg&quot; alt=&quot;Photo by Ant Rozetsky on Unsplash&quot;&gt;&lt;br&gt;[Photo by Ant Rozetsky on Unsplash]&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day52-理由-太忙</title>
    <link href="http://lmislm.com/2019/03/04/2019-03-04/"/>
    <id>http://lmislm.com/2019/03/04/2019-03-04/</id>
    <published>2019-03-03T16:00:00.000Z</published>
    <updated>2019-03-04T14:33:30.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天有事，写了一整天的代码！这个就不能怪我忘了选博客内容了！理由是本来想提交代码的，结果忘了push代码，所以今天没有一个正经的博客内容。这是第六个理由！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0r4x4nmnpj20e909gdg0.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天有事，写了一整天的代码！这个就不能怪我忘了选博客内容了！理由是本来想提交代码的，结果忘了push代码，所以今天没有一个正经的博客内容。这是第六个理由！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0r4x4nmnpj20e909gdg0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day51-理由-懒惰</title>
    <link href="http://lmislm.com/2019/03/03/2019-03-03/"/>
    <id>http://lmislm.com/2019/03/03/2019-03-03/</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-03-03T14:04:37.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天忘了提交代码了，所以这里没有小总结！而且今天加班一天！写了一天的代码！至此，头一次，达成连续两天周末加班成就！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0pyfy9h2sj20dw0990t7.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天忘了提交代码了，所以这里没有小总结！而且今天加班一天！写了一天的代码！至此，头一次，达成连续两天周末加班成就！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0pyfy9h2sj20dw0990t7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day50-清除浮动</title>
    <link href="http://lmislm.com/2019/03/02/2019-03-02/"/>
    <id>http://lmislm.com/2019/03/02/2019-03-02/</id>
    <published>2019-03-01T16:00:00.000Z</published>
    <updated>2019-03-02T14:42:47.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>慢慢的开始把一些最基础的知识点记下来。<br>清除浮动的两种方法。overflow和伪类after。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0otxzhjpmj20dw0990t9.jpg" alt=""><br><a id="more"></a></p><h3 id="css-float-hack"><a href="#css-float-hack" class="headerlink" title="css-float-hack"></a>css-float-hack</h3><ul><li>结构<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-container clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float:right;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>目前有两种方法清除浮动</p><h4 id="方法一-overflow"><a href="#方法一-overflow" class="headerlink" title="方法一 overflow"></a>方法一 overflow</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix &#123;</span><br><span class="line">    overflow: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制不好margins 和padding 就会出现scrollbars</p><h4 id="方法二-after"><a href="#方法二-after" class="headerlink" title="方法二 ::after"></a>方法二 ::after</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix::after &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    clear: both;</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法比较常用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;慢慢的开始把一些最基础的知识点记下来。&lt;br&gt;清除浮动的两种方法。overflow和伪类after。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0otxzhjpmj20dw0990t9.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day49-理由-没周末</title>
    <link href="http://lmislm.com/2019/03/01/2019-03-01/"/>
    <id>http://lmislm.com/2019/03/01/2019-03-01/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-03-01T15:10:35.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天真的是不知道为啥，提不起一点劲。可能是最近事情比较多吧。这个月开始，一个月都没周末，唉！回到家就只想看点视频什么。看到了B站的《西游记之大圣归来》。真的是蛮精彩！强烈推荐。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0np2k8thbj21ar0k6kjm.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天真的是不知道为啥，提不起一点劲。可能是最近事情比较多吧。这个月开始，一个月都没周末，唉！回到家就只想看点视频什么。看到了B站的《西游记之大圣归来》。真的是蛮精彩！强烈推荐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0np2k8thbj21ar0k6kjm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day48-GitError</title>
    <link href="http://lmislm.com/2019/02/28/2019-02-28/"/>
    <id>http://lmislm.com/2019/02/28/2019-02-28/</id>
    <published>2019-02-27T16:00:00.000Z</published>
    <updated>2019-02-28T15:24:48.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>windows的电脑端ss开的局部代理，hosts经常有时会被莫名其妙的修改。这次就比较奇怪了，git连不上github.com显示connect error。以为密钥什么的错误，之后才意识到可能是hosts的问题。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0mjt48d6dj20dw07taa4.jpg" alt=""></p><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 </p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>进到.ssh目录</li></ul><blockquote><p>cd ~/.ssh/<br>touch config</p></blockquote><ul><li>将下面内容添加到config(非注释部分)</li></ul><blockquote><p>Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443</p></blockquote><p>就ok了！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;windows的电脑端ss开的局部代理，hosts经常有时会被莫名其妙的修改。这次就比较奇怪了，git连不上github.com显示connect error。以为密钥什么的错误，之后才意识到可能是hosts的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0mjt48d6dj20dw07taa4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://lmislm.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>day48-理由4-忙碌</title>
    <link href="http://lmislm.com/2019/02/27/2019-02-27/"/>
    <id>http://lmislm.com/2019/02/27/2019-02-27/</id>
    <published>2019-02-26T16:00:00.000Z</published>
    <updated>2019-02-28T15:24:59.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天又是一个死循环的一天。总结下今天，碰到一个问题，不去深究其中内因。不断地去尝试，试错。嗯，典型的不过脑子了。典型的不能很好地冷静下来。下次碰到问题一定把不能莽撞，一定要冷静下来，要冷静地好好想想，冷静地理一下，才不会浪费时间毫无头绪。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0lcl2azcgj20dw099aab.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天又是一个死循环的一天。总结下今天，碰到一个问题，不去深究其中内因。不断地去尝试，试错。嗯，典型的不过脑子了。典型的不能很好地冷静下来。下次碰到问题一定把不能莽撞，一定要冷静下来，要冷静地好好想想，冷静地理一下，才不会浪费时间毫无头绪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0lcl2azcgj20dw099aab.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day47-多选过滤</title>
    <link href="http://lmislm.com/2019/02/26/2019-02-26/"/>
    <id>http://lmislm.com/2019/02/26/2019-02-26/</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-02-28T15:24:55.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天有个需求，select下拉框中可以选中多个标签，并将这些标签作为过滤条件。以往都是单条件下拉框过滤，现在需要选择框中有多个选择条件，而且这个条件是动态变化。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0k7nwlo2cj20dw0993zs.jpg" alt=""></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"1"</span>, <span class="string">"3"</span>]</span><br><span class="line"><span class="comment">// 数据源</span></span><br><span class="line"><span class="keyword">let</span> data = [&#123; <span class="attr">state</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">state</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">state</span>: <span class="number">3</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> d = data.filter(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.every(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    k = v.state</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(k.toString()) !== <span class="number">-1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(arr.every(v =&gt; v === 1))</span></span><br><span class="line"><span class="built_in">console</span>.log(d)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.prototype.filter()</a><br>[2]. <a href="https://segmentfault.com/q/1010000012735768" target="_blank" rel="noopener">JS 对象数组根据多个条件过滤</a><br>[3]. <a href="https://juejin.im/post/5bc44a71e51d450e935caa11" target="_blank" rel="noopener">JS中的数组过滤，从简单筛选到多条件筛选</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;今天有个需求，select下拉框中可以选中多个标签，并将这些标签作为过滤条件。以往都是单条件下拉框过滤，现在需要选择框中有多个选择条件，而且这个条件是动态变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0k7nwlo2cj20dw0993zs.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day46-理由-心累</title>
    <link href="http://lmislm.com/2019/02/25/2019-02-25/"/>
    <id>http://lmislm.com/2019/02/25/2019-02-25/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-02-25T14:15:27.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>哇，最近移动端项目遇到了瓶颈，感觉有点心累啊！脑海里其他技术之外的事情又不停的在绕圈圈。哇咔咔~专心点吧！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0j129rb39j211i0p0jvy.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;哇，最近移动端项目遇到了瓶颈，感觉有点心累啊！脑海里其他技术之外的事情又不停的在绕圈圈。哇咔咔~专心点吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0j129rb39j211i0p0jvy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day45-闭包的小例子</title>
    <link href="http://lmislm.com/2019/02/24/2019-02-24/"/>
    <id>http://lmislm.com/2019/02/24/2019-02-24/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-24T13:04:02.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h3><p>在平时运用中，闭包用的比较多的还是对于函数或者变量的封装。本文借鉴一个小例子，示范闭包的应用。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0htblls4wj207s09gwey.jpg" alt=""><br><a id="more"></a></p><h3 id="原函数"><a href="#原函数" class="headerlink" title="原函数"></a>原函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="封装变量-1"><a href="#封装变量-1" class="headerlink" title="封装变量"></a>封装变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = &#123;&#125; <span class="comment">// 注意是全局变量</span></span><br><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[args]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=='</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cache[args] = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="优化全局变量"><a href="#优化全局变量" class="headerlink" title="优化全局变量"></a>优化全局变量</h3><ul><li><p>很错误的方法啊！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[args]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=='</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cache[args] = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li><li><p>正确方法之一</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args] = a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'++'</span>)</span><br><span class="line">    <span class="keyword">return</span> cache[args] = calculate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>以上就是我要说的话了，show code.<br>–end </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;封装变量&quot;&gt;&lt;a href=&quot;#封装变量&quot; class=&quot;headerlink&quot; title=&quot;封装变量&quot;&gt;&lt;/a&gt;封装变量&lt;/h3&gt;&lt;p&gt;在平时运用中，闭包用的比较多的还是对于函数或者变量的封装。本文借鉴一个小例子，示范闭包的应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0htblls4wj207s09gwey.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day44-bind</title>
    <link href="http://lmislm.com/2019/02/23/2019-02-23/"/>
    <id>http://lmislm.com/2019/02/23/2019-02-23/</id>
    <published>2019-02-22T16:00:00.000Z</published>
    <updated>2019-02-24T13:02:55.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bind的简单实现"><a href="#bind的简单实现" class="headerlink" title="bind的简单实现"></a>bind的简单实现</h3><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0glwe06b2j20e609gwex.jpg" alt=""></p><h4 id="最基本的"><a href="#最基本的" class="headerlink" title="最基本的"></a>最基本的</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  id: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">&#125;).bind(obj)</span><br><span class="line">func()</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="基本的PLUS"><a href="#基本的PLUS" class="headerlink" title="基本的PLUS"></a>基本的PLUS</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span> <span class="comment">// 原函数</span></span><br><span class="line">  <span class="keyword">let</span> context = [].shift.call(<span class="built_in">arguments</span>) <span class="comment">// this 上下文</span></span><br><span class="line">  <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>) <span class="comment">// 剩余参数转化成数组</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))) <span class="comment">// 组合分别传入的参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  id: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d])</span><br><span class="line">&#125;.bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p>–end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;bind的简单实现&quot;&gt;&lt;a href=&quot;#bind的简单实现&quot; class=&quot;headerlink&quot; title=&quot;bind的简单实现&quot;&gt;&lt;/a&gt;bind的简单实现&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15
      
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
