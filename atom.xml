<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>不积小流，无以成江海。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmislm.com/"/>
  <updated>2019-02-25T14:15:27.567Z</updated>
  <id>http://lmislm.com/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day46-理由-心累</title>
    <link href="http://lmislm.com/2019/02/25/2019-02-25/"/>
    <id>http://lmislm.com/2019/02/25/2019-02-25/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-02-25T14:15:27.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>哇，最近移动端项目遇到了瓶颈，感觉有点心累啊！脑海里其他技术之外的事情又不停的在绕圈圈。哇咔咔~专心点吧！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0j129rb39j211i0p0jvy.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;哇，最近移动端项目遇到了瓶颈，感觉有点心累啊！脑海里其他技术之外的事情又不停的在绕圈圈。哇咔咔~专心点吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0j129rb39j211i0p0jvy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day45-闭包的小例子</title>
    <link href="http://lmislm.com/2019/02/24/2019-02-24/"/>
    <id>http://lmislm.com/2019/02/24/2019-02-24/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-02-24T13:04:02.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h3><p>在平时运用中，闭包用的比较多的还是对于函数或者变量的封装。本文借鉴一个小例子，示范闭包的应用。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0htblls4wj207s09gwey.jpg" alt=""><br><a id="more"></a></p><h3 id="原函数"><a href="#原函数" class="headerlink" title="原函数"></a>原函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="封装变量-1"><a href="#封装变量-1" class="headerlink" title="封装变量"></a>封装变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = &#123;&#125; <span class="comment">// 注意是全局变量</span></span><br><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[args]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=='</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cache[args] = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="优化全局变量"><a href="#优化全局变量" class="headerlink" title="优化全局变量"></a>优化全局变量</h3><ul><li><p>很错误的方法啊！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[args]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'=='</span>)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cache[args] = a</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li><li><p>正确方法之一</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (cache[args]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args] = a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>))</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>, <span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'++'</span>)</span><br><span class="line">    <span class="keyword">return</span> cache[args] = calculate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>以上就是我要说的话了，show code.<br>–end </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;封装变量&quot;&gt;&lt;a href=&quot;#封装变量&quot; class=&quot;headerlink&quot; title=&quot;封装变量&quot;&gt;&lt;/a&gt;封装变量&lt;/h3&gt;&lt;p&gt;在平时运用中，闭包用的比较多的还是对于函数或者变量的封装。本文借鉴一个小例子，示范闭包的应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0htblls4wj207s09gwey.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day44-bind</title>
    <link href="http://lmislm.com/2019/02/23/2019-02-23/"/>
    <id>http://lmislm.com/2019/02/23/2019-02-23/</id>
    <published>2019-02-22T16:00:00.000Z</published>
    <updated>2019-02-24T13:02:55.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bind的简单实现"><a href="#bind的简单实现" class="headerlink" title="bind的简单实现"></a>bind的简单实现</h3><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0glwe06b2j20e609gwex.jpg" alt=""></p><h4 id="最基本的"><a href="#最基本的" class="headerlink" title="最基本的"></a>最基本的</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  id: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">&#125;).bind(obj)</span><br><span class="line">func()</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="基本的PLUS"><a href="#基本的PLUS" class="headerlink" title="基本的PLUS"></a>基本的PLUS</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span> <span class="comment">// 原函数</span></span><br><span class="line">  <span class="keyword">let</span> context = [].shift.call(<span class="built_in">arguments</span>) <span class="comment">// this 上下文</span></span><br><span class="line">  <span class="keyword">let</span> args = [].slice.call(<span class="built_in">arguments</span>) <span class="comment">// 剩余参数转化成数组</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))) <span class="comment">// 组合分别传入的参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  id: <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d])</span><br><span class="line">&#125;.bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">func(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p>–end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;bind的简单实现&quot;&gt;&lt;a href=&quot;#bind的简单实现&quot; class=&quot;headerlink&quot; title=&quot;bind的简单实现&quot;&gt;&lt;/a&gt;bind的简单实现&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15
      
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day43-理由-陪聊</title>
    <link href="http://lmislm.com/2019/02/22/2019-02-22/"/>
    <id>http://lmislm.com/2019/02/22/2019-02-22/</id>
    <published>2019-02-21T16:00:00.000Z</published>
    <updated>2019-02-22T15:15:24.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>一个妹子突然找我，聊家事。聊了快一晚上了。感叹，不容易啊！家庭不容易啊！不容易啊！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0flxn3gppj20u01hcdji.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;一个妹子突然找我，聊家事。聊了快一晚上了。感叹，不容易啊！家庭不容易啊！不容易啊！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0flxn3gppj20u01hcdji.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day42-理由-评审</title>
    <link href="http://lmislm.com/2019/02/21/2019-02-21/"/>
    <id>http://lmislm.com/2019/02/21/2019-02-21/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2019-02-21T14:14:58.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>居然说，3月份要没有周末，吓死我了！因为项目说是很急，我看项目量也不小啊！吓人吓人。今天评审时间就用了很久，5点到晚上7点半，之后8点到9点，吓人啊。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;居然说，3月份要没有周末，吓死我了！因为项目说是很急，我看项目量也不小啊！吓人吓人。今天评审时间就用了很久，5点到晚上7点半，之后8点到9点，吓人啊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day41-“练字”-&quot;debouncejs&quot;</title>
    <link href="http://lmislm.com/2019/02/20/2019-02-20/"/>
    <id>http://lmislm.com/2019/02/20/2019-02-20/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-02-20T14:25:54.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h3><p>本文主要是临摹Lodashjs中debouncejs源代码。对一部分细节进行了解，代码中会附上链接并写中文注释。分为两部分：loadsh-debounce是来自官方v4.17.5文档的解释。源代码是来自官方github上的代码，日期为2019-2-20之前。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg" alt=""><br><a id="more"></a></p><h3 id="lodash-debounce"><a href="#lodash-debounce" class="headerlink" title="lodash-debounce"></a>lodash-debounce</h3><ul><li><strong>背景</strong><br><code>_.debounce(func, [wait=0], [options={}])</code></li><li><p><strong>描述</strong><br>Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since the last time the debounced function was invoked. The debounced function comes with a cancel method to cancel delayed func invocations and a flush method to immediately invoke them. Provide options to indicate whether func should be invoked on the leading and/or trailing edge of the wait timeout. The func is invoked with the last arguments provided to the debounced function. Subsequent calls to the debounced function return the result of the last func invocation. </p></li><li><p><strong>Note:</strong><br>If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if the debounced function is invoked more than once during the wait timeout.<br>If wait is 0 and leading is false, func invocation is deferred until to the next tick, similar to setTimeout with a timeout of 0. </p></li><li><strong>Arguments</strong><br><code>func (Function):</code> The function to debounce.<br><code>[wait=0] (number):</code> The number of milliseconds to delay.<br><code>[options={}] (Object):</code> The options object.<br><code>[options.leading=false] (boolean):</code> Specify invoking on the leading edge of the timeout.<br><code>[options.maxWait] (number):</code> The maximum time func is allowed to be delayed before it’s invoked.<br><code>[options.trailing=true] (boolean):</code> Specify invoking on the trailing edge of the timeout.</li><li><strong>Returns</strong><br><code>(Function):</code> Returns the new debounced function.</li></ul><h3 id="源代码-加一些解析"><a href="#源代码-加一些解析" class="headerlink" title="源代码-加一些解析"></a>源代码-加一些解析</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * lodash 中的debounce实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 常量 */</span></span><br><span class="line"><span class="comment">/** lodash https://github.com/lodash/lodash/blob/master/.internal/freeGlobal.js */</span></span><br><span class="line"><span class="comment">/** Detect free variable `global` from Node.js. */</span></span><br><span class="line"><span class="keyword">const</span> freeGlobal = <span class="keyword">typeof</span> global == <span class="string">'object'</span> &amp;&amp; global !== <span class="literal">null</span> &amp;&amp; global.Object === <span class="built_in">Object</span> &amp;&amp; global</span><br><span class="line"><span class="comment">/** lodash https://github.com/lodash/lodash/blob/master/.internal/root.js */</span></span><br><span class="line"><span class="comment">/** Detect free variable `self`. */</span></span><br><span class="line"><span class="keyword">const</span> freeSelf = <span class="keyword">typeof</span> self == <span class="string">'object'</span> &amp;&amp; self !== <span class="literal">null</span> &amp;&amp; self.Object === <span class="built_in">Object</span> &amp;&amp; self</span><br><span class="line"><span class="comment">/** Used as a reference to the global object. */</span></span><br><span class="line"><span class="keyword">const</span> root = freeGlobal || freeSelf || <span class="built_in">Function</span>(<span class="string">'return this'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 判断对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">'object'</span> || type == <span class="string">'function'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** debounce */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastArgs, lastThis, maxWait, result, timerId, lastCallTime</span><br><span class="line">  <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> leading = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> maxing = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> trailing = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Bypass `requestAnimationFrame` by explicitly setting `wait=0`.</span></span><br><span class="line">  <span class="comment">// 注意(!wait &amp;&amp; wait)写法,通过``明确设置wait=0</span></span><br><span class="line">  <span class="comment">// requestAnimationFrame接受一个动画执行函数作为参数，这个函数的作用是仅执行一帧动画的渲染。回调函数会在浏览器下一次重绘之前执行</span></span><br><span class="line">  <span class="comment">//     requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧</span></span><br><span class="line">  <span class="comment">// 在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。</span></span><br><span class="line">  <span class="comment">// 调用requestAnimationFrame后，它会要求浏览器根据自己的频率进行一次重绘，它接收一个回调函数作为参数，在即将开始的浏览器重绘时，会调用这个函数，并会给这个函数传入调用回调函数时的时间作为参数。由于requestAnimationFrame的功效只是一次性的，所以若想达到动画效果，则必须连续不断的调用requestAnimationFrame</span></span><br><span class="line">  <span class="comment">// cancelAnimationFrame 取消requestAnimationFrame的回调</span></span><br><span class="line">  <span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame</span></span><br><span class="line">  <span class="keyword">const</span> useRAF = (!wait &amp;&amp; wait !== <span class="number">0</span> &amp;&amp; <span class="keyword">typeof</span> root.requestAnimationFrame === <span class="string">'Function'</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> func !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Exception a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一元正号将字符串转换成整数和浮点数形式，转换非字符串值 true，false 和 null,小数和十六进制格式字符串。</span></span><br><span class="line">  <span class="comment">// 负数形式字符串也可以转换成数值（对于十六进制不适用）。如果它不能解析一个值，则计算结果为 NaN。</span></span><br><span class="line">  wait = +wait || <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (isObject(options)) &#123;</span><br><span class="line">    leading = !!options.leading</span><br><span class="line">    maxing = <span class="string">'maxWait'</span> <span class="keyword">in</span> options</span><br><span class="line">    maxWait = maxing ? <span class="built_in">Math</span>.max(+options.maxWait || <span class="number">0</span>, wait) : maxWait</span><br><span class="line">    trailing = <span class="string">'trailing'</span> <span class="keyword">in</span> options ? !!options.trailing : trailing</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeFunc</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = lastArgs</span><br><span class="line">    <span class="keyword">const</span> thisArg = lastThis</span><br><span class="line"></span><br><span class="line">    lastArgs = lastThis = <span class="literal">undefined</span></span><br><span class="line">    lastInvokeTime = time</span><br><span class="line">    result = func.apply(thisArg, args)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定时器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params">pendingFunc, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (useRAF) &#123;</span><br><span class="line">      root.cancelAnimationFrame(pendingFunc)</span><br><span class="line">      <span class="keyword">return</span> root.requestAnimationFrame(pendingFunc)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setTimeout(pendingFunc, wait)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取消定时器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cancelTimer</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (useRAF) &#123;</span><br><span class="line">      <span class="keyword">return</span> root.cancelAnimationFrame(id)</span><br><span class="line">    &#125;</span><br><span class="line">    clearTimeout(id)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 函数在每个等待时延的开始被调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leadingEdge</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Reset any `maxWait` timer</span></span><br><span class="line">    <span class="comment">// 重置最长等待定时器</span></span><br><span class="line">    lastInvokeTime = time</span><br><span class="line">    <span class="comment">// Start the timer for the trailing edge.</span></span><br><span class="line">    <span class="comment">// 开启？？定时器</span></span><br><span class="line">    timerId = startTimer(timerExpired, wait)</span><br><span class="line">    <span class="comment">// Invoke the leading edge</span></span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    <span class="keyword">return</span> leading ? invokeFunc(time) : result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">remainingWait</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime</span><br><span class="line">    <span class="keyword">const</span> timeWaiting = wait - timeSinceLastCall</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxing</span><br><span class="line">      ? <span class="built_in">Math</span>.min(timeWaiting, maxWait - timeSinceLastInvoke)</span><br><span class="line">      : timeWaiting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shouldInvoke</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime</span><br><span class="line">    <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Either this is the first call, activity has stopped and we're at the</span></span><br><span class="line">    <span class="comment">// trailing edge, the system time has gone backwards and we're treating</span></span><br><span class="line">    <span class="comment">// it as the trailing edge, or we've hit the `maxWait` limit.</span></span><br><span class="line">    <span class="keyword">return</span> (lastCallTime === <span class="literal">undefined</span> || (timeSinceLastCall &gt;= wait) ||</span><br><span class="line">      (timeSinceLastCall &lt; <span class="number">0</span>) || (maxing &amp;&amp; timeSinceLastInvoke &gt;= maxWait))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">timerExpired</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">if</span> (shouldInvoke(time)) &#123;</span><br><span class="line">      <span class="keyword">return</span> trailingEdge(time)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Restart the timer.</span></span><br><span class="line">    timerId = startTimer(timerExpired, remainingWait(time))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">trailingEdge</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    timerId = <span class="literal">undefined</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// only invoke if we have `lastArgs` which means `func has been debounced at least once</span></span><br><span class="line">    <span class="keyword">if</span> (trailing &amp;&amp; lastArgs) &#123;</span><br><span class="line">      <span class="keyword">return</span> invokeFunc(time)</span><br><span class="line">    &#125;</span><br><span class="line">    lastArgs = lastThis = <span class="literal">undefined</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cancel</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timerId !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      cancelTimer(timerId)</span><br><span class="line">    &#125;</span><br><span class="line">    lastInvokeTime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    lastArgs = lastCallTime = lastThis = timerId = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 立即执行</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flush</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timerId === <span class="literal">undefined</span> ? result : trailingEdge(Data.now())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pending</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timerId !== <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time = <span class="built_in">Date</span>.now()</span><br><span class="line">    <span class="keyword">const</span> isInvoking = shouldInvoke(time)</span><br><span class="line"></span><br><span class="line">    lastArgs = args</span><br><span class="line">    lastThis = <span class="keyword">this</span></span><br><span class="line">    lastCallTime = time</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isInvoking) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> leadingEdge(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (maxing) &#123;</span><br><span class="line">        <span class="comment">// Handle invocations in a tight loop.</span></span><br><span class="line">        <span class="comment">// 多循环中处理调用</span></span><br><span class="line">        timerId = startTimer(timerExpired, wait)</span><br><span class="line">        <span class="keyword">return</span> invokeFunc(lastCallTime)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timerId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      timerId = startTimer(timerExpired, wait)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.cancel = cancel</span><br><span class="line">  debounced.flush = flush</span><br><span class="line">  debounced.pending = pending</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p>附上Lodashjs文档中一篇资料来解释防抖和节流。<br>debouncing-throttling-explained-examples <a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="noopener">https://css-tricks.com/debouncing-throttling-explained-examples/</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/lodash/lodash/blob/master/debounce.js" target="_blank" rel="noopener">github源代码-lodash/debounce.js</a><br><a href="https://www.lodashjs.com/docs/4.17.5.html#debounce" target="_blank" rel="noopener">文档-_.debounce(func, [wait=0], [options={}])</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;debounce&quot;&gt;&lt;a href=&quot;#debounce&quot; class=&quot;headerlink&quot; title=&quot;debounce&quot;&gt;&lt;/a&gt;debounce&lt;/h3&gt;&lt;p&gt;本文主要是临摹Lodashjs中debouncejs源代码。对一部分细节进行了解，代码中会附上链接并写中文注释。分为两部分：loadsh-debounce是来自官方v4.17.5文档的解释。源代码是来自官方github上的代码，日期为2019-2-20之前。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day40-“繁忙”</title>
    <link href="http://lmislm.com/2019/02/19/2019-02-19/"/>
    <id>http://lmislm.com/2019/02/19/2019-02-19/</id>
    <published>2019-02-18T16:00:00.000Z</published>
    <updated>2019-02-19T14:02:00.581Z</updated>
    
    <content type="html"><![CDATA[<p>今天元宵节，“猿宵节”啊！节日快乐！<br>其实今天是项目这边有点忙，没有写完编程日志，恰巧元宵节，所以这就是我不好好写日志的理由，哈哈。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0c2x0jsbmj21400u0wiq.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天元宵节，“猿宵节”啊！节日快乐！&lt;br&gt;其实今天是项目这边有点忙，没有写完编程日志，恰巧元宵节，所以这就是我不好好写日志的理由，哈哈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0c2x0jsbmj21400u0wiq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day39-做题</title>
    <link href="http://lmislm.com/2019/02/18/2019-02-18/"/>
    <id>http://lmislm.com/2019/02/18/2019-02-18/</id>
    <published>2019-02-17T16:00:00.000Z</published>
    <updated>2019-02-19T13:49:55.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="built_in">parseInt</span>))</span><br><span class="line"><span class="comment">// 输出什么？</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqxne9j20u01hcgo2.jpg" alt=""><br><a id="more"></a></p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[ <span class="number">1</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span> ]</span><br></pre></td></tr></table></figure><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><ul><li>这个应该是考<code>map语法</code>、<code>进制转换</code>和<code>parseInt语法</code></li></ul><h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><ul><li>parseInt(string, radix) - radix - 根 - （基数）范围：[2, 36]</li><li>string 要被解析的值，无法被转化成数值类型，则返回NaN</li></ul><h4 id="代码扩展"><a href="#代码扩展" class="headerlink" title="代码扩展"></a>代码扩展</h4><p>实际执行的代码是：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">parseInt</span>(item, index)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="parseInt（string-radix"><a href="#parseInt（string-radix" class="headerlink" title="parseInt（string, radix)"></a>parseInt（string, radix)</h4><ul><li>radix<br>关于parseInt基数的处理(MDN)<br>基数radix为 undefined，或者基数为 0 或者没有指定的情况下，JavaScript 作如下处理：<br>如果 parseInt 遇到了不属于radix参数所指定的基数中的字符那么该字符和其后的字符都将被忽略。接着返回已经解析的整数部分。parseInt 将截取整数部分。开头和结尾的空白符允许存在，会被忽略</li><li>string<ol><li>如果字符串 string 以”0x”或者”0X”开头, 则基数是16 (16进制).</li><li>如果字符串 string 以”0”开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用10，但是并不是所有的浏览器都遵循这个规定。因此，永远都要明确给出radix参数的值。</li><li>如果字符串 string 以其它任何值开头，则基数是10 (十进制)。</li></ol></li></ul><h3 id="解决（延伸）"><a href="#解决（延伸）" class="headerlink" title="解决（延伸）"></a>解决（延伸）</h3><p>目前掌握的可能有两种方法：</p><ul><li>方法一：利用<code>函数柯里化</code>来取map的数组index为0时的值，因为默认为10进制。</li><li>方法二：利用<code>Number</code>。<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unary = <span class="function"><span class="params">fn</span> =&gt;</span> val =&gt; fn(val)</span><br><span class="line"><span class="keyword">let</span> parse = unary(<span class="built_in">parseInt</span>)</span><br><span class="line"><span class="keyword">let</span> res_0 = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(parse)</span><br><span class="line"><span class="built_in">console</span>.log(res_0)</span><br></pre></td></tr></table></figure></li></ul><p>来自 <a href="https://30secondsofcode.org/adapter" target="_blank" rel="noopener">30secondsofcode</a>的<code>unary</code>方法。</p><ul><li>let unary = fn =&gt; val =&gt; fn(val) 等价于下面<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unary_1</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> fn(val)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>let res_1 = [‘10’,’10’,’10’,’8’,’10’].map(Number)<br>console.log(res_1)<br>来自<a href="https://github.com/sisterAn/blog/issues/19" target="_blank" rel="noopener">[‘1’, ‘2’, ‘3’].map(parseInt) what &amp; why ? </a></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>console.log(parseInt(1, 2))</li><li>console.log(parseInt(5, 4))</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1]. <a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/4" target="_blank" rel="noopener">第二题：[‘1’, ‘2’, ‘3’].map(parseInt) 解析</a><br>[2]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.prototype.map()</a><br>[3]. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt" target="_blank" rel="noopener">parseInt</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;].map(&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqxne9j20u01hcgo2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day38-“摸鱼”</title>
    <link href="http://lmislm.com/2019/02/17/2019-02-17/"/>
    <id>http://lmislm.com/2019/02/17/2019-02-17/</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2019-02-17T13:44:44.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>摸了一天的鱼，昨天还是说要看书一天，结果今天中午才起来啊。然后一下午就是光玩儿了。到了晚上才看一会儿书。罪过罪过啊。看书看书！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqqe7qj20u01hcn1x.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;摸了一天的鱼，昨天还是说要看书一天，结果今天中午才起来啊。然后一下午就是光玩儿了。到了晚上才看一会儿书。罪过罪过啊。看书看书！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqqe7qj20u01hcn1x.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day37-杂谈</title>
    <link href="http://lmislm.com/2019/02/16/2019-02-16/"/>
    <id>http://lmislm.com/2019/02/16/2019-02-16/</id>
    <published>2019-02-15T16:00:00.000Z</published>
    <updated>2019-02-16T13:20:22.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>三天打鱼两天晒网，可能说的就是我写博客的状态没错了。今天是周末，待着一天，上午看电影，下午玩游戏，一点书都没看的人就是我了。明天看书！看书！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqiip3j20u01hcjw6.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;三天打鱼两天晒网，可能说的就是我写博客的状态没错了。今天是周末，待着一天，上午看电影，下午玩游戏，一点书都没看的人就是我了。明天看书！看书！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g08kvqiip3j20u01hcjw6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day36-杂谈</title>
    <link href="http://lmislm.com/2019/02/15/2019-02-15/"/>
    <id>http://lmislm.com/2019/02/15/2019-02-15/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2019-02-16T13:21:05.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天是考研成绩出来的一天。恍恍惚惚，一年前的这个时候我还在过年，恍惚间一年已经过了。早上七点就醒了，不知道这有没有什么关系，但重要的是一年前的这个时候，我一晚上没睡着，结果第二天这个时候，消息并没有那么好。这都是一年前的事情了。谈一谈吧。这两天在做移动端的支付宝支付。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aijcid1j20u01hcwhm.jpg" alt=""><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天是考研成绩出来的一天。恍恍惚惚，一年前的这个时候我还在过年，恍惚间一年已经过了。早上七点就醒了，不知道这有没有什么关系，但重要的是一年前的这个时候，我一晚上没睡着，结果第二天这个时候，消息并没有那么好。这都是一年前的事情了。谈一谈吧。这两天在做移动端的支付宝支付。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g06aijcid1j20u01hcwhm.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day35-杂谈</title>
    <link href="http://lmislm.com/2019/02/14/2019-02-14/"/>
    <id>http://lmislm.com/2019/02/14/2019-02-14/</id>
    <published>2019-02-13T16:00:00.000Z</published>
    <updated>2019-02-14T13:50:40.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>发现要是女生和代码一样容易理解就好了，出错的几率也太大了。因为你费劲输入一大堆代码，最后错都不会报，根本不知道会不会运行。<br>衰(′д｀ )…彡…彡<br>有时候有些人你付出，更本就不会有任何反应。世事难料啊。情人节快乐！<br>祝你们原地爆炸！</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg" alt=""><br>-end<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;发现要是女生和代码一样容易理解就好了，出错的几率也太大了。因为你费劲输入一大堆代码，最后错都不会报，根本不知道会不会运行。&lt;br&gt;衰(′д｀ )…彡…彡&lt;br&gt;有时候有些人你付出，更本就不会有任何反应。世事难料啊。情人节快乐！&lt;br&gt;祝你们原地爆炸！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g06aij5xjkj20u01hc0yq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;-end&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>day34-deepClone</title>
    <link href="http://lmislm.com/2019/02/13/2019-02-13/"/>
    <id>http://lmislm.com/2019/02/13/2019-02-13/</id>
    <published>2019-02-12T16:00:00.000Z</published>
    <updated>2019-02-13T14:07:09.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><p>探究一下深拷贝，本文主要是浅拷贝、深拷贝的简单实现，并对循环引用就行一些了解。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g0555oglhej20u01hcdkz.jpg" alt=""><br><a id="more"></a></p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  id: <span class="string">'1'</span>,</span><br><span class="line">  segment: &#123;</span><br><span class="line">    hitinfos: &#123;</span><br><span class="line">      <span class="comment">// 浅拷贝时rule为rule: [Object]</span></span><br><span class="line">      rule: &#123;</span><br><span class="line">        a: <span class="string">'no-placeholder'</span>,</span><br><span class="line">        b: <span class="string">'no-tag'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      level: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    atoms: [</span><br><span class="line">      &#123; <span class="attr">tgt</span>: <span class="string">'you dont know'</span>, <span class="attr">src</span>: <span class="string">'你不知道'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">tgt</span>: <span class="string">'what'</span>, <span class="attr">src</span>: <span class="string">'什么'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  arr: [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    arr: <span class="string">'arr1'</span></span><br><span class="line">  &#125;],</span><br><span class="line">  value_1: <span class="literal">undefined</span>,</span><br><span class="line">  value_2: <span class="literal">null</span>,</span><br><span class="line">  value_3: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul><li>简单的对象浅拷贝（只遍历一层）-拷贝引用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneShadow</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tgt = &#123;&#125;</span><br><span class="line">  <span class="comment">//  为什么不直接用“=”赋值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="comment">// 或者用if (Object.hasOwnProperty(prop)) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      tgt[prop] = src[prop]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = cloneShadow(data)</span><br><span class="line">data.id = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>递归对象深拷贝（遍历多层）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 非对象</span></span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; <span class="keyword">typeof</span> src !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line">    <span class="comment">// throw new TypeError('Except Object, got' + (typeof src))</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, prop)) &#123;</span><br><span class="line">      <span class="comment">// value为null或者undefined则返回原值(typeof null === 'object')</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">          tgt[prop] = deepClone(src[prop])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test_1 = deepClone(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br><span class="line"><span class="built_in">console</span>.log(data)</span><br><span class="line"><span class="built_in">console</span>.log(test_1)</span><br></pre></td></tr></table></figure></li></ul><h3 id="拷贝循环引用"><a href="#拷贝循环引用" class="headerlink" title="拷贝循环引用"></a>拷贝循环引用</h3><ul><li>拷贝循环引用（JSON方法抛异常）<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCloneCircle</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (src &amp;&amp; src !== <span class="string">'object'</span>) <span class="keyword">return</span> src</span><br><span class="line">  <span class="keyword">let</span> tgt = <span class="built_in">Array</span>.isArray(src) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(src, tgt)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (src[prop] &amp;&amp; src[prop] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        tgt[prop] = deepCloneCircle(src[prop])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tgt[prop] = src[prop]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tgt</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = deepCloneCircle(data)</span><br><span class="line"><span class="built_in">console</span>.log(test)</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>[1]. <a href="https://segmentfault.com/a/1190000008637489" target="_blank" rel="noopener">JavaScript中的浅拷贝和深拷贝</a><br>[2]. <a href="https://juejin.im/post/5c45112e6fb9a04a027aa8fe" target="_blank" rel="noopener">【进阶4-3期】面试题之如何实现一个深拷贝</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;拷贝&quot;&gt;&lt;a href=&quot;#拷贝&quot; class=&quot;headerlink&quot; title=&quot;拷贝&quot;&gt;&lt;/a&gt;拷贝&lt;/h2&gt;&lt;p&gt;探究一下深拷贝，本文主要是浅拷贝、深拷贝的简单实现，并对循环引用就行一些了解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g0555oglhej20u01hcdkz.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day33-css居中</title>
    <link href="http://lmislm.com/2019/02/12/2019-02-12/"/>
    <id>http://lmislm.com/2019/02/12/2019-02-12/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-13T14:04:17.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="居中总结"><a href="#居中总结" class="headerlink" title="居中总结"></a>居中总结</h2><p>经常会碰到一些居中的问题，这里尝试进行一些总结。分为垂直居中和水平居中。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg" alt=""><br><a id="more"></a></p><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>行内或类行内元素(inline/inline-block/inline-table/flex)：text-align: center;</li><li>块级元素： margin: 0 auto;</li><li><p>多个块级元素：display: inline-block;</p><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3></li><li>行内或类行内元素:<ul><li>单行：padding-top与padding-bottom 等值、或line-height与height 等值</li><li>多行：单行padding等值，或display: table-cell 用vertical-align：middle;</li></ul></li><li>块级元素：</li></ol><p>– 待续</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;居中总结&quot;&gt;&lt;a href=&quot;#居中总结&quot; class=&quot;headerlink&quot; title=&quot;居中总结&quot;&gt;&lt;/a&gt;居中总结&lt;/h2&gt;&lt;p&gt;经常会碰到一些居中的问题，这里尝试进行一些总结。分为垂直居中和水平居中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1g03y5yrw5ej20u01hcwi5.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>第三十二天2019-02-01</title>
    <link href="http://lmislm.com/2019/02/01/2019-02-01/"/>
    <id>http://lmislm.com/2019/02/01/2019-02-01/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-01T11:21:25.251Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近又开始关注到Nodejs了，因为在探究js的一些原理的时候，不可避免的会注意到js的一些应用场景的不同，这两天看到了一篇很好的介绍Nodejs入门的文章，<a href="https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7" target="_blank" rel="noopener">【全文】狼叔：如何正确的学习Node.js</a>。看这篇文章还是比较有感触的，文章本身结合自身的体验从Nodejs诞生以来讲到近些年的趋势，当然我觉得最准的还是属于对于React.js和Vue.js的趋势的描述。这篇文章偏向于说教，也是说给初学Nodejs的人所听的，详细的地方在于介绍了一些该看的书本，和一些练习代码的方法，比如学会Nodejs要多看一些NPM包的源码，按作者来说就是一天5个NPM包阅读。这个对我来说感触是非常深的，本人觉得是，只有真正的上手，你才能说是真的开始去掌握这门东西。我觉得文章是真的比较详细，还提供一些资料，也提出了一些问题，比如，“在变化多端的大前端背景之下，该如何精进？”。文章本身可能探讨的比较多，也探讨了，Nodejs在各类编程语言中的比较，比如和java比较的优劣。总得来说，是一篇不可多得的好文。有幸看到这种文章。看来以后还是要多看专门的社区，去浏览一些文章，增长一些见识，拓宽一些视野。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzr55r2l7vj20u0140q8k.jpg" alt=""></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;最近又开始关注到Nodejs了，因为在探究js的一些原理的时候，不可避免的会注意到js的一些应用场景的不同，这两天看到了一篇很好的介绍Nodejs入门的文章，&lt;a href=&quot;https://cnodejs.org/topic/5ab3166be7b166bb7b9eccf7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【全文】狼叔：如何正确的学习Node.js&lt;/a&gt;。看这篇文章还是比较有感触的，文章本身结合自身的体验从Nodejs诞生以来讲到近些年的趋势，当然我觉得最准的还是属于对于React.js和Vue.js的趋势的描述。这篇文章偏向于说教，也是说给初学Nodejs的人所听的，详细的地方在于介绍了一些该看的书本，和一些练习代码的方法，比如学会Nodejs要多看一些NPM包的源码，按作者来说就是一天5个NPM包阅读。这个对我来说感触是非常深的，本人觉得是，只有真正的上手，你才能说是真的开始去掌握这门东西。我觉得文章是真的比较详细，还提供一些资料，也提出了一些问题，比如，“在变化多端的大前端背景之下，该如何精进？”。文章本身可能探讨的比较多，也探讨了，Nodejs在各类编程语言中的比较，比如和java比较的优劣。总得来说，是一篇不可多得的好文。有幸看到这种文章。看来以后还是要多看专门的社区，去浏览一些文章，增长一些见识，拓宽一些视野。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzr55r2l7vj20u0140q8k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第三十一天2019-01-31</title>
    <link href="http://lmislm.com/2019/01/31/2019-01-31/"/>
    <id>http://lmislm.com/2019/01/31/2019-01-31/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="leetCode"><a href="#leetCode" class="headerlink" title="leetCode"></a>leetCode</h3><p>今天想到了Leetcode的题目，又捡起来做了一道题目。可能比较简单，就当是回忆的题目吧，以后捡起来题目都比较方便。慢慢来吧。坚持下去也好。也不是宁缺毋滥这种借口，是不存在的，还是得每天坚持写点日记，这样以后就能够进行阶段性总结，也可以看以前的东西，希望养成习惯。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b98bxyj20jg0jggml.jpg" alt=""><br><a id="more"></a></p><h3 id="Add-Two-Numbers"><a href="#Add-Two-Numbers" class="headerlink" title="Add Two Numbers"></a>Add Two Numbers</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* [<span class="number">2</span>] Add Two Numbers</span><br><span class="line">*</span><br><span class="line">* https:<span class="comment">//leetcode.com/problems/add-two-numbers/description/</span></span><br><span class="line">*</span><br><span class="line">* algorithms</span><br><span class="line">* Medium (<span class="number">30.32</span>%)</span><br><span class="line">* Total Accepted:    <span class="number">733.3</span>K</span><br><span class="line">* Total Submissions: <span class="number">2.4</span>M</span><br><span class="line">* Testcase Example:  <span class="string">'[2,4,3]\n[5,6,4]'</span></span><br><span class="line">*</span><br><span class="line">* You are given two non-empty linked lists representing two non-negative</span><br><span class="line">* integers. The digits are stored <span class="keyword">in</span> reverse order and each <span class="keyword">of</span> their nodes</span><br><span class="line">* contain a single digit. Add the two numbers and <span class="keyword">return</span> it <span class="keyword">as</span> a linked list.</span><br><span class="line">* </span><br><span class="line">* You may assume the two numbers <span class="keyword">do</span> not contain any leading zero, except the</span><br><span class="line">* number <span class="number">0</span> itself.</span><br><span class="line">* </span><br><span class="line">* Example:</span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">* Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">* Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">* Explanation: <span class="number">342</span> + <span class="number">465</span> = <span class="number">807.</span></span><br><span class="line">* </span><br><span class="line">* </span><br><span class="line">*<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h3 id="题目框架"><a href="#题目框架" class="headerlink" title="题目框架"></a>题目框架</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"> *     <span class="keyword">this</span>.val = val;</span><br><span class="line"> *     <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line"> * &#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">/</span>**</span><br><span class="line"> * @param &#123;ListNode&#125; l1</span><br><span class="line"> * @param &#123;ListNode&#125; l2</span><br><span class="line"> * @<span class="keyword">return</span> &#123;ListNode&#125;</span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">var addTwoNumbers = function(l1, l2) &#123;</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法一</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> List = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">let</span> head = List</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> carray = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span> || sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l1.val</span><br><span class="line">      l1 = l1.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">      sum = sum + l2.val</span><br><span class="line">      l2 = l2.next</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      carray = <span class="number">1</span></span><br><span class="line">      sum = sum - <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    head.next = <span class="keyword">new</span> ListNode(sum)</span><br><span class="line">    head = head.next</span><br><span class="line">    sum = carray</span><br><span class="line">    carray = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> List.next</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方法二</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// let node = null</span></span><br><span class="line">  <span class="comment">// const carray = arguments[2]</span></span><br><span class="line">  <span class="comment">// if (l1 || l2) &#123;</span></span><br><span class="line">  <span class="comment">//   // 加上进位</span></span><br><span class="line">  <span class="comment">//   const val1 = l1 ? l1.val1 : 0</span></span><br><span class="line">  <span class="comment">//   const val2 = l2 ? l2.val2 : 0</span></span><br><span class="line">  <span class="comment">//   const next1 = l1 ? l1.next : null</span></span><br><span class="line">  <span class="comment">//   const next2 = l2 ? l2.next : null</span></span><br><span class="line">  <span class="comment">//   const val = carry ? val1 + val2 + 1 : val1 + val2</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(val % 10)</span></span><br><span class="line">  <span class="comment">//   node.next = addTwoNumbers(next1, next2, val &gt;= 10)</span></span><br><span class="line">  <span class="comment">// &#125; else if (carray) &#123;</span></span><br><span class="line">  <span class="comment">//   node = new ListNode(1)</span></span><br><span class="line">  <span class="comment">//   node.next = null</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// return node</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>–end–</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetCode&quot;&gt;&lt;a href=&quot;#leetCode&quot; class=&quot;headerlink&quot; title=&quot;leetCode&quot;&gt;&lt;/a&gt;leetCode&lt;/h3&gt;&lt;p&gt;今天想到了Leetcode的题目，又捡起来做了一道题目。可能比较简单，就当是回忆的题目吧，以后捡起来题目都比较方便。慢慢来吧。坚持下去也好。也不是宁缺毋滥这种借口，是不存在的，还是得每天坚持写点日记，这样以后就能够进行阶段性总结，也可以看以前的东西，希望养成习惯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b98bxyj20jg0jggml.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="练习" scheme="http://lmislm.com/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第三十天2019-01-30</title>
    <link href="http://lmislm.com/2019/01/30/2019-01-30/"/>
    <id>http://lmislm.com/2019/01/30/2019-01-30/</id>
    <published>2019-01-29T16:00:00.000Z</published>
    <updated>2019-02-17T13:46:09.923Z</updated>
    
    <content type="html"><![CDATA[<p>上线很晚啊，今天，有点困。还是早点睡吧，这些天。今天碰到个问题。vm.$attrs传入的不识别横线方式，爷组件传入的不会自动将驼峰转为横线模式。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b945ntj20zk0k0gnj.jpg" alt=""><br>–end–<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上线很晚啊，今天，有点困。还是早点睡吧，这些天。今天碰到个问题。vm.$attrs传入的不识别横线方式，爷组件传入的不会自动将驼峰转为横线模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzp0b945ntj20zk0k0gnj.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十九天2019-01-29</title>
    <link href="http://lmislm.com/2019/01/29/2019-01-29/"/>
    <id>http://lmislm.com/2019/01/29/2019-01-29/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>刚看了下，搁置了四天没写技术文章了，好几篇只有上文，没有下文。这个毛病从写日志体现出来了，说明得改，这还说明了，写日志的好处啊，能够从记录中发现问题。可能这就是今天鸽的理由吧。这几天快接近年末了，又期待，又不期待，真是很纠结。我发现，什么时候都有很多事，看你怎么去对待，永远不会说等到没事的时候。要调整好情绪再说。此处，鸽。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fznt8ja8lbj20u01407wh.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;刚看了下，搁置了四天没写技术文章了，好几篇只有上文，没有下文。这个毛病从写日志体现出来了，说明得改，这还说明了，写日志的好处啊，能够从记录中发现问题。可能这就是今天鸽的理由吧。这几天快接近年末了，又期待，又不期待，真是很纠结。我发现，什么时候都有很多事，看你怎么去对待，永远不会说等到没事的时候。要调整好情绪再说。此处，鸽。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fznt8ja8lbj20u01407wh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十八天2019-01-28</title>
    <link href="http://lmislm.com/2019/01/28/2019-01-28/"/>
    <id>http://lmislm.com/2019/01/28/2019-01-28/</id>
    <published>2019-01-27T16:00:00.000Z</published>
    <updated>2019-01-31T14:09:36.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天回来的比较晚，可能事情比较多吧。又想起了以前的事。唉，洗洗早点睡吧。几天就这几句唠唠叨叨的话了。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzmpp0a9fgj20b40b4wi4.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;今天回来的比较晚，可能事情比较多吧。又想起了以前的事。唉，洗洗早点睡吧。几天就这几句唠唠叨叨的话了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzmpp0a9fgj20b40b4wi4.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>第二十七天2019-01-27</title>
    <link href="http://lmislm.com/2019/01/27/2019-01-27/"/>
    <id>http://lmislm.com/2019/01/27/2019-01-27/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-02-17T13:43:22.754Z</updated>
    
    <content type="html"><![CDATA[<p>今天上午看了一部动漫，B站Lex推荐的。看完之后感叹这两天动漫质量的提高，动漫三观简直不能再正，满满的正能量。这种动漫真是难怪不火。动漫名字叫《超能力少女》但是整个片并不是一部打斗片，而是一部以一位来自异世界超能力少女生活为主线另一位异世界超能力少女为辅，讲述了来到这个世界之后，两个少女面对不同的家庭之间各自的努力和奋斗故事，在女二号身上，看到了满满的正能量，与女一号富有的生活对比，个人感觉女二号的勤奋和人品更像是这部故事讲述的主题。同时，这个故事也对于日本的黑帮进行了一些美化。虽然故事剧情并没有像标题和开头一幕一样热血，但是剧情本身还是非常精彩！这里好像说了绕口令。但就是夸这部动漫吧。</p><p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fzlc8bxnrgj20yi22ojyq.jpg" alt=""><br>–end–</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天上午看了一部动漫，B站Lex推荐的。看完之后感叹这两天动漫质量的提高，动漫三观简直不能再正，满满的正能量。这种动漫真是难怪不火。动漫名字叫《超能力少女》但是整个片并不是一部打斗片，而是一部以一位来自异世界超能力少女生活为主线另一位异世界超能力少女为辅，讲述了来到这个世界之后，两个少女面对不同的家庭之间各自的努力和奋斗故事，在女二号身上，看到了满满的正能量，与女一号富有的生活对比，个人感觉女二号的勤奋和人品更像是这部故事讲述的主题。同时，这个故事也对于日本的黑帮进行了一些美化。虽然故事剧情并没有像标题和开头一幕一样热血，但是剧情本身还是非常精彩！这里好像说了绕口令。但就是夸这部动漫吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fzlc8bxnrgj20yi22ojyq.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;–end–&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
