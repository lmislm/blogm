<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMISLMのBlog</title>
  
  <subtitle>“   故不积跬步，无以至千里；不积小流，无以成江海。  -  荀子《劝学篇》”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lmislm.com/"/>
  <updated>2019-06-29T13:04:53.834Z</updated>
  <id>http://lmislm.com/</id>
  
  <author>
    <name>lmislm</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day167-TypeScript基础小记-类（2）</title>
    <link href="http://lmislm.com/2019/06/29/2019-06-29/"/>
    <id>http://lmislm.com/2019/06/29/2019-06-29/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-06-29T13:04:53.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>类的例子</li><li>继承</li><li>公共、私有与受保护的修饰符<a id="more"></a></li></ol><h3 id="类的例子"><a href="#类的例子" class="headerlink" title="类的例子"></a>类的例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  greeting: string</span><br><span class="line">  <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message</span><br><span class="line">  &#125;</span><br><span class="line">  greet () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greeter(<span class="string">'world'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(greeter)</span><br></pre></td></tr></table></figure><h3 id="继承-例子1"><a href="#继承-例子1" class="headerlink" title="继承-例子1"></a>继承-例子1</h3><ul><li>例子1：</li></ul><p>类（Dog）从基类（Animal)中继承了属性和方法。<code>Dog</code>是一个<code>派生类</code>,它派生自<code>Animal`</code>基类`。</p><p>通过<code>extends</code>关键字，<code>派生类</code>通常被称作<strong>子类</strong>，<code>基类</code>通常被称作<strong>超类</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  move(distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`目标被动物吓退了 <span class="subst">$&#123;distanceInMeters&#125;</span>m`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  bark () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'汪汪汪'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog() <span class="comment">// 创建一个Dog能够`bark()`和`move()`的实例</span></span><br><span class="line">dog.bark()</span><br><span class="line">dog.move(<span class="number">10</span>)</span><br><span class="line">dog.bark()</span><br></pre></td></tr></table></figure><h3 id="继承-例子2"><a href="#继承-例子2" class="headerlink" title="继承-例子2"></a>继承-例子2</h3><p> 和例子1有点不同，这个<code>派生类（子类）</code>必须调用<code>super()</code>，它会执行<code>基类（超类）</code>的<strong>构造函数</strong>。</p><p> 且，在<strong>构造函数</strong>里访问<code>this</code>的属性之前，一定要调用<code>super()</code>（这个是TypeScript强制执行的一条规则）。</p><p> 例子2，演示了如何在子类里可以重写父类方法。Snake类和Horse类都创建了move方法，它们重写了从Animal继承来的move方法，使得move方法根据不同的类而具有不同的功能。</p><p> 例子2中<code>tom: Animal</code>，tom被声明为<code>Animal类型</code>，但因为它的值是<code>Horse</code>类型（等于号右边部分），调用<code>tom.move(90)</code>时，它会调用Horse里<strong>重写</strong>的方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">  move (distanceInMeters: number = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 跑了 <span class="subst">$&#123;distanceInMeters&#125;</span>米`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123; <span class="keyword">super</span>(name) &#125;</span><br><span class="line">  move(distanceInMeters = <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'蛇出溜滑，遛了遛了..'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123; <span class="keyword">super</span>(name) &#125;</span><br><span class="line">  move(distanceInMeters = <span class="number">45</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我老马先跑一步...'</span>)</span><br><span class="line">    <span class="keyword">super</span>.move(distanceInMeters)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'哟，这不是子类蛇嘛'</span>)</span><br><span class="line"><span class="keyword">let</span> tom: Animal = <span class="keyword">new</span> Horse(<span class="string">'马哥，马哥，子类马，雷吼'</span>)</span><br><span class="line">sam.move()</span><br><span class="line">tom.move(<span class="number">90</span>)</span><br></pre></td></tr></table></figure><h3 id="公共、私有与受保护的修饰符"><a href="#公共、私有与受保护的修饰符" class="headerlink" title="公共、私有与受保护的修饰符"></a>公共、私有与受保护的修饰符</h3><p>public、private</p><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  public name: string</span><br><span class="line">  public <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">  public move (distanceInMeters: number) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> 移动 <span class="subst">$&#123;distanceInMeters&#125;</span>米。`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  private name: string</span><br><span class="line">  <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性“name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class="line"><span class="keyword">new</span> Animal(<span class="string">'Cat'</span>).name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;类的例子&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;公共、私有与受保护的修饰符
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day166-TypeScript基础小记-继承(接口)</title>
    <link href="http://lmislm.com/2019/06/28/2019-06-28/"/>
    <id>http://lmislm.com/2019/06/28/2019-06-28/</id>
    <published>2019-06-27T16:00:00.000Z</published>
    <updated>2019-06-28T13:51:26.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>继承接口。</li><li>一个接口继承多个接口，创建出多个接口的合成接口。</li><li>接口继承类。<a id="more"></a></li></ol><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">  color: string</span><br><span class="line">&#125;</span><br><span class="line">interface Square extends Shape &#123;</span><br><span class="line">  sideLength: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;</span><br><span class="line">square.color = 'red'</span><br><span class="line">square.sideLength = 6</span><br></pre></td></tr></table></figure><h3 id="继承多接口-合成接口"><a href="#继承多接口-合成接口" class="headerlink" title="继承多接口|合成接口"></a>继承多接口|合成接口</h3><blockquote><p>一个接口继承多个接口，创建出多个接口的合成接口。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">  color: string</span><br><span class="line">&#125;</span><br><span class="line">interface PenStroke &#123;</span><br><span class="line">  penWidth: number</span><br><span class="line">&#125;</span><br><span class="line">interface Square extends Shape, PenStroke &#123;</span><br><span class="line">  sideLength: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;</span><br><span class="line">square.color = 'red'</span><br><span class="line">square.sideLength = 9</span><br><span class="line">square.penWidth = 5.0</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="对象“多类型”"><a href="#对象“多类型”" class="headerlink" title="对象“多类型”"></a>对象“多类型”</h3><blockquote><p>一个对象同时具有多种类型</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface Counter &#123;</span><br><span class="line">  (start: number): string</span><br><span class="line">  interval: number</span><br><span class="line">  reset(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = &lt;Counter&gt;function (start: number): string &#123; return '' &#125;</span><br><span class="line">  counter.interval = 123</span><br><span class="line">  counter.reset = function () &#123;&#125;</span><br><span class="line">  return counter</span><br><span class="line">&#125;</span><br><span class="line">let c = getCounter()</span><br><span class="line">c(10)</span><br><span class="line">c.reset()</span><br><span class="line">c.interval = 5.0</span><br></pre></td></tr></table></figure><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><blockquote><p>接口继承一个<code>类类型</code>时，它会继承类的成员但不包括其<code>实现</code>。（大概就是：<code>接口</code>能声明所有类中存在的成员，但是不提供<strong>具体实现</strong>）<br><code>SelectableControl</code>包含了<code>Control</code>的所有<code>成员</code>,包括<strong>私有成员</strong><code>state</code>。<br>即：当接口继承了一个拥有<code>私有成员</code>或<code>受保护成员</code>的类时，这个<code>接口类型</code>只能是被这个类或其子类所实现。</p></blockquote><blockquote><p><code>SelectableControl</code>包含了Control的所有成员,包括私有成员state<br>因为state是私有成员，只能Control的子类才能实现<code>SelectablControl</code>接口。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">  private state: any</span><br><span class="line">&#125;</span><br><span class="line">interface SelectableControl extends Control &#123;</span><br><span class="line">  select(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Control</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> <span class="keyword">extends</span> <span class="title">Control</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> <span class="title">implements</span> <span class="title">SelectableControl</span> </span>&#123;</span><br><span class="line">  select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;继承接口。&lt;/li&gt;
&lt;li&gt;一个接口继承多个接口，创建出多个接口的合成接口。&lt;/li&gt;
&lt;li&gt;接口继承类。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day165-TypeScript基础小记-类</title>
    <link href="http://lmislm.com/2019/06/27/2019-06-27/"/>
    <id>http://lmislm.com/2019/06/27/2019-06-27/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T14:42:12.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>类类型</li><li>类静态部分和实例部分的区别</li><li>直接操作类的静态部分</li><li>使用<code>类表达式</code>直接操作类的静态部分<a id="more"></a></li></ol><h4 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h4><blockquote><p>强制一个类去符合<br>实现接口<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>接口描述类的公共部分<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  <span class="comment">// 在接口中描述一个方法，在类里实现</span></span><br><span class="line">  setTime(d: <span class="built_in">Date</span>): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="类静态部分和实例部分的区别"><a href="#类静态部分和实例部分的区别" class="headerlink" title="类静态部分和实例部分的区别"></a>类静态部分和实例部分的区别</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="comment">// h: hour, m: minute</span></span><br><span class="line">  <span class="comment">/** 构造器 */</span></span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类实现接口时，只对实例部分进行类型检查。而constructor存在于类的静态部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockConstructor</span> </span>&#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span></span><br><span class="line">  <span class="comment">// 缺少构造函数实现。ts(2390)</span></span><br><span class="line">  <span class="comment">// constructor(h: number, m: number)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接操作类的静态部分"><a href="#直接操作类的静态部分" class="headerlink" title="直接操作类的静态部分"></a>直接操作类的静态部分</h4><blockquote><p>定义两个接口，分别为<code>构造函数</code>和<code>实例方法</code>所用</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number): ClockInterface</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  tick(): <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** ClockConstructor为构造函数所用 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span> (<span class="params">ctor: ClockConstructor, h: number, m: number</span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ctor(h, m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** ClockInterface为实例方法所用 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitalClock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beep'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnalogClock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'tick tock'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>)</span><br><span class="line"><span class="comment">// 检查AnalogClock是否符合构造函数签名</span></span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><h4 id="使用类表达式直接操作类的静态部分"><a href="#使用类表达式直接操作类的静态部分" class="headerlink" title="使用类表达式直接操作类的静态部分"></a>使用<code>类表达式</code>直接操作类的静态部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (h: number, <span class="attr">m</span>: number)</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  tick()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Clock: ClockConstructor = <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123;&#125;</span><br><span class="line">  tick () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'beep'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;类类型&lt;/li&gt;
&lt;li&gt;类静态部分和实例部分的区别&lt;/li&gt;
&lt;li&gt;直接操作类的静态部分&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;类表达式&lt;/code&gt;直接操作类的静态部分
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day164-TypeScript基础小记-interface</title>
    <link href="http://lmislm.com/2019/06/26/2019-06-26/"/>
    <id>http://lmislm.com/2019/06/26/2019-06-26/</id>
    <published>2019-06-25T16:00:00.000Z</published>
    <updated>2019-06-26T14:09:07.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p>接口的作用：</p><ol><li>多个属性处理类型判断</li><li>接口描述函数类型<a id="more"></a><h4 id="多个属性如何处理类型判断？"><a href="#多个属性如何处理类型判断？" class="headerlink" title="多个属性如何处理类型判断？"></a>多个属性如何处理类型判断？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span> (<span class="params">labeledObj: &#123; label: string &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labeledObj.label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'Size 10 Object'</span> &#125;</span><br><span class="line">printLabel(myObj)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以上是对象只有一个label属性，多个属性如何处理？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface LabeledValue &#123;</span><br><span class="line">  label: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labeledObj: LabeledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labeledObj.label)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'Size 10 Object'</span> &#125;</span><br><span class="line">printLabel(myObj)</span><br></pre></td></tr></table></figure></li></ol><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><blockquote><p>interface里的值<strong>不是</strong>所有的都是<strong>必需</strong>的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string</span><br><span class="line">  width?: number</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span> (<span class="params">config: SquareConfig</span>): </span>&#123; color: string, <span class="attr">area</span>: number &#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">'white'</span>, <span class="attr">area</span>: <span class="number">100</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;<span class="attr">color</span>: <span class="string">'black'</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mySquare)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="接口描述函数类型"><a href="#接口描述函数类型" class="headerlink" title="接口描述函数类型"></a>接口描述函数类型</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, <span class="attr">subString</span>: string): boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span> (<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString)</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h4><blockquote><p>ts支持两种索引签名：字符串和数字<br><code>数字索引</code>的返回值必须是<code>字符串索引</code>返回值类型的<strong>子类型</strong><br>因为用number来索引时，JS会将它转换成string然后再去索引对象。即：用100去索引等同于用“100”去索引。<br>问题：<code>dictionary模式</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface StringArray &#123;</span><br><span class="line">  [index: number]: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray</span><br><span class="line">myArray = [<span class="string">'liu'</span>, <span class="string">'mon'</span>]</span><br><span class="line"><span class="comment">// 当用number去索引StringArray时会得到string类型的返回值</span></span><br><span class="line"><span class="keyword">let</span> myStr: string = myArray[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">console</span>.log(myArray)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 养殖</span></span><br><span class="line">  breed: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串</span></span><br><span class="line">interface NotOkay &#123;</span><br><span class="line">  <span class="comment">// 数字索引类型“Animal”不能赋给字符串索引类型“Dog”。ts(2413)</span></span><br><span class="line">  <span class="comment">// [x: number]: Animal</span></span><br><span class="line">  [x: string]: Dog</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;p&gt;接口的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多个属性处理类型判断&lt;/li&gt;
&lt;li&gt;接口描述函数类型
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day163-正则点滴</title>
    <link href="http://lmislm.com/2019/06/25/2019-06-25/"/>
    <id>http://lmislm.com/2019/06/25/2019-06-25/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2019-06-25T14:17:35.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ol><li>判断是否仅有数字或者”.”、”,”。</li><li>找出并“格式化”字符串中的所有数字。<a id="more"></a></li></ol><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><ol><li><p>判断是否仅有数字或者”.”、”,”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[<span class="number">0</span><span class="number">-9.</span>,]+$/</span><br><span class="line"><span class="comment">// 配合test用比较好。如：reg.test(str)</span></span><br></pre></td></tr></table></figure></li><li><p>找出并“格式化”字符串中的所有数字。</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(str.match(<span class="regexp">/\d+/g</span>) || []).map(<span class="built_in">Number</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则&quot;&gt;&lt;a href=&quot;#正则&quot; class=&quot;headerlink&quot; title=&quot;正则&quot;&gt;&lt;/a&gt;正则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;判断是否仅有数字或者”.”、”,”。&lt;/li&gt;
&lt;li&gt;找出并“格式化”字符串中的所有数字。
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day162-键值对，以value为键的结果对象</title>
    <link href="http://lmislm.com/2019/06/24/2019-06-24/"/>
    <id>http://lmislm.com/2019/06/24/2019-06-24/</id>
    <published>2019-06-23T16:00:00.000Z</published>
    <updated>2019-06-24T13:47:57.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'a'</span>, <span class="string">'code'</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'b'</span>, <span class="string">'code'</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="string">'id'</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'c'</span>, <span class="string">'code'</span>: <span class="number">33</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>以code值为key的结果对象</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>主要是<code>[]</code>的用法，灵活的很呐！</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getKey = <span class="function">(<span class="params">data, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [item[key]]: item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以code值为key的结果对象&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day161-统计数组中所有对象相同属性值的总和，（假设值为整数）</title>
    <link href="http://lmislm.com/2019/06/23/2019-06-23/"/>
    <id>http://lmislm.com/2019/06/23/2019-06-23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-06-23T14:07:58.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="string">'1.pdf'</span>, <span class="attr">z</span>: <span class="number">2</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="string">'2.pdf'</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;,&#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="string">'3.pdf'</span>, <span class="attr">z</span>: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">x</span>: <span class="number">6</span>, <span class="attr">y</span>: <span class="string">'01.pdf2.pdf3.pdf'</span>, <span class="attr">z</span>: <span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumObjectsSameKey</span>(<span class="params">...objs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> objs.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj.hasOwnProperty(k)) &#123;</span><br><span class="line">        acc[k] = (acc[k] || <span class="number">0</span>) + obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sumObjectsSameKey(...arr))</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties" target="_blank" rel="noopener">https://stackoverflow.com/questions/42488048/javascript-sum-of-two-object-with-same-properties</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;输入：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;1.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;,&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;2.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;,&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;3.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;01.pdf2.pdf3.pdf&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;z&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day160-vuejs-CreateElement-children 的规范化</title>
    <link href="http://lmislm.com/2019/06/22/2019-06-22/"/>
    <id>http://lmislm.com/2019/06/22/2019-06-22/</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-22T14:04:58.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="children-的规范化"><a href="#children-的规范化" class="headerlink" title="children 的规范化"></a>children 的规范化</h3><p><code>_createElement</code> 接收的第 4 个参数 children 是任意类型的,所以要规范化。<br>代码目录：&lt;src/core/vdom/helpers/normalzie-children.js&gt;<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The template compiler attempts to minimize the need for normalization by</span></span><br><span class="line"><span class="comment">// statically analyzing the template at compile time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For plain HTML markup, normalization can be completely skipped because the</span></span><br><span class="line"><span class="comment">// generated render function is guaranteed to return Array&lt;VNode&gt;. There are</span></span><br><span class="line"><span class="comment">// two cases where extra normalization is needed:</span></span><br><span class="line"><span class="comment">/* 注：functional component 函数式组件返回的是一个数组而不是一个根节点 */</span></span><br><span class="line"><span class="comment">/* 场景1 */</span></span><br><span class="line"><span class="comment">// 1. When the children contains components - because a functional component</span></span><br><span class="line"><span class="comment">// may return an Array instead of a single root. In this case, just a simple</span></span><br><span class="line"><span class="comment">// normalization is needed - if any child is an Array, we flatten the whole</span></span><br><span class="line"><span class="comment">// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep</span></span><br><span class="line"><span class="comment">// because functional components already normalize their own children.</span></span><br><span class="line"><span class="comment">/*该方法调用场景是 render 函数是编译生成的*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">simpleNormalizeChildren</span> (<span class="params">children: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children[i])) &#123;</span><br><span class="line">      <span class="comment">/* 注：flatten 整个 Array&lt;VNode&gt; */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> children</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 场景2 */</span></span><br><span class="line"><span class="comment">// 2. When the children contains constructs that always generated nested Arrays（注：嵌套数组）,</span></span><br><span class="line"><span class="comment">// e.g. &lt;template&gt;, &lt;slot&gt;, v-for, or when the children is provided by user</span></span><br><span class="line"><span class="comment">// with hand-written render functions / JSX. In such cases a full normalization</span></span><br><span class="line"><span class="comment">// is needed to cater to all possible types of children values.</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeChildren</span> (<span class="params">children: any</span>): ?<span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isPrimitive(children)</span><br><span class="line">    ? [createTextVNode(children)]</span><br><span class="line">    : <span class="built_in">Array</span>.isArray(children)</span><br><span class="line">      ? normalizeArrayChildren(children)</span><br><span class="line">      : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;children-的规范化&quot;&gt;&lt;a href=&quot;#children-的规范化&quot; class=&quot;headerlink&quot; title=&quot;children 的规范化&quot;&gt;&lt;/a&gt;children 的规范化&lt;/h3&gt;&lt;p&gt;&lt;code&gt;_createElement&lt;/code&gt; 接收的第 4 个参数 children 是任意类型的,所以要规范化。&lt;br&gt;代码目录：&amp;lt;src/core/vdom/helpers/normalzie-children.js&amp;gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day159-__.range</title>
    <link href="http://lmislm.com/2019/06/21/2019-06-21/"/>
    <id>http://lmislm.com/2019/06/21/2019-06-21/</id>
    <published>2019-06-20T16:00:00.000Z</published>
    <updated>2019-06-21T14:37:53.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求区间内所有连续数"><a href="#求区间内所有连续数" class="headerlink" title="求区间内所有连续数"></a>求区间内所有连续数</h3><p>给出整数区间和步长，求区间内连续的数字，要求正序或倒序。</p><p>例如：</p><p>输入：[1, 5]，步长为1</p><p>输出：1，2，3，4，5<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://github.com/lodash/lodash/blob/master/.internal/baseRange.js</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; start 开始值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; end 结束值</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; step 步长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseRange</span>(<span class="params">start, end, step, fromRight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.ceil((end - start) / (step || <span class="number">1</span>)), <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(length)</span><br><span class="line">  <span class="keyword">while</span> (length--) &#123;</span><br><span class="line">    <span class="comment">// 从大到小，或者是从小到大</span></span><br><span class="line">    result[fromRight ? length : ++index] = start</span><br><span class="line">    start += step</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;求区间内所有连续数&quot;&gt;&lt;a href=&quot;#求区间内所有连续数&quot; class=&quot;headerlink&quot; title=&quot;求区间内所有连续数&quot;&gt;&lt;/a&gt;求区间内所有连续数&lt;/h3&gt;&lt;p&gt;给出整数区间和步长，求区间内连续的数字，要求正序或倒序。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;输入：[1, 5]，步长为1&lt;/p&gt;
&lt;p&gt;输出：1，2，3，4，5&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day158-Virtual DOM 小结</title>
    <link href="http://lmislm.com/2019/06/20/2019-06-20/"/>
    <id>http://lmislm.com/2019/06/20/2019-06-20/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-06-20T15:34:12.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="createElement的定义"><a href="#createElement的定义" class="headerlink" title="createElement的定义"></a>createElement的定义</h3><p>createElement 方法创建 VNode。&lt;src/core/vdom/create-elemenet.js&gt;<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapper function for providing a more flexible interface</span></span><br><span class="line"><span class="comment">// without getting yelled at by flow</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  alwaysNormalize: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data) || isPrimitive(data)) &#123;</span><br><span class="line">    normalizationType = children</span><br><span class="line">    children = data</span><br><span class="line">    data = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isTrue(alwaysNormalize)) &#123;</span><br><span class="line">    normalizationType = ALWAYS_NORMALIZE</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对_createElement的封装，配置参数更加灵活</span></span><br><span class="line">  <span class="keyword">return</span> _createElement(context, tag, data, children, normalizationType)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="createElement"><a href="#createElement" class="headerlink" title="_createElement"></a>_createElement</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component, <span class="regexp">//</span>  VNode 的上下文</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData, <span class="regexp">//</span> &lt;flow&gt;vnode.js&gt;目录中</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any, <span class="regexp">//</span> VNode 的子节点</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef((data: any).__ob__)) &#123;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">`Avoid using observed data object as vnode data: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>\n`</span> +</span><br><span class="line">      <span class="string">'Always create fresh vnode data objects in each render!'</span>,</span><br><span class="line">      context</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// object syntax in v-bind</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(data.is)) &#123;</span><br><span class="line">    tag = data.is</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="comment">// in case of component :is set to falsy value</span></span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// warn against non-primitive key</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">    isDef(data) &amp;&amp; isDef(data.key) &amp;&amp; !isPrimitive(data.key)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!__WEEX__ || !(<span class="string">'@binding'</span> <span class="keyword">in</span> data.key)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Avoid using non-primitive value as key, '</span> +</span><br><span class="line">        <span class="string">'use string/number value instead.'</span>,</span><br><span class="line">        context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// support single function children as default scoped slot</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> children[<span class="number">0</span>] === <span class="string">'function'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    data = data || &#123;&#125;</span><br><span class="line">    data.scopedSlots = &#123; <span class="attr">default</span>: children[<span class="number">0</span>] &#125;</span><br><span class="line">    children.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class="line">    children = normalizeChildren(children)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class="line">    children = simpleNormalizeChildren(children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> vnode, ns</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">      <span class="comment">// platform built-in elements</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        config.parsePlatformTagName(tag), data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">      <span class="comment">// component</span></span><br><span class="line">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// unknown or unlisted namespaced elements</span></span><br><span class="line">      <span class="comment">// check at runtime because it may get assigned a namespace when its</span></span><br><span class="line">      <span class="comment">// parent normalizes children</span></span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        tag, data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// direct component options / constructor</span></span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;createElement的定义&quot;&gt;&lt;a href=&quot;#createElement的定义&quot; class=&quot;headerlink&quot; title=&quot;createElement的定义&quot;&gt;&lt;/a&gt;createElement的定义&lt;/h3&gt;&lt;p&gt;createElement 方法创建 VNode。&amp;lt;src/core/vdom/create-elemenet.js&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// wrapper function for providing a more flexible interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// without getting yelled at by flow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  context: Component,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  tag: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  data: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  children: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  normalizationType: any,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  alwaysNormalize: boolean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;VNode&lt;/span&gt; | &lt;span class=&quot;title&quot;&gt;Array&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;VNode&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(data) || isPrimitive(data)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    normalizationType = children&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    children = data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isTrue(alwaysNormalize)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    normalizationType = ALWAYS_NORMALIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 对_createElement的封装，配置参数更加灵活&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _createElement(context, tag, data, children, normalizationType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day157-Virtual DOM 小结</title>
    <link href="http://lmislm.com/2019/06/19/2019-06-19/"/>
    <id>http://lmislm.com/2019/06/19/2019-06-19/</id>
    <published>2019-06-18T16:00:00.000Z</published>
    <updated>2019-06-19T13:28:51.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据结构的定义"><a href="#数据结构的定义" class="headerlink" title="数据结构的定义"></a>数据结构的定义</h3><p><code>Virtual DOM</code> 就是用原生的 JS 对象去描述 DOM 节点。<br><a id="more"></a></p><p>vuejs借助了<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom</a>这个库。</p><p><code>Virtual DOM</code>用 <code>VNode</code> 这么一个 Class 去描述。</p><p><code>VNode</code> 也是对真实 DOM 的一种抽象描述，</p><p><code>VNode</code>的核心定义是几个关键属性，<strong>标签名</strong>、<strong>数据</strong>、<strong>子节点</strong>、<strong>键值</strong>等。</p><p>其它属性都是都是用来扩展 VNode 的灵活性以及实现一些特殊 feature。</p><p>VNode是映射到真实 DOM 的<strong>渲染</strong>，不需要操作DOM的方法。</p><blockquote><p>Vue.js 利用 createElement 方法创建 VNode，它定义在 src/core/vdom/create-elemenet.js</p></blockquote><h3 id="映射DOM"><a href="#映射DOM" class="headerlink" title="映射DOM"></a>映射DOM</h3><p>映射到真实的 DOM 实际上要经历 VNode 的 <strong>create</strong>、<strong>diff</strong>、<strong>patch</strong>等过程</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据结构的定义&quot;&gt;&lt;a href=&quot;#数据结构的定义&quot; class=&quot;headerlink&quot; title=&quot;数据结构的定义&quot;&gt;&lt;/a&gt;数据结构的定义&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Virtual DOM&lt;/code&gt; 就是用原生的 JS 对象去描述 DOM 节点。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://lmislm.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>day156-LeetCode 278. First Bad Version</title>
    <link href="http://lmislm.com/2019/06/18/2019-06-18/"/>
    <id>http://lmislm.com/2019/06/18/2019-06-18/</id>
    <published>2019-06-17T16:00:00.000Z</published>
    <updated>2019-06-18T15:37:58.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.<br>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.<br>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>直接用二分法搜索<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example：</span><br><span class="line">[1,2,3,4,5] --&gt; [1,1,1,0,0]</span><br><span class="line">max = 5, min = 1   -&gt; mid = 3   isBadVersion(3) = true</span><br><span class="line">min = mid+1 = 4    -&gt; mid = 4   isBadVersion(4) = false</span><br><span class="line">max = mid   = 4    -&gt; max &gt; min == false, end loop</span><br></pre></td></tr></table></figure></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;integer&#125; version number</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;integer&#125; n Total versions</span></span><br><span class="line"><span class="comment">   * @return &#123;integer&#125; The first bad version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max = n</span><br><span class="line">    <span class="keyword">let</span> mid</span><br><span class="line">    <span class="comment">// 二分法搜索 </span></span><br><span class="line">    <span class="keyword">while</span> (max &gt; min)&#123;</span><br><span class="line">      mid = min + <span class="built_in">parseInt</span>((max+min) / <span class="number">2</span>) </span><br><span class="line">      <span class="keyword">if</span> (isBadVersion(mid)) &#123;</span><br><span class="line">        max = mid</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        min = mid + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.&lt;br&gt;Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.&lt;br&gt;You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day155-LeetCode 191. Number of 1 Bits</title>
    <link href="http://lmislm.com/2019/06/17/2019-06-17/"/>
    <id>http://lmislm.com/2019/06/17/2019-06-17/</id>
    <published>2019-06-16T16:00:00.000Z</published>
    <updated>2019-06-17T15:56:27.344Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p><p>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</p><p>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</p><p>你可以假设数组中不存在重复的元素。</p><p>你的算法时间复杂度必须是 O(log n) 级别。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure></p><p>示例 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>二分法，但要注意给出的<code>nums</code> 不是完全的升序或降序。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> search(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">      <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; nums[high]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[high])</span><br><span class="line">        <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[low] &lt;= target &amp;&amp; target &lt; nums[mid])</span><br><span class="line">          <span class="keyword">return</span> search(nums, low, mid - <span class="number">1</span>, target);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> search(nums, mid + <span class="number">1</span>, high, target);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;假设按照升序排序的数组在预先未知的某个点上进行了旋转。&lt;/p&gt;
&lt;p&gt;( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。&lt;/p&gt;
&lt;p&gt;搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。&lt;/p&gt;
&lt;p&gt;你可以假设数组中不存在重复的元素。&lt;/p&gt;
&lt;p&gt;你的算法时间复杂度必须是 O(log n) 级别。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: nums = [4,5,6,7,0,1,2], target = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;示例 2:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入: nums = [4,5,6,7,0,1,2], target = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day154-LeetCode 191. Number of 1 Bits</title>
    <link href="http://lmislm.com/2019/06/16/2019-06-16/"/>
    <id>http://lmislm.com/2019/06/16/2019-06-16/</id>
    <published>2019-06-15T16:00:00.000Z</published>
    <updated>2019-06-17T16:09:29.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).</p><p>For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>先把数字转二进制，然后再遍历1的个数</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hammingWeight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> secondS = n.toString(<span class="number">2</span>).split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; secondS.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (secondS % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).&lt;/p&gt;
&lt;p&gt;For example, the 32-bit integer ’11’ has binary representation 00000000000000000000000000001011, so the function should return 3.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day153-LeetCode 198. House Robber</title>
    <link href="http://lmislm.com/2019/06/15/2019-06-15/"/>
    <id>http://lmislm.com/2019/06/15/2019-06-15/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-06-15T14:40:18.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.<br>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.<br>（大意是：求最大不连续的值）<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>假设为[m0,m1,m2,m3,….]，求最大的数</p></blockquote><p>如果房子只有[m0], max = mo</p><p>[m0,m1], max = Max(m0,m1)</p><p>[m0,m1,m2], max = Max(m0+m2,m1)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">robber</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxSum = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">if</span>(nums.length === <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.max(nums[<span class="number">1</span>],nums[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  maxSum.push(nums[<span class="number">0</span>])</span><br><span class="line">  maxSum.push(<span class="built_in">Math</span>.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// Max(m0+m2,m1),计算公式</span></span><br><span class="line">    maxSum[i] =  <span class="built_in">Math</span>.max(nums[i] + maxSum[i<span class="number">-2</span>], maxSum[i<span class="number">-1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSum.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;br&gt;Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.&lt;br&gt;（大意是：求最大不连续的值）&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day152-找出有序数组中连续的数</title>
    <link href="http://lmislm.com/2019/06/14/2019-06-14/"/>
    <id>http://lmislm.com/2019/06/14/2019-06-14/</id>
    <published>2019-06-13T16:00:00.000Z</published>
    <updated>2019-06-14T14:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>找出有序数组中连续的数，并按一定规则排列。<br>（这个题来自今天的需求，要求选中一些指定的图片。且可以利用范围来选择。）<br>input：[1, 3, 4, 10, 25, 26, 30, 31, 32, 33]<br>output：1,3-4,10,25-26,30-33<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>每一个数，找出每个数和该数的下一个数加一是不是相等。<br>利用“游标”的方法，挨个查找。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressArr</span> (<span class="params">sortedArr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 必须是有序数组</span></span><br><span class="line">  <span class="keyword">let</span> start = sortedArr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> stop = start</span><br><span class="line">  <span class="keyword">let</span> arrLength = sortedArr.length <span class="comment">// 注意这里sortedArr，如果是定义变量arr，则会变量提升</span></span><br><span class="line">  <span class="keyword">let</span> resultStr = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arrLength; i++) &#123;</span><br><span class="line">    <span class="comment">// 等于前一个连续的值+1，即：连续值</span></span><br><span class="line">    <span class="keyword">if</span> (sortedArr[i] === stop + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 指向下一个元素</span></span><br><span class="line">      stop = sortedArr[i]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (start === stop) &#123;</span><br><span class="line">        resultStr += start + <span class="string">','</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resultStr += start + <span class="string">'-'</span> + stop + <span class="string">','</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重新初始化start和stop指向</span></span><br><span class="line">      start = sortedArr[i]</span><br><span class="line">      stop = start</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理最后的数</span></span><br><span class="line">  <span class="keyword">if</span> (start === stop) &#123;</span><br><span class="line">    resultStr += start</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resultStr += start + <span class="string">'-'</span> + stop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;找出有序数组中连续的数，并按一定规则排列。&lt;br&gt;（这个题来自今天的需求，要求选中一些指定的图片。且可以利用范围来选择。）&lt;br&gt;input：[1, 3, 4, 10, 25, 26, 30, 31, 32, 33]&lt;br&gt;output：1,3-4,10,25-26,30-33&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>day151-LeetCode 141. Linked List Cycle</title>
    <link href="http://lmislm.com/2019/06/13/2019-06-13/"/>
    <id>http://lmislm.com/2019/06/13/2019-06-13/</id>
    <published>2019-06-12T16:00:00.000Z</published>
    <updated>2019-06-13T15:01:52.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, determine if it has a cycle in it.<br>Follow up: Can you solve it without using extra space?<br><a id="more"></a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>求链表中是否有个循环</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasCycle</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.next === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> node = head</span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.flag) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 标记节点每一个跑过的节点</span></span><br><span class="line">    node.flag = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 跑到下一个节点</span></span><br><span class="line">    node = node.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快慢链表"><a href="#快慢链表" class="headerlink" title="快慢链表"></a>快慢链表</h3><blockquote><p>两者步长不一样</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">  ListNode slow = head, fast = head;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    slow = slow.next;</span><br><span class="line">    fast = fast.next.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (slow == fast) </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, determine if it has a cycle in it.&lt;br&gt;Follow up: Can you solve it without using extra space?&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://lmislm.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="acm" scheme="http://lmislm.com/tags/acm/"/>
    
  </entry>
  
  <entry>
    <title>markdown-trick</title>
    <link href="http://lmislm.com/2019/06/07/markdown-trick/"/>
    <id>http://lmislm.com/2019/06/07/markdown-trick/</id>
    <published>2019-06-07T13:34:19.031Z</published>
    <updated>2019-06-15T14:40:12.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vscode-snippets"><a href="#vscode-snippets" class="headerlink" title="vscode snippets"></a>vscode snippets</h2><blockquote><p>以设置 markdown 代码片段为例</p></blockquote><a id="more"></a><h4 id="开启设置"><a href="#开启设置" class="headerlink" title="开启设置"></a><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">开启设置</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 设置</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"[markdown]":  &#123;</span><br><span class="line">    "editor.quickSuggestions": true</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="设置模板"><a href="#设置模板" class="headerlink" title="设置模板"></a><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">设置模板</a></h4><blockquote><p>文件 &gt; 首选项 &gt; 用户代码片段 &gt; markdown.json</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"markdown write template"</span>: &#123;</span><br><span class="line">    <span class="attr">"prefix"</span>: <span class="string">"mdrt"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">      <span class="string">"--- $1"</span>,</span><br><span class="line">      <span class="string">"title: $TM_FILENAME_BASE"</span>,</span><br><span class="line">      <span class="string">"tags:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"categories:"</span>,</span><br><span class="line">      <span class="string">"* xx"</span>,</span><br><span class="line">      <span class="string">"date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE-$CURRENT_HOUR"</span>,</span><br><span class="line">      <span class="string">"--- "</span>,</span><br><span class="line">      <span class="string">" \n "</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">"&lt;!--more--&gt; $2"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Create template for markdown write"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: md-kill</span><br><span class="line">tags:</span><br><span class="line">* xx</span><br><span class="line">categories:</span><br><span class="line">* xx</span><br><span class="line">date: 2018-03-31-20</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/Microsoft/vscode/issues/28048" target="_blank" rel="noopener">Markdown Snippet Prefix Does Not Trigger Snippet #28048</a><br><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets" target="_blank" rel="noopener">Creating your own snippets</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vscode-snippets&quot;&gt;&lt;a href=&quot;#vscode-snippets&quot; class=&quot;headerlink&quot; title=&quot;vscode snippets&quot;&gt;&lt;/a&gt;vscode snippets&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以设置 markdown 代码片段为例&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="日常操作" scheme="http://lmislm.com/categories/%E6%97%A5%E5%B8%B8%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="小技巧" scheme="http://lmislm.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>fib</title>
    <link href="http://lmislm.com/2019/06/07/fib/"/>
    <id>http://lmislm.com/2019/06/07/fib/</id>
    <published>2019-06-07T13:34:19.025Z</published>
    <updated>2019-06-15T14:40:12.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><blockquote><p>打印斐波那契数列，递归法，迭代法，提升递归效率</p></blockquote><a id="more"></a><p>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]<br>后一位数是前两位数之和<br>(例如 fib(2) === 0 + 1) === 1;</p><p>提升递归效率，创建一个数据存储，或者一个小的缓存对象，缓存对象是数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function memoize(fn) &#123;</span><br><span class="line">  const cache = &#123;&#125;;</span><br><span class="line">  return function(...args) &#123;</span><br><span class="line">    // ...args ： 数组集</span><br><span class="line">    if (cache[args]) &#123;</span><br><span class="line">      return cache[args];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const result = fn.apply(this, args);</span><br><span class="line">    cache[args] = result;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function slowFib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return slowFib(n - 1) + slowFib(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const fib = memoize(slowFib);</span><br></pre></td></tr></table></figure><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fib(n) &#123;</span><br><span class="line">  if (n &lt; 2) &#123;</span><br><span class="line">    return n;</span><br><span class="line">  &#125;</span><br><span class="line">  return fib(n - 1) + fib(n - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = result[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> b = result[i - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    result.push(a + b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打印斐波那契数列，递归法，迭代法，提升递归效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://lmislm.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JS" scheme="http://lmislm.com/tags/JS/"/>
    
      <category term="编程" scheme="http://lmislm.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Interview" scheme="http://lmislm.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>2019--启程</title>
    <link href="http://lmislm.com/2019/06/07/2019-%E5%90%AF%E7%A8%8B/"/>
    <id>http://lmislm.com/2019/06/07/2019-启程/</id>
    <published>2019-06-07T13:34:19.014Z</published>
    <updated>2019-06-15T14:40:12.469Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/b15ca614gy1fyonjtz2hlj20c80qdwen.jpg" alt><br>即将告别2018年，这个对于我来说，<strong>多灾多难</strong>的一年。<br>这一年发生了太多的事，每一年也都会发生很多事，但从来没有哪一年能够像2018年这样让人印象深刻。<br><strong>考研结束。</strong><br><strong>毕业。</strong><br><strong>工作。</strong><br><strong>最悲痛的莫过于最亲的人去世。</strong><br>事业也刚刚起步，爱情失去了方向。<br>真是让人印象深刻的一年。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/b15ca614gy1fyonjtz2hlj20c80qdwen.jpg&quot; alt&gt;&lt;br&gt;即将告别2018年，这个对于我来说，&lt;strong&gt;多灾多难&lt;/strong&gt;的一年。&lt;br&gt;这一年发生了太多的事，每一年也都会发生很多事，但从来没有哪一年能够像2018年这样让人印象深刻。&lt;br&gt;&lt;strong&gt;考研结束。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;毕业。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;工作。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;最悲痛的莫过于最亲的人去世。&lt;/strong&gt;&lt;br&gt;事业也刚刚起步，爱情失去了方向。&lt;br&gt;真是让人印象深刻的一年。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lmislm.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="http://lmislm.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
